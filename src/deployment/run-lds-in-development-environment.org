#+TITLE: Running Lab Data Service on Developement Environment
#+Author: VLEAD
#+Date: [2017-05-06 Fri]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ./org-templates/level-0.org
#+options: ^:nil

* Setup for Vagrantbox
  Following are the steps to setup a Vagrant machine.
  
  1. Download the vagrant box running vlead-dev version [[http://files.vlabs.ac.in/downloads/vagrant-boxes/vlead-dev.box][link]]
  2. Add the box to vagrant
     #+BEGIN_EXAMPLE
     vagrant box add vlead-dev vlead-dev.box
     #+END_EXAMPLE
  3. Create a directory =test-lab-data-service= and run "vagrant init"
     #+BEGIN_EXAMPLE
     mkdir test-lab-data-service
     cd test-lab-data-service
     vagrant init vlead-dev
     #+END_EXAMPLE
  4. Above step(3) generates =Vagrantfile=
  5. Edit the =Vagrantfile= using editor (like e.g emacs,
     vim, etc.) and uncomment below line by removing =#= in
     the beginning of the line to set the vagrant to use
       private network (e.g 192.168.33.22)
     #+BEGIN_EXAMPLE
     #config.vm.network "private_network", ip: "192.168.33.10" 
     config.vm.network "private_network", ip: "192.168.33.22" 
     #+END_EXAMPLE
  6. Boot the machine
     #+BEGIN_EXAMPLE
     vagrant up 
     #+END_EXAMPLE
  7. Login in to the machine as root.  Sometimes, login will
     succeed after a few tries. 
     #+BEGIN_EXAMPLE
     vagrant ssh
     #+END_EXAMPLE
  8. To know the ip address of the vagrant box type the following
     in the terminal
     #+BEGIN_EXAMPLE
     ifconfig
     #+END_EXAMPLE
  9. Access the =lms= of Vagrant machine
     #+BEGIN_EXAMPLE
     firefox <ip_address>
     #+END_EXAMPLE
  10. Export =http_proxy= and =https_proxy= variables if your
     network behind the =http_proxy=
      #+BEGIN_EXAMPLE
      export http_proxy="http://proxy.iiit.ac.in:8080"
      export https_proxy="http://proxy.iiit.ac.in:8080"
      #+END_EXAMPLE

* Creation of Virtual Environment
  1. clone =lab-data-service= from github
     #+BEGIN_EXAMPLE
     git clone http://github.com/vlead/lab-data-service.git
     #+END_EXAMPLE
  2. Install Virtual Environment
     #+BEGIN_EXAMPLE
     sudo pip install virtualenv
     #+END_EXAMPLE
  3. Create Virtual Environment in the =lab-data-service=
     directory
     #+BEGIN_EXAMPLE
     cd lab-data-service
     git checkout develop
     virtualenv venv
     #+END_EXAMPLE
  4. Activate the Virtual Environment
     #+BEGIN_EXAMPLE
     source venv/bin/activate
     #+END_EXAMPLE
  
* Setting up dependencies
  1. Run =make= file in =lab-data-service=.
     #+BEGIN_EXAMPLE
     make
     #+END_EXAMPLE
     *Note*: Test cases will fail at this point because
     there are no dependencies installed. Proceed to next
     step to install dependencies.
  2. Install all the dependencies for running the =lds= applciation.
     run the =setup.py= file, available at =build/code/deployment/=.
     #+BEGIN_EXAMPLE
     cd build/code/deployment/
     python setup.py install
     #+END_EXAMPLE
     *Note* : If you found error something like
     =error:Couldn't find a setup script in/tmp/easy_install-oTRjpD/oursql-0.9.3.2.linux-i686.tar.gz=
     please execute below steps otherwise skip
     #+BEGIN_EXAMPLE
     sudo apt-get install libmysqlclient-dev python-dev
     mkdir oursql
     cd oursql
     wget https://pypi.python.org/packages/8c/88/9f53a314a2af6f56c0a1249c5673ee384b85dc791bac5c1228772ced3502/oursql-0.9.3.2.tar.gz#md5=ade5959a6571b1626966d47f3ab2d315
     tar xvf oursql-0.9.3.2.tar.gz
     cd oursql-0.9.3.2
     python setup.py install
     #+END_EXAMPLE

* Set SQLALCHEMY_DATABASE_URI
  The variable =SQLALCHEMY_DATABASE_URI= has to be set to
  value in =build/code/runtime/config/flask_app_config.py=
  so that the application can use the database.
  #+BEGIN_EXAMPLE
  SQLALCHEMY_DATABASE_URI = 'mysql+oursql://root:<password>@localhost/lds'
  #+END_EXAMPLE

* Creation of database
  1. Login to mysql
     #+BEGIN_EXAMPLE
     mysql -u <username> -p<password>
     #+END_EXAMPLE
  2. Show all databases
     #+BEGIN_EXAMPLE
     show databases;
     #+END_EXAMPLE
  3. Drop database =lds= if already present. Otherwise skip
     this step
     #+BEGIN_EXAMPLE
     drop database lds;
     #+END_EXAMPLE
  4. Create database =lds=.
     #+BEGIN_EXAMPLE
     create database lds;
     #+END_EXAMPLE
  5. Exit out of the mysql console
     #+BEGIN_EXAMPLE
     ctrl+c
     #+END_EXAMPLE
  6. Get the latest mysql dump file from the files server.
     [[http://files.vlabs.ac.in/lds]]
     #+BEGIN_EXAMPLE
     wget http://files.vlabs.ac.in/lds/<lds-latest-dump-19-12-2017>.sql
     #+END_EXAMPLE
  7. Restore Dump in Database
#+BEGIN_EXAMPLE
mysql -u root -p<db-password> <db-name> < <dumpfile.sql>
#+END_EXAMPLE

* Run the application
  
  The application can now be run from the =build/code/runtime/rest/= directory
  #+BEGIN_EXAMPLE
  cd build/code/
  export PYTHONPATH=$(pwd)
  cd runtime/rest/
  python app.py
  #+END_EXAMPLE

* Access the application
  The application is accessed at =http://localhost:5000=
  
* API Documentation
  URL :
  [[https://github.com/vlead/lab-data-service/blob/master/src/runtime/rest/api.org][REST APIS]]
  
