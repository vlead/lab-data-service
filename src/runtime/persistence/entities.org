#+TITLE: Persistent Entities
#+AUTHOR: VLEAD
#+DATE: [2016-08-31 Wed]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  Persistence is added to all the entities defined in [[../objects/entities.org][=objects=]].
  

* Lab
=Lab= is a class with an attribute =lab_name= of type alphabetic string and
=lab_id= of alphabetic string.

#+NAME: class_lab_association_Table
#+BEGIN_SRC python
lab_experiments = db.Table('lab_experiments',
		      db.Column('labid', db.Integer, 
                            db.ForeignKey('lab.id')),
		      db.Column('expid', db.Integer, 
                            db.ForeignKey('experiment.id')))

lab_assets = db.Table('lab_assets',
                 db.Column('labid', db.Integer, 
                       db.ForeignKey('lab.id')),
		 db.Column('assetid', db.Integer,
                       db.ForeignKey('asset.id')))
                     
lab_developers = db.Table('lab_developers',
		      db.Column('labid', db.Integer, 
                            db.ForeignKey('lab.id')),
		      db.Column('developer_id', db.Integer,
                            db.ForeignKey('developer.id')))

labs_phase = db.Table('labs_phase',
		      db.Column('labid', db.Integer, 
                            db.ForeignKey('lab.id')),
		      db.Column('phase_id', db.Integer,
                            db.ForeignKey('phase.id')))

lab_hosting_info = db.Table('lab_hosting_info',
                 db.Column('labid', db.Integer, 
                       db.ForeignKey('lab.id')),
		 db.Column('hosting_infoid', db.Integer,
                       db.ForeignKey('hosting_info.id')))

labs_sections = db.Table('labs_sections',
		      db.Column('labid', db.Integer, 
                            db.ForeignKey('lab.id')),
		      db.Column('section_id', db.Integer,
                            db.ForeignKey('section.id')))

#+END_SRC

#+NAME: class_Lab
#+begin_src python
args = {"__tablename__": "lab",
        "id": db.Column(db.Integer, primary_key=True),
        "lab_id": db.Column(db.String(255), unique=True, nullable=False),
        "lab_name": db.Column(db.String(255), unique=False, 
                                       nullable=True),
        "overview": db.Column(db.String(1000), unique=False, 
                                       nullable=True),
        "experiments": db.relationship('Experiment',
                    secondary=lab_experiments, 
                    backref='labs'),
        "institute_id": db.Column(db.Integer, db.ForeignKey('institute.id'), 
                                      unique=False, nullable=False),
        "discipline_id": db.Column(db.Integer, db.ForeignKey('discipline.id'), 
                                      unique=False, nullable=False),

        "integration_status_id": db.Column(db.Integer,
                                               db.ForeignKey\
                                               ('integration_status.id'),
                                               unique=False, nullable=False),
        "assets": db.relationship('Asset',
                    secondary=lab_assets, 
                    backref='labs'),
        "developers": db.relationship('Developer',
                    secondary=lab_developers, 
                    backref='labs'),

        "phase": db.relationship('Phase',
                    secondary=labs_phase, 
                    backref='labs'),

        "hosting_info": db.relationship('HostingInfo',
                    secondary=lab_hosting_info, 
                    backref='labs'),
        "sections": db.relationship('Section',
                    secondary=labs_sections, 
                    backref='labs')

       }

Lab = ClassPersistenceTemplate.mk_persistent(Lab, ['lab_id'],\
                                                 ,**args)

#+end_src

** Test Lab
#+NAME: class_TestLab
#+BEGIN_SRC python
class TestPersistentLab(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_create_lab(self):
        print "test_persistent_lab"


        asset_type1 = AssetType(asset_type="video")
        asset_type1.save()

        path = "vlabs.ac.in/static/images/logo.png"

        asset = Asset(path=path, asset_type=asset_type1)
        asset.save()

        institute_name = "IIT Kanpur"
        institute_id = "IITK"
        inst = Institute(institute_name=institute_name, 
                             institute_id=institute_id, assets=[asset])
        inst.save()

        discipline_name = "IIT Kanpur"
        discipline_id = "IITK"
        discipline = Discipline(discipline_name=discipline_name, discipline_id=discipline_id,
                                    assets=[asset])
        discipline.save()

        integration_level = 4
        intstatus = IntegrationStatus(integration_level=integration_level)
        intstatus.save()

        exp_name = "Number Systems"
        exp_id = "EE99777"
        overview = "This is linked list experiment"

        dev_name = Name(name="Mohit Tahiliani")
        dev_name.save()
        email_id = Email(email="mohit.tahiliani@gmail.com")
        email_id.save()
        dev = Developer(name=dev_name, email=email_id)
        dev.save()

        hosting_status = "hosted"
        hosted_url = "http://cse14-iiith.vlabs.ac.in"
        hosted_on = "cloud"
        host = HostingInfo(hosting_status=hosting_status,
                               hosted_url=hosted_url, hosted_on=hosted_on)
        host.save()

        phase1=Phase(phase_id=1)
        phase1.save()

        exp_name = "Number Systems"
        exp_id = "EE99777"
        overview = "This is linked list experiment"
        experiment = Experiment(exp_name=exp_name, exp_id=exp_id,
                                    overview=overview, sections=[],
                                    integration_status=intstatus, 
                                    hosting_info=[host], assets=[asset], 
                                    institute=inst, discipline=discipline, 
                                    developers=[dev])
        experiment.save()

        name = "Theory"
        section = Section(name=name)
        section.save()

        lab_name1="Computer Programming"
        lab_id1="CSE01"
        overview1 = "This is data structures lab which deals about array,stack"
        " and ques..etc"
        lab1 = Lab(lab_name=lab_name1, lab_id=lab_id1, overview=overview1,
                       experiments=[experiment], institute=inst,
                       integration_status=intstatus, sections=[section],
                       assets=[asset], discipline=discipline, phase=[phase1],
                       developers=[dev], hosting_info=[host])
        lab1.save()

        lab_name2="Data Structures"
        lab_id2="CSE02"
        overview2 = "This is data structures lab which deals about"
        "array,stack and ques..etc"

        lab2 = Lab(lab_name=lab_name2, lab_id=lab_id2, overview=overview2,
                       experiments=[], institute=inst, discipline=discipline, 
                       developers=[], hosting_info=[host], assets=[asset],
                       sections=[section], phase=[phase1],
                       integration_status=intstatus)
        lab2.save()

        lab1 = Lab.get_by_id(1)
        lab2 = Lab.get_by_id(2)
        lab3 = Lab.get_by_id(3)

        self.assertEqual(lab1.get("lab_name"), lab_name1)
        self.assertEqual(lab1.get("lab_id"), lab_id1)
        self.assertEqual(lab1.get("overview"), overview1)
        self.assertEqual(lab1.get("institute").get("institute_name"), 
                             inst.get("institute_name"))
        self.assertEqual(lab1.get("discipline").get("discipline_name"), 
                             discipline.get("discipline_name"))
        self.assertEqual(lab1.get("assets")[0].get("asset_type"), 
                             asset.get("asset_type"))
        self.assertEqual(lab1.get("experiments")[0].get("exp_name"), 
                             experiment.get("exp_name"))
        self.assertEqual(lab1.get("sections")[0].get("name"), 
                             section.get("name"))
        self.assertEqual(lab1.get("integration_status").\
                             get("integration_level"), 
                             intstatus.get("integration_level"))

        self.assertEqual(lab1.get("developers")[0].get("email").get("email"), 
                             email_id.get("email"))

        self.assertEqual(lab1.get("phase")[0].get("phase_id"),
                             phase1.get("phase_id"))

        self.assertEqual(lab1.get("hosting_info")[0].get("hosting_status"), 
                             host.get("hosting_status"))

        self.assertEqual(lab2.get("lab_name"), lab_name2)
        self.assertEqual(lab2.get("lab_id"), lab_id2)
        self.assertEqual(lab2.get("overview"), overview2)
        self.assertEqual(lab2.get("institute").get("institute_name"), 
                             inst.get("institute_name"))
        self.assertEqual(lab2.get("discipline").get("discipline_name"), 
                             discipline.get("discipline_name"))
        self.assertEqual(lab2.get("hosting_info")[0].get("hosting_status"), 
                             host.get("hosting_status"))
        self.assertEqual(lab2.get("experiments"), [])

        self.assertEqual(lab2.get("phase")[0].get("phase_id"),
                             phase1.get("phase_id"))

        self.assertEqual(lab2.get("assets")[0].get("asset_type"), 
                             asset.get("asset_type"))
        self.assertEqual(lab2.get("integration_status").\
                             get("integration_level"), 
                             intstatus.get("integration_level"))
        self.assertEqual(lab2.get("developers"), [])

        self.assertEqual(lab3, None)

#+END_SRC


* Experiment

  =Experiment= is a class with attributes =exp_name= and =exp_id= of type =is_email_str=.

#+NAME: class_exp_association_Table
#+BEGIN_SRC python
experiments_sections = db.Table('experiments_sections',
		      db.Column('experiment_id', db.Integer, 
                            db.ForeignKey('experiment.id')),
		      db.Column('section_id', db.Integer,
                            db.ForeignKey('section.id')))

experiments_assets = db.Table('experiments_assets',
                 db.Column('experimentid', db.Integer, 
                       db.ForeignKey('experiment.id')),
		 db.Column('assetid', db.Integer,
                       db.ForeignKey('asset.id')))

experiments_developers = db.Table('experiments_developers',
		      db.Column('experiment_id', db.Integer, 
                            db.ForeignKey('experiment.id')),
		      db.Column('developer_id', db.Integer,
                            db.ForeignKey('developer.id')))

experiments_hosting_info = db.Table('experiments_hosting_info',
                 db.Column('experimentid', db.Integer, 
                       db.ForeignKey('experiment.id')),
		 db.Column('hosting_infoid', db.Integer,
                       db.ForeignKey('hosting_info.id')))

#+END_SRC

#+NAME: class_Experiment
#+begin_src python
args = {"__tablename__": "experiment",
        "id": db.Column(db.Integer, primary_key=True),
        "exp_name": db.Column(db.String(255), unique=False, nullable=True),
        "exp_id": db.Column(db.String(255), unique=True, nullable=False),
        "overview": db.Column(db.String(1000), unique=False, nullable=True),
        "intstatus_id": db.Column(db.Integer, db.ForeignKey\
                                      ('integration_status.id'),
                                      unique=False, nullable=False),
        "assets": db.relationship('Asset',
                    secondary=experiments_assets, 
                    backref='experiments'),
#        "lb_id": db.Column(db.Integer, 
#                                db.ForeignKey('lab.id'), 
#                                unique=False),

        "sections": db.relationship('Section',
                    secondary=experiments_sections, 
                    backref='experiments'),

        "institute_id": db.Column(db.Integer, db.ForeignKey('institute.id'), 
                                      unique=False, nullable=False),
        "discipline_id": db.Column(db.Integer, db.ForeignKey('discipline.id'), 
                                      unique=False, nullable=False),

        "developers": db.relationship('Developer',
                    secondary=experiments_developers, 
                    backref='experiments'),
        "hosting_info": db.relationship('HostingInfo',
                    secondary=experiments_hosting_info, 
                    backref='experiments')
        }

Experiment = ClassPersistenceTemplate.mk_persistent(Experiment, ['exp_id'],
                                                        ,**args)

#+end_src

** Test Experiment
#+NAME: class_TestExperiment
#+BEGIN_SRC python
class TestPersistenceExperiment(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_create_experiment(self):
        print "test_persistance_experiment"

        asset_type1 = AssetType(asset_type="video")
        asset_type1.save()

        path = "vlabs.ac.in/static/images/logo.png"

        asset = Asset(path=path, asset_type=asset_type1)
        asset.save()

        institute_name = "IIT Kanpur"
        institute_id = "IITK"
        inst = Institute(institute_name=institute_name,
                             institute_id=institute_id, assets=[asset])
        inst.save()

        discipline_name = "IIT Kanpur"
        discipline_id = "IITK"
        discipline = Discipline(discipline_name=discipline_name,
                                    discipline_id=discipline_id,
                                    assets=[asset])
        discipline.save()      

        dev_name = Name(name="Mohit Tahiliani")
        dev_name.save()
        email_id = Email(email="mohit.tahiliani@gmail.com")
        email_id.save()
        dev = Developer(name=dev_name, email=email_id)
        dev.save()

        hosting_status = "hosted"
        hosted_url = "http://cse14-iiith.vlabs.ac.in"
        hosted_on = "cloud"
        host = HostingInfo(hosting_status=hosting_status,
                               hosted_url=hosted_url, hosted_on=hosted_on)
        host.save()

        exp_name = "Number Systems"
        exp_id = "EE99777"
        overview = "This is linked list experiment"

        integration_level = 4
        intstatus = IntegrationStatus(integration_level=integration_level)
        intstatus.save()

        exp = Experiment(exp_name=exp_name, exp_id=exp_id, overview=overview,
                          integration_status=intstatus, assets=[asset], 
                         sections=[], developers=[dev], hosting_info=[host],  
                         institute=inst, discipline=discipline)
        exp.save()

        experiment = Experiment.get_by_id(1)
        experiment1 = Experiment.get_by_id(2)
        self.assertEqual(experiment.get("exp_name"), exp_name)
        self.assertEqual(experiment.get("exp_id"), exp_id)
        self.assertEqual(experiment.get("overview"), overview)
        self.assertEqual(experiment.get("institute").get("institute_name"), 
                             inst.get("institute_name"))
        self.assertEqual(experiment.get("discipline").get("discipline_name"), 
                             discipline.get("discipline_name"))
        self.assertEqual(experiment.get("integration_status").\
                             get("integration_level"), 
                             intstatus.get("integration_level"))
        self.assertEqual(experiment.get("assets")[0].get("asset_type").\
                             get("asset_type"), 
                             asset.get("asset_type").get("asset_type"))
        self.assertEqual(experiment1, None)
        self.assertEqual(experiment.get("developers")[0].get("email").\
                             get("email"), email_id.get("email"))
        self.assertEqual(experiment.get("hosting_info")[0].\
                             get("hosting_status"), 
                             host.get("hosting_status"))

#+END_SRC


* Institute

  =Institute= is a class with attributes =institute_name= and =institute_id= of type =is_email_str=.

#+NAME: class_association_Table1
#+BEGIN_SRC python
institutes_labs = db.Table('institutes_labs',
		      db.Column('institute_id', db.Integer, 
                            db.ForeignKey('institute.id')),
		      db.Column('lab_id', db.Integer,
                            db.ForeignKey('lab.id')))

institutes_assets = db.Table('institutes_assets',
		      db.Column('institute_id', db.Integer, 
                            db.ForeignKey('institute.id')),
		      db.Column('assetid', db.Integer,
                            db.ForeignKey('asset.id')))

#+END_SRC
#+NAME: class_Institute
#+begin_src python
args = {"__tablename__": "institute",
        "id": db.Column(db.Integer, primary_key=True),
        "institute_name": db.Column(db.String(255), unique=False, nullable=True),
        "institute_id": db.Column(db.String(255), unique=True, nullable=False),
        "labs": db.relationship('Lab', backref=db.backref('institute')),
        "experiments": db.relationship('Experiment', backref=\
                                           db.backref('institute')),
        "assets": db.relationship('Asset', secondary=institutes_assets,
                                      backref='institutes')
       }

Institute = ClassPersistenceTemplate.mk_persistent(Institute, ['institute_id'],\
                                                       ,**args)

#+end_src

** Test Institute
#+NAME: class_TestInstitute
#+BEGIN_SRC python
class TestPersistenceInstitute(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_create_institute(self):
        print "test_persistance_institute"

        asset_type1 = AssetType(asset_type="video")
        asset_type1.save()

        path = "vlabs.ac.in/static/images/logo.png"

        asset = Asset(path=path, asset_type=asset_type1)
        asset.save()

        institute_name = "IIT Kanpur"
        institute_id = "IITK"
        inst = Institute(institute_name=institute_name,
                             institute_id=institute_id, assets=[asset])
        inst.save()
        institute = Institute.get_by_id(1)
        institute1 = Institute.get_by_id(2)
        self.assertEqual(institute.get("institute_name"), institute_name)
        self.assertEqual(institute.get("institute_id"), institute_id)   
        self.assertEqual(institute.get("assets")[0].get("asset_type").\
                             get("asset_type"), 
                             asset.get("asset_type").get("asset_type"))    
        self.assertEqual(institute1, None)

#+END_SRC


* Discipline
  =Discipline= is a class with attributes =discipline_name= and =discipline_id= of type
  =is_email_str=.

#+NAME: class_asset_association_Table
#+BEGIN_SRC python
disciplines_assets = db.Table('disciplines_assets',
		      db.Column('discipline_id', db.Integer, 
                            db.ForeignKey('discipline.id')),
		      db.Column('assetid', db.Integer,
                            db.ForeignKey('asset.id')))

#+end_src

#+NAME: class_Discipline
#+begin_src python
args = {"__tablename__": "discipline",
        "id": db.Column(db.Integer, primary_key=True),
        "discipline_name": db.Column(db.String(255), unique=False, nullable=True),
        "discipline_id": db.Column(db.String(255), unique=True, nullable=False),
        "labs": db.relationship('Lab', backref=db.backref('discipline')),
        "experiments": db.relationship('Experiment', backref=\
                                           db.backref('discipline')),
        "assets": db.relationship('Asset', secondary=disciplines_assets,
                                      backref='disciplines')
        }

Discipline = ClassPersistenceTemplate.mk_persistent(Discipline, ['discipline_id'],\
                                                        ,**args)

#+end_src

** Test Discipline
#+NAME: class_TestDiscipline
#+BEGIN_SRC python
class TestPersistenceDiscipline(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_create_discipline(self):
        print "test_persistance_discipline"

        asset_type1 = AssetType(asset_type="video")
        asset_type1.save()

        path = "vlabs.ac.in/static/images/logo.png"

        asset = Asset(path=path, asset_type=asset_type1)
        asset.save()

        discipline_name = "IIT Delhi"
        discipline_id = "ECE08"
        dis = Discipline(discipline_name=discipline_name,
                             discipline_id=discipline_id, assets=[asset])
        dis.save()

        discipline = Discipline.get_by_id(1)
        self.assertEqual(discipline.get("discipline_name"), discipline_name)
        self.assertEqual(discipline.get("discipline_id"), discipline_id)
        self.assertEqual(discipline.get("assets")[0].get("asset_type").\
                             get("asset_type"), 
                             asset.get("asset_type").get("asset_type"))

#+END_SRC


* Section

=Section= is a class with an attribute =name= of type alphabetic string 

#+NAME: class_Section
#+begin_src python
args = {"__tablename__": "section",
        "id": db.Column(db.Integer, primary_key=True),
        "name": db.Column(db.String(255), unique=True, nullable=False)
        }

Section = ClassPersistenceTemplate.mk_persistent(Section, ['name'], **args)

#+end_src

** Test Section
#+NAME: class_TestSection
#+BEGIN_SRC python

class TestPersistentSection(TestCase):

    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_create_section(self):
        print "test_persistent_section"
        name = "Theory"
        section = Section(name=name)
        section.save()
        section1 = Section.get_by_id(1)
        section2 = Section.get_by_id(2)
        self.assertEqual(section1.get("name"), name)
        self.assertEqual(section2,None)

#+END_SRC


* Name
=Name= is a class with an attribute =name= of type alphabetic string.

#+NAME: class_Name
#+begin_src python
args = {"__tablename__": "name",
        "id": db.Column(db.Integer, primary_key=True),
        "name": db.Column(db.String(255), unique=False,
                                       nullable=True),
        "developers": db.relationship('Developer', 
                                        backref=db.backref('name'))

        }

Name = ClassPersistenceTemplate.mk_persistent(Name, [], **args)
#+end_src

*** Test Name
#+NAME: class_TestName
#+BEGIN_SRC python
class TestPersistentName(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_create_persistent_name(self):
        print "test_persistent_name"

        name = "Mohit tahiliani"
        name1 = Name(name=name)
        name1.save()
        
        name1 = Name.get_by_id(1)

        self.assertEqual(name1.get("name"), name)

#+END_SRC


* Email
=Email= is a class with an attribute =email= of type alphabetic string.

#+NAME: class_Email
#+begin_src python
args = {"__tablename__": "email",
        "id": db.Column(db.Integer, primary_key=True),
        "email": db.Column(db.String(255), unique=True, nullable=False),
        "developers": db.relationship('Developer', 
                                        backref=db.backref('email'))
        }

Email = ClassPersistenceTemplate.mk_persistent(Email, ['email'], **args)
#+end_src

*** Test Email
#+NAME: class_TestEmail
#+BEGIN_SRC python
class TestPersistentEmail(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_create_email(self):
        print "test_persistent_email"

        email_id = "mohit.tahiliani@gmail.com"
        email1 = Email(email=email_id)
        email1.save()
        
        email1 = Email.get_by_id(1)

        self.assertEqual(email1.get("email"), email_id)

#+END_SRC


* Developer
=Developer= is a class with an attribute =name= of type alphabetic string and =email= of alphabetic string.

#+NAME: class_Developer
#+begin_src python
args = {"__tablename__": "developer",
        "id": db.Column(db.Integer, primary_key=True),
        "name_id": db.Column(db.Integer, db.ForeignKey('name.id'),
                                 nullable=False),
        "email_id": db.Column(db.Integer,db.ForeignKey('email.id'),
                                 unique=True, nullable=False)
        }

Developer = ClassPersistenceTemplate.mk_persistent(Developer, [], **args)
#+end_src

*** Test Developer
#+NAME: class_TestDeveloper
#+BEGIN_SRC python
class TestPersistentDeveloper(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_create_dev(self):
        print "test_persistent_dev"

        dev_name = Name(name="Mohit Tahiliani")
        dev_name.save()
        email_id = Email(email="mohit.tahiliani@gmail.com")
        email_id.save()
        dev = Developer(name=dev_name, email=email_id)
        dev.save()
        
        dev = Developer.get_by_id(1)

        self.assertEqual(dev.get("name").get("name"), dev_name.get("name"))
        self.assertEqual(dev.get("email").get("email"), email_id.get("email"))

#+END_SRC


* Phase
=Phase= is a class with an attribute =phase_id= of type integer. 

#+NAME: class_Phase
#+begin_src python
args = {"__tablename__": "phase",
        "id": db.Column(db.Integer, primary_key=True),
        "phase_id": db.Column(db.Integer, unique=True)
        }

Phase = ClassPersistenceTemplate.mk_persistent(Phase, [], **args)
#+end_src

*** Test Phase
#+NAME: class_TestPhase
#+BEGIN_SRC python
class TestPersistentPhase(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_create_phase(self):
        print "test_persistent_phase"

        phase = Phase(phase_id=1)
        phase.save()

        phase1 = Phase.get_by_id(1)

        self.assertEqual(phase1.get("phase_id"), phase.get("phase_id"))

#+END_SRC


* HostingInfo

  =HostingInfo= is a class with attributes =hosting_status= and =hosted_url=.

#+NAME: class_HostingInfo
#+begin_src python
args = {"__tablename__": "hosting_info",
        "id": db.Column(db.Integer, primary_key=True),
        "hosting_status": db.Column(db.String(255), unique=False,\
                                        nullable=True),
        "hosted_url": db.Column(db.String(255), unique=True, nullable=False),
        "hosted_on": db.Column(db.String(255), unique=False, nullable=True),
       }

HostingInfo = ClassPersistenceTemplate.mk_persistent(HostingInfo,\
                                                         ['hosted_url'],\
                                                         ,**args)

#+end_src

** Test HostingInfo
#+NAME: class_TestHostingInfo
#+BEGIN_SRC python
class TestPersistenceHostingInfo(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_create_hosting_info(self):
        print "test_persistent_hosting_info"
        hosting_status = "hosted"
        hosted_url = "http://cse14-iiith.vlabs.ac.in"
        hosted_on = "cloud"
        host = HostingInfo(hosting_status=hosting_status, hosted_url=hosted_url, hosted_on=hosted_on)
        host.save()
        hosting_info = HostingInfo.get_by_id(1)
        hosting_info1 = HostingInfo.get_by_id(2)
        self.assertEqual(hosting_info.get("hosting_status"), hosting_status)
        self.assertEqual(hosting_info.get("hosted_url"), hosted_url)
        self.assertEqual(hosting_info.get("hosted_on"), hosted_on)
        self.assertEqual(hosting_info1,None)

#+END_SRC


* AssetType
  =AssetType= is a class with an attribute =asset_type= of type string.

#+NAME: class_AssetType
#+begin_src python
args = {"__tablename__": "asset_type",
        "id": db.Column(db.Integer, primary_key=True),
        "asset_type": db.Column(db.String(255), unique=True, nullable=False),
        "assets": db.relationship('Asset', backref=db.backref('asset_type'))
        }

AssetType = ClassPersistenceTemplate.mk_persistent(AssetType, ['asset_type'],
                                                       ,**args)
#+end_src

*** Test AssetType 
#+NAME: class_TestAssetType
#+BEGIN_SRC python
class TestPersistentAssetType(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_create_asset_type(self):
        print "test_persistent_asset_type"

        asset_type1 = AssetType(asset_type="video")
        asset_type1.save()
        
        asset_type1 = AssetType.get_by_id(1)

        self.assertEqual(asset_type1.get("asset_type"),
                             asset_type1.get("asset_type"))

#+END_SRC


* Asset

  =Asset= is a class with attributes =path= and =asset_type= of type =is_str=.
#+NAME: class_Asset
#+begin_src python
args = {"__tablename__": "asset",
        "id": db.Column(db.Integer, primary_key=True),
        "asset_type_id": db.Column(db.Integer,db.ForeignKey('asset_type.id'),
                                  nullable=False),
        "path": db.Column(db.String(255), unique=True, nullable=False)
       }

Asset = ClassPersistenceTemplate.mk_persistent(Asset, ['path'], **args)

#+end_src

** Test Asset
#+NAME: class_TestAsset
#+BEGIN_SRC python
class TestPersistenceAsset(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_create_asset(self):
        print "test_persistance_asset"

        path = "vlabs.ac.in/static/images/logo.png"

        asset_type1 = AssetType(asset_type="video")
        asset_type1.save()

        asset = Asset(path=path, asset_type=asset_type1)
        asset.save()

        asset = asset.get_by_id(1)
        asset1 = asset.get_by_id(2)
        self.assertEqual(asset.get("path"), path)
        self.assertEqual(asset.get("asset_type").get("asset_type"),
                             asset_type1.get("asset_type"))       
        self.assertEqual(asset1,None)

#+END_SRC


* IntegrationStatus

  =IntegrationStatus= is a class with attributes =integration_level= of type =is_int=.

#+NAME: class_IntegrationStatus
#+begin_src python
args = {"__tablename__": "integration_status",
        "id": db.Column(db.Integer, primary_key=True),
        "integration_level": db.Column(db.Integer, unique=True,\
                                           nullable=False),
        "labs": db.relationship('Lab', backref=\
                                    db.backref('integration_status')), 
        "experiments": db.relationship('Experiment', backref=\
                                           db.backref('integration_status')), 
        "integration_level": db.Column(db.Integer, unique=True,
                                           nullable=False),
        "labs": db.relationship('Lab', backref=\
                                    db.backref('integration_status'))
       }

IntegrationStatus = ClassPersistenceTemplate.mk_persistent(IntegrationStatus,
                                                ['integration_level'], **args)

#+end_src

** Test IntegrationStatus
#+NAME: class_TestIntegrationStatus
#+BEGIN_SRC python
class TestPersistenceIntegrationStatus(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_create_integration_status(self):
        print "test_persistance_integration_status"
        integration_level = 4
        intstatus = IntegrationStatus(integration_level=integration_level)
        intstatus.save()
        integration_status = IntegrationStatus.get_by_id(1)
        integration_status1 = IntegrationStatus.get_by_id(2)
        self.assertEqual(integration_status.get("integration_level"),\
                             integration_level)
        self.assertEqual(integration_status1,None)

#+END_SRC


* Infra                                                         :boilerplate:
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.objects.entities import *
from runtime.utils.class_persistence_template import *
import datetime

#+end_src


** Tests
*** Imports for tests 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from sqlalchemy.exc import IntegrityError
from runtime.persistence.entities import *
#from flask <
#import create_app
from runtime.rest.app import create_app

config = {
    'SQLALCHEMY_DATABASE_URI': ''
}

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()
#+END_SRC


* Tangling                                                      :boilerplate:
** sources
#+BEGIN_SRC python :tangle entities.py :eval no :noweb yes
<<imports_for_sources>>
<<class_lab_association_Table>>
<<class_Lab>>
<<class_exp_association_Table>>
<<class_association_Table>>
<<class_asset_association_Table>>
<<class_association_Table1>>
<<class_Experiment>>
<<class_Institute>>
<<class_Discipline>>
<<class_Section>>
<<class_Name>>
<<class_Email>>
<<class_Developer>>
<<class_HostingInfo>>
<<class_AssetType>>
<<class_Asset>>
<<class_Phase>>
<<class_IntegrationStatus>>
#+end_src


** tests
#+BEGIN_SRC python :tangle test_entities.py :eval no :noweb yes
<<imports_for_tests>>
<<class_TestExperiment>>
<<class_TestDiscipline>>
<<class_TestLab>>
<<class_TestSection>>
<<class_TestName>>
<<class_TestEmail>>
<<class_TestDeveloper>>
<<class_TestInstitute>>
<<class_TestHostingInfo>>
<<class_TestAssetType>>
<<class_TestAsset>>
<<class_TestAssets>>
<<class_TestPhase>>
<<class_TestIntegrationStatus>>
<<run_test_cases>>
#+end_src
