#+TITLE: Persistence Delegate for the System
#+AUTHOR: VLEAD
#+DATE: [2016-07-07 Thu]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Persistence Delegate
  Persistence Delegate encapsulates a set of functions where each function performs a
  specific task.  With the use of these delegates, the core implementation of
  the =system= will not alter but by plugging delegates that are specific to
  each environment, for example, be it either objects or persistence, the
  =system= for that particular environment is derived while not modifying the
  =system= class.
  
** Initialize Persistence Delegate
   Provides all the delegates that operate on objects.

*** class_persistence_delegate 
#+NAME: class_persistence_delegate
#+BEGIN_SRC python
class PersistenceDelegate():
   
    def __init__(self):
        self.entities = {'session': Session,
                         'lab': Lab,
                         'experiment' : Experiment,
                         'section' : Section,
                         'institute' : Institute,
                         'discipline' : Discipline,
                         'hosting_info': HostingInfo,
                         'asset' : Asset,
                         'asset_type': AssetType,
                         'integration_status': IntegrationStatus,
                         'name' : Name,
                         'email' : Email,
                         'developer' : Developer,
                         'phase': Phase
                        }

#+END_SRC


    
*** Tests
#+NAME: test_class_persistence_delegate
#+BEGIN_SRC python
class TestPersistenceDelegate(TestCase):
    TESTING = True

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()
        self.persistence_delegate = PersistenceDelegate()
        
    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()
        self.persistence_delegate = None

#+END_SRC


** Other functions

   Other functions that help =System= perform the operations. 
  
*** Check if =lab= already exists
    This function checks if a lab is already in the lab-set of the =System=.
#+NAME: persistence_lab_exists
#+BEGIN_SRC python
    def lab_exists(self, lab):
        current_app.logger.debug("running check on the existence of"
                                 " lab = %s" % lab)
        lab_id = lab.get("lab_id")
        current_app.logger.debug("completed check on the existence of"
                                 " lab with lab_id = %s" % lab_id)
        return lab == self.get_lab(lab_id=lab_id)
        
#+END_SRC

**** Tests
#+NAME: test_persistence_lab_exists
#+BEGIN_SRC python
    def test_lab_exists(self):
        print "test_lab_exists"
        lab_name1="Computer Programming"
        lab_id1="CSE01"
        overview1 = "overview"

        asset_type = AssetType(asset_type="Image")
        asset_type.save()
        path = "vlabs.ac.in/images/static/logo.png"
        asset = Asset(asset_type=asset_type, path=path)
        asset.save()

        institute_name = "IIT Kanpur"
        institute_id = "IITK"
        inst = Institute(institute_name=institute_name,
                             institute_id=institute_id, assets=[asset])
        inst.save()

        discipline_name = "IIT Kanpur"
        discipline_id = "IITK"
        discipline = Discipline(discipline_name=discipline_name,
                                    discipline_id=discipline_id,\
                                    assets=[asset])
        discipline.save()
        
        integration_level = 4
        integration_status = IntegrationStatus(integration_level=\
                                                   integration_level)
        integration_status.save()
         
        dev_name = Name(name="Mohit Tahiliani")
        dev_name.save()
        email_id = Email(email="mohit.tahiliani@gmail.com")
        email_id.save()
        dev = Developer(name=dev_name, email=email_id)
        dev.save()

        hosting_status = "hosted"
        hosted_url = "http://cse14-iiith.vlabs.ac.in"
        hosted_on = "cloud"
        host = HostingInfo(hosting_status=hosting_status,
                               hosted_url=hosted_url, 
                               hosted_on=hosted_on)
        host.save()

        name = "Theory"
        section = Section(name=name)
        section.save()

        phase1=Phase(phase_id=1)
        phase1.save()

        lab = Lab(lab_name=lab_name1, lab_id=lab_id1,
                      overview=overview1, institute=inst,
                      discipline=discipline, assets=[asset],
                      experiments=[], phase=[phase1],
                      integration_status=integration_status,
                      developers=[dev], sections=[section],
                      hosting_info=[host])

        lab1 = self.persistence_delegate.add_lab(lab)

        lab_name2="Data Structures"
        lab_id2="CSE02"
        overview2 = "overview"

        lab2 = Lab(lab_name=lab_name2, lab_id=lab_id2,
                       overview=overview2,
                       integration_status=integration_status,
                       sections=[section], phase=[phase1],               
                       institute=inst,
                       discipline=discipline,
                       assets=[asset],
                       experiments=[], developers=[dev],
                       hosting_info=[host])

        self.assertEqual(self.persistence_delegate.lab_exists(lab1),
                            True)
        self.assertEqual(self.persistence_delegate.lab_exists(lab2),
                            False)

#+END_SRC


*** Check if =asset_type= already exists
    This function checks if a asset_type is already in the asset-type-set of the =System=.
#+NAME: persistence_asset_type_exists
#+BEGIN_SRC python
    def asset_type_exists(self, asset_type):
        ret_val = False
        try:
            current_app.logger.debug("running check on the existence of"
                                 " asset_type = %s" % asset_type.to_client())

            if self.get_asset_type(asset_type=asset_type.get("asset_type")) is not None:
                ret_val = True
            current_app.logger.debug("completed check on the existence of"
                                 " asset_type with type as = %s" % asset_type)

        except Exception as e:
            current_app.logger.error("Error in returning the email")
            pass

        return ret_val
       
#+END_SRC

**** Tests
#+NAME: test_persistence_asset_type_exists
#+BEGIN_SRC python
    def test_lab_exists(self):
        print "test_lab_exists"
        lab_name1="Computer Programming"
        lab_id1="CSE01"
        overview1 = "overview"

        asset_type = AssetType(asset_type="Image")
        asset_type.save()
        path = "vlabs.ac.in/images/static/logo.png"
        asset = Asset(asset_type=asset_type, path=path)
        asset.save()

        institute_name = "IIT Kanpur"
        institute_id = "IITK"
        inst = Institute(institute_name=institute_name,
                             institute_id=institute_id, assets=[asset])
        inst.save()

        discipline_name = "IIT Kanpur"
        discipline_id = "IITK"
        discipline = Discipline(discipline_name=discipline_name,
                                    discipline_id=discipline_id,\
                                    assets=[asset])
        discipline.save()
        
        integration_level = 4
        integration_status = IntegrationStatus(integration_level=\
                                                   integration_level)
        integration_status.save()
         
        dev_name = Name(name="Mohit Tahiliani")
        dev_name.save()
        email_id = Email(email="mohit.tahiliani@gmail.com")
        email_id.save()
        dev = Developer(name=dev_name, email=email_id)
        dev.save()

        hosting_status = "hosted"
        hosted_url = "http://cse14-iiith.vlabs.ac.in"
        hosted_on = "cloud"
        host = HostingInfo(hosting_status=hosting_status,
                               hosted_url=hosted_url, 
                               hosted_on=hosted_on)
        host.save()

        name = "Theory"
        section = Section(name=name)
        section.save()


        lab = Lab(lab_name=lab_name1, lab_id=lab_id1, overview=overview1,
                      institute=inst, discipline=discipline, assets=[asset],
                      experiments=[], integration_status=integration_status,
                      developers=[dev], sections=[section],hosting_info=[host])

        lab1 = self.persistence_delegate.add_lab(lab)

        lab_name2="Data Structures"
        lab_id2="CSE02"
        overview2 = "overview"

        lab2 = Lab(lab_name=lab_name2, lab_id=lab_id2, overview=overview2,
                       integration_status=integration_status, sections=[section],               
                       institute=inst, discipline=discipline, assets=[asset],
                       experiments=[], developers=[dev], hosting_info=[host])

        self.assertEqual(self.persistence_delegate.lab_exists(lab1),
                            True)
        self.assertEqual(self.persistence_delegate.lab_exists(lab2),
                            False)

#+END_SRC


*** Check if =experiment= already exists


    This function checks if a user is already in the user-set of the =System=.
#+NAME: persistence_experiment_exists
#+BEGIN_SRC python
    def experiment_exists(self, experiment):
        current_app.logger.debug("running check on the existence of"
                                 " experiment = %s" % experiment)
        exp_id = experiment.get("exp_id")
        current_app.logger.debug("completed check on the existence of"
                                 " experiment with exp_id = %s" % exp_id)
        return experiment == self.get_experiment(exp_id=exp_id)
        
#+END_SRC

**** Tests
#+NAME: test_persistence_experiment_exists
#+BEGIN_SRC python
    def test_experiment_exists(self):
        print "test_experiment_exists"

        asset_type = AssetType(asset_type="Image")
        asset_type.save()

        path = "vlabs.ac.in/images/static/logo.png"
        asset = Asset(asset_type=asset_type, path=path)
        asset.save()

        institute_name = "IIT Kanpur"
        institute_id = "IITK"
        inst = Institute(institute_name=institute_name,
                             institute_id=institute_id, assets=[asset])
        inst.save()

        discipline_name = "IIT Kanpur"
        discipline_id = "IITK"
        discipline = Discipline(discipline_name=discipline_name,
                                    discipline_id=discipline_id,\
                                    assets=[asset])
        discipline.save()
 
        dev_name = Name(name="Mohit Tahiliani")
        dev_name.save()
        email_id = Email(email="mohit.tahiliani@gmail.com")
        email_id.save()
        dev = Developer(name=dev_name, email=email_id)
        dev.save()

        hosting_status = "hosted"
        hosted_url = "http://cse14-iiith.vlabs.ac.in"
        hosted_on = "cloud"
        host = HostingInfo(hosting_status=hosting_status,
                               hosted_url=hosted_url, hosted_on=hosted_on)
        host.save()

        exp_name1 = "Number Systems"
        exp_id1 = "EE99777"
        overview1 = "overview"

        integration_level = 4
        integration_status = IntegrationStatus(integration_level=\
                                                   integration_level)
        integration_status.save()

        experiment1 = Experiment(exp_name=exp_name1, exp_id=exp_id1,
                                 overview=overview1, sections=[],
                                 institute=inst, discipline=discipline, 
                                 integration_status=integration_status,
                                 assets=[asset], developers=[dev],
                                 hosting_info=[host])

        exp1 = self.persistence_delegate.add_experiment(experiment1)

        exp_name2 = "Transformations"
        exp_id2 = "EE98747"
        overview2 = "overview"
        experiment2 = Experiment(exp_name=exp_name2, exp_id=exp_id2, \
                                overview=overview2, sections=[],
                                institute=inst, discipline=discipline, 
                                integration_status=integration_status,
                                assets=[asset], developers=[dev],
                                hosting_info=[host])
        self.assertEqual(self.persistence_delegate.experiment_exists\
                             (experiment1), True)
        self.assertEqual(self.persistence_delegate.experiment_exists\
                             (experiment2), False)

#+END_SRC


*** Check if =section= already exists

    This function checks if a section name is already in the section-set of the =System=.
#+NAME: persistence_section_exists
#+BEGIN_SRC python
    def section_exists(self, section):
        current_app.logger.debug("running check on the existence of"
                                 " section = %s" % section) 
        name = section.get("name")
        current_app.logger.debug("completed check on the existence of"
                                 " section with name = %s" % name)
        return section == self.get_section(name=name)
        
#+END_SRC

**** Tests
#+NAME: test_persistence_section_exists
#+BEGIN_SRC python
    def test_section_exists(self):
        print "test_section_exists"
        name1 = "Theory"
        section1 = Section(name=name1)
        self.persistence_delegate.add_section(section1)
        name2 = "Assessment"
        section2 = Section(name=name2)
        self.assertEqual(self.persistence_delegate.section_exists(section1),
                            True)
        self.assertEqual(self.persistence_delegate.section_exists(section2),
                            False)

#+END_SRC


*** Check if =institute= already exists
    This function checks if an institute is already in the institute-set of the =System=.
#+NAME: persistence_institute_exists
#+BEGIN_SRC python
    def institute_exists(self, institute):
        current_app.logger.debug("running check on the existence of"
                                 " institute = %s" % institute)
        institute_id = institute.get("institute_id")
        current_app.logger.debug("completed check on the existence of"
                                 " institute with institute_id = %s" % institute_id)
        return institute == self.get_institute(institute_id=institute_id)
        
#+END_SRC

**** Tests
#+NAME: test_persistence_institute_exists
#+BEGIN_SRC python
    def test_institute_exists(self):
        print "test_institute_exists"

        asset_type = AssetType(asset_type="Image")
        asset_type.save()

        path = "vlabs.ac.in/images/static/logo.png"
        asset = Asset(asset_type=asset_type, path=path)
        asset.save()

        institute_name1 = "IIT Kanpur"
        institute_id1 = "IITK"
        institute1 = Institute(institute_name=institute_name1,
                                   institute_id=institute_id1,
                                   assets=[asset]) 
        inst1 = self.persistence_delegate.add_institute(institute1)

        institute_name2 = "IIT Kharagpur"
        institute_id2 = "IITKgp"
        institute2 = Institute(institute_name=institute_name2,
                                   institute_id=institute_id2,
                                   assets=[asset]) 
        
        self.assertEqual(self.persistence_delegate.institute_exists\
                             (institute1), True)
        self.assertEqual(self.persistence_delegate.institute_exists\
                             (institute2), False)

#+END_SRC


*** Check if =name= already exists

    This function checks if a name is already in the name-set of the =System=.
#+NAME: persistence_name_exists
#+BEGIN_SRC python
    def name_exists(self, name):
        ret_val = False
        try:
            current_app.logger.debug("running check on the existence of name")
            if self.get_name(name=name.get("name")) is not None:
                ret_val = True
            current_app.logger.debug("completed check on the existence of name")
        except Exception as e:
            current_app.logger.error("Error in returning the name")
            pass
        return ret_val
        
#+END_SRC

**** Tests
#+NAME: test_persistence_name_exists
#+BEGIN_SRC python
    def test_name_exists(self):
        print "test_name_exists"
        name1 = "Prof. Dharmaraj"
        name2 = Name(name=name1)
        self.persistence_delegate.add_name(name2)
        name3 = "Prof. Raja"
        name4 = Name(name=name3)
        self.assertEqual(self.persistence_delegate.name_exists(name2),
                            True)
        self.assertEqual(self.persistence_delegate.name_exists(name4),
                            False)

#+END_SRC


*** Check if =email= already exists
    This function checks if an email is already in the email-set of the =System=.
#+NAME: persistence_email_exists
#+BEGIN_SRC python
    def email_exists(self, email):
        ret_val = False
        try:
            current_app.logger.debug("running check on the existence of email")
            if self.get_email(email=email.get("email")) is not None:
                ret_val = True
            current_app.logger.debug("completed check on the existence of email")
        except Exception as e:
            current_app.logger.error("Error in returning the email")
            pass

        return ret_val
        
#+END_SRC

**** Tests
#+NAME: test_persistence_email_exists
#+BEGIN_SRC python
    def test_email_exists(self):
        print "test_email_exists"
        email1 = "abc@gmail.com"
        email2 = Email(email=email1)
        self.persistence_delegate.add_email(email2)
        email3 = "xyz@gmail.com"
        email4 = Email(email=email3)
        self.assertEqual(self.persistence_delegate.email_exists(email2), True)
        self.assertEqual(self.persistence_delegate.email_exists(email4), False)

#+END_SRC


*** Check if =developer= already exists
    This function checks if an developer is already in the developer-set of the =System=.
#+NAME: persistence_developer_exists
#+BEGIN_SRC python
    def developer_exists(self, developer):
        ret_val = False
        try:
            current_app.logger.debug("running check on the existence of"
                                     " developer")
            if self.get_developer(email=developer.get("email")) is not None:
                ret_val = True
            current_app.logger.debug("completed check on the existence of"
                                     " developer")
        except Exception as e:
            current_app.logger.error("Error in returning the developer")
            pass

        return ret_val
        
#+END_SRC

**** Tests
#+NAME: test_persistence_developer_exists
#+BEGIN_SRC python
    def test_developer_exists(self):
        print "test_developer_exists"

        dev_name1 = Name(name="Prof. Dharmaraj")
        dev_name1.save()
        email_id1 = Email(email="abc@gmail.com")
        email_id1.save()
        developer1 = Developer(name=dev_name1, email=email_id1)
        developer1.save()

        dev_name2 = Name(name="Prof. Raja")
        dev_name2.save()
        email_id2 = Email(email="xyz@gmail.com")
        email_id2.save()
        developer2 = Developer(name=dev_name2, email=email_id2)

        self.assertEqual(self.persistence_delegate.\
                             developer_exists(developer1), True)
        self.assertEqual(self.persistence_delegate.developer_exists\
                             (developer2), False)
#+END_SRC


*** Check if =Discipline= already exists
    This function checks if a discipline is already in the discipline-set of the =System=.
#+NAME: persistence_discipline_exists
#+BEGIN_SRC python
    def discipline_exists(self, discipline):
        current_app.logger.debug("running check on the existence of"
                                 " discipline = %s" % 
                                 discipline.to_client())
        discipline_id = discipline.get("discipline_id")
        current_app.logger.debug("completed check on the existence of"
                                 " discipline with discipline_id = %s"
                                 % discipline_id)
        return discipline == self.get_discipline(discipline_id=discipline_id)

#+END_SRC

**** Tests
#+NAME: test_persistence_discipline_exists
#+BEGIN_SRC python
  
    def test_discipline_exists(self):
        print "test_discipline_exists"

        asset_type = AssetType(asset_type="Image")
        asset_type.save()

        path = "vlabs.ac.in/images/static/logo.png"
        asset = Asset(asset_type=asset_type, path=path)
        asset.save()

        discipline_name1="IIT Delhi"
        discipline_id1="EEE08"
        dis = Discipline(discipline_name=discipline_name1,
                             discipline_id=discipline_id1,
                             assets=[asset])

        dis1 = self.persistence_delegate.add_discipline(dis)

        discipline_name2="IIT Delhi"
        discipline_id2="EEE09"
        dis2 = Discipline(discipline_name=discipline_name2,
                              discipline_id=discipline_id2,
                              assets=[asset])

        self.assertEqual(self.persistence_delegate.discipline_exists(dis1),
                            True)
        self.assertEqual(self.persistence_delegate.discipline_exists(dis2),
                            False)
     


#+END_SRC
   

*** Check if =hosting_info= already exists
    This function checks if an hosting_info is already in the hosting_info-set of the =System=.
#+NAME: persistence_hosting_info_exists
#+BEGIN_SRC python
    def hosting_info_exists(self, hosting_info):
        current_app.logger.debug("running check on the existence of"
                                 " hosting_info = %s" % 
                                 hosting_info.to_client())
        hosted_url = hosting_info.get("hosted_url")
        current_app.logger.debug("completed check on the existence of" 
                                 " hosting_info with hosted_url = %s"
                                 % hosted_url)
        return hosting_info == self.get_hosting_info(hosted_url=hosted_url)
   
#+END_SRC

**** Tests
#+NAME: test_persistence_hosting_info_exists
#+BEGIN_SRC python
    def test_hosting_info_exists(self):
        print "test_hosting_info_exists"
        hosting_status1 = "hosted"
        hosted_url1 = "http://cse14-iiith.vlabs.ac.in"
        hosted_on1 = "cloud"
        hosting_info1 = HostingInfo(hosting_status=hosting_status1,\
                                        hosted_url=hosted_url1,\
                                        hosted_on=hosted_on1)
        host1 = self.persistence_delegate.add_hosting_info(hosting_info1)

        hosting_status2 = "not hosted"
        hosted_url2 = "http://iitkgp.vlab.co.in/"
        hosted_on2 = "server"
        hosting_info2 = HostingInfo(hosting_status=hosting_status2,\
                                        hosted_url=hosted_url2,\
                                        hosted_on=hosted_on2)
        
        self.assertEqual(self.persistence_delegate.hosting_info_exists\
                             (hosting_info1), True)
        self.assertEqual(self.persistence_delegate.hosting_info_exists\
                             (hosting_info2), False)

#+END_SRC


*** Check if =asset= already exists

    This function checks if a user is already in the user-set of the =System=.
#+NAME: persistence_asset_exists
#+BEGIN_SRC python
    def asset_exists(self, asset):
        current_app.logger.debug("running check on the existence of"
                                 " asset = %s" % asset.to_client())
        path = asset.get("path")
        current_app.logger.debug("completed check on the existence of"
                                 " asset with path = %s" % path)
        return asset == self.get_asset(path=path)
  
#+END_SRC

**** Tests
#+NAME: test_persistence_asset_exists
#+BEGIN_SRC python
    def test_asset_exists(self):
        print "test_asset_exists"       

        asset_type1 = AssetType(asset_type="Image")
        asset_type1.save()

        path1 = "vlabs.ac.in/static/images/logo.png"
        asset1 = Asset(asset_type=asset_type1, path=path1)
        asst1 = self.persistence_delegate.add_asset(asset1)

        asset_type2 = AssetType(asset_type="Icon")
        asset_type2.save()

        path2 = "vlabs.ac.in/static/images/icon.png"
        asset2 = Asset(asset_type=asset_type2, path=path2)

        self.assertEqual(self.persistence_delegate.asset_exists\
                             (asst1), True)
        self.assertEqual(self.persistence_delegate.asset_exists\
                             (asset2), False)
#+END_SRC


*** Check if =integration_status= already exists
    This function checks if an integration_status is already in the integration_status-set of the =System=.
#+NAME: persistence_integration_status_exists
#+BEGIN_SRC python
    def integration_status_exists(self, integration_status):
        current_app.logger.debug("running check on the existence of"
                                     " integration_status = %s"
                                    % integration_status.to_client())
        integration_level = integration_status.get("integration_level")

        current_app.logger.debug("completed check on the existence of"
                                 " integration_status"
                                 " with integration_level = %s" % 
                                 integration_level)
        return integration_status == self.get_integration_status(
                                     integration_level=integration_level)
        
#+END_SRC

**** Tests
#+NAME: test_persistence_integration_status_exists
#+BEGIN_SRC python
    def test_integration_status_exists(self):
        print "test_integration_status_exists"
        integration_level1 = 4
        integration_status1 = IntegrationStatus(integration_level=\
                                                    integration_level1)
        intstatus1 = self.persistence_delegate.add_integration_status\
        (integration_status1)

        integration_level2 = 2
        integration_status2 = IntegrationStatus(integration_level=\
                                                    integration_level2)
        
        self.assertEqual(self.persistence_delegate.integration_status_exists\
                             (integration_status1), True)
        self.assertEqual(self.persistence_delegate.integration_status_exists\
                             (integration_status2), False)

#+END_SRC


*** Check if =phase= already exists

    This function checks if a =phase= is already in the phase-set of the =System=.
#+NAME: persistence_phase_exists
#+BEGIN_SRC python
    def phase_exists(self, phase):
        ret_val = False
        try:
            current_app.logger.debug("running check on the"
                                    " existence of phase")
            if self.get_phase(phase_id=phase.get\
                                  ("phase_id")) is not None:
                ret_val = True
            current_app.logger.debug("completed check on"
                                         " the existence of"
                                         " phase")
        except Exception as e:
            current_app.logger.error("Error in returning"
                                         " the phase %s"
                                         %str(e))
            
        return ret_val
        
#+END_SRC

**** Tests
#+NAME: test_persistence_phase_exists
#+BEGIN_SRC python
    def test_phase_exists(self):
        print "test_phase_exists"

        phase1 = Phase(phase_id=1)
        phase1.save()

        phase2 = Phase(phase_id=2)

        self.assertEqual(self.persistence_delegate.\
                             phase_exists(phase1), True)
        self.assertEqual(self.persistence_delegate.\
                             phase_exists(phase2), False)

#+END_SRC


*** Add lab to the system
    This function adds lab to the system.
#+NAME: persistence_add_lab
#+BEGIN_SRC python
    def add_lab(self, lab):
        current_app.logger.debug("running add lab to system operation"
                                 " lab = %s" % lab.to_client())
        lab.save()
        current_app.logger.debug("completed add lab to system operation"
                                 " lab = %s" % lab.to_client())
        return lab

#+END_SRC

**** Tests
#+NAME: test_persistence_add_lab
#+BEGIN_SRC python
    def test_add_lab(self):
         print "test_add_lab"

         integration_level = 4
         integration_status = IntegrationStatus(integration_level=\
                                                    integration_level)
         integration_status.save()

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         phase1=Phase(phase_id=1)
         phase1.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name,
                              institute_id=institute_id,\
                              assets=[asset])
         inst.save()

         discipline_name = "IIT Kanpur"
         discipline_id = "IITK"
         discipline = Discipline(discipline_name=discipline_name,
                                     discipline_id=discipline_id,\
                                     assets=[asset])
         discipline.save()

         dev_name = Name(name="Mohit Tahiliani")
         dev_name.save()
         email_id = Email(email="mohit.tahiliani@gmail.com")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev.save()

         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         host = HostingInfo(hosting_status=hosting_status,\
                                hosted_url=hosted_url, hosted_on=hosted_on)
         host.save()

         exp_name = "Number Systems"
         exp_id = "EE99777"
         overview = "exp"
         experiment = Experiment(exp_name=exp_name, exp_id=exp_id, \
                                  overview=overview, institute=inst, 
                                  discipline=discipline,
                                  integration_status=integration_status, 
                                  sections=[], assets=[asset],
                                  developers=[dev], hosting_info=[host])
         experiment.save()

         lab_name1="Computer Programming"
         lab_id1="CSE01"
         overview="lab"

         name = "Theory"
         section = Section(name=name)
         section.save()

         lab1 = Lab(lab_name=lab_name1, lab_id=lab_id1, 
                        institute=inst,
                        discipline=discipline,
                        assets=[asset], overview=overview,
                        experiments=[experiment],
                        sections=[section], phase=[phase1],
                        integration_status=integration_status,
                        developers=[dev],
                        hosting_info=[host])

         lab1 = self.persistence_delegate.add_lab(lab1)
        
         lab_name2="Data Structures"
         lab_id2="CSE02"
         overview="lab overview"

         lab2 = Lab(lab_name=lab_name2, lab_id=lab_id2,
                        overview=overview, assets=[asset],
                        institute=inst, experiments=[],
                        discipline=discipline, 
                        integration_status=integration_status,
                        developers=[dev], phase=[phase1],
                        sections=[section],
                        hosting_info=[host])

         self.assertEqual(self.persistence_delegate.\
                              lab_exists(lab1), True)
         self.assertEqual(self.persistence_delegate.\
                              lab_exists(lab2), False)

#+END_SRC


*** Add experiment to the system

    This function adds experiment to the system.
#+NAME: persistence_add_experiment
#+BEGIN_SRC python
    def add_experiment(self, experiment):
        current_app.logger.debug("running add experiment to system operation"
                                 " experiment = %s" % experiment.to_client())
        experiment.save()
        current_app.logger.debug("completed add experiment to system operation"
                                 " experiment = %s" % experiment.to_client())
        return experiment

#+END_SRC

**** Tests
#+NAME: test_persistence_add_experiment
#+BEGIN_SRC python
    def test_add_experiment(self):
         print "test_add_experiment"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name,
                              institute_id=institute_id, assets=[asset])
         inst.save()

         discipline_name = "IIT Kanpur"
         discipline_id = "IITK"
         discipline = Discipline(discipline_name=discipline_name,
                                     discipline_id=discipline_id,
                                     assets=[asset])
         discipline.save()

         dev_name = Name(name="Mohit Tahiliani")
         dev_name.save()
         email_id = Email(email="mohit.tahiliani@gmail.com")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev.save()

         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         host = HostingInfo(hosting_status=hosting_status,
                                hosted_url=hosted_url,
                                hosted_on=hosted_on)
         host.save()
         
         integration_level = 4
         integration_status = IntegrationStatus(integration_level=
                                                    integration_level)
         integration_status.save()
         
         exp_name1 = "Number Systems"
         exp_id1 = "EE99777"
         overview1 = "overview"
         experiment1 = Experiment(exp_name=exp_name1, exp_id=exp_id1, 
                                      overview=overview1, institute=inst, 
                                      discipline=discipline, 
                                      integration_status=integration_status, 
                                      sections=[], assets=[asset],
                                      developers=[dev], hosting_info=[host])
         experiment1 = self.persistence_delegate.add_experiment(experiment1)
         experiment1.save()
         
         exp_name2="Transformations"
         exp_id2="EE98747"
         overview2="overview"
         experiment2 = Experiment(exp_name=exp_name2, exp_id=exp_id2,
                                      overview=overview2, sections=[],
                                      institute=inst, discipline=discipline, 
                                      integration_status=integration_status,
                                      assets=[asset], developers=[dev], 
                                      hosting_info=[host])    
         experiment = Experiment.get_by_id(1)

         self.assertEqual(self.persistence_delegate.
                              experiment_exists(experiment1),
                          True)
         self.assertEqual(self.persistence_delegate.
                              experiment_exists(experiment2),
                          False)
        
#+END_SRC


*** Add discipline to the system
    This function adds discipline to the system.
#+NAME: persistence_add_discipline
#+BEGIN_SRC python
    def add_discipline(self, discipline):
        current_app.logger.debug("running add discipline to system operation"
                                 " discipline = %s" % discipline.to_client())
        discipline.save()
        current_app.logger.debug("completed add discipline to system operation"
                                 " discipline = %s" % discipline.to_client())
        return discipline

#+END_SRC

**** Tests
#+NAME: test_persistence_add_discipline
#+BEGIN_SRC python
    def test_add_discipline(self):
         print "test_add_discipline"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         discipline_name = "IIT Delhi"
         discipline_id = "EEE08"
         discipline = Discipline(discipline_name=discipline_name,
                                     discipline_id=discipline_id,
                                     assets=[asset])
         discipline = self.persistence_delegate.add_discipline(discipline)

         discipline = discipline.get_by_id(1)

         self.assertEqual(discipline.get("discipline_name"), discipline_name)
         self.assertEqual(discipline.get("discipline_id"), discipline_id)

#+END_SRC



*** Add section to the system
    This function adds section to the system.
#+NAME: persistence_add_section
#+BEGIN_SRC python
    def add_section(self, section):
        current_app.logger.debug("running add section to system operation"
                                 " section = %s" % section.to_client())
        section.save()
        current_app.logger.debug("completed add section to system operation"
                                 " section = %s" % section.to_client())
        return section

#+END_SRC


**** Tests
#+NAME: test_persistence_add_section
#+BEGIN_SRC python
    def test_add_section(self):
         print "test_add_section"
         name = "Theory"
         section = Section(name=name)
         section = self.persistence_delegate.add_section(section)
         section = section.get_by_id(1)
         self.assertEqual(section.get("name"), name)

#+END_SRC


*** Add name to the system
    This function adds name to the system.
#+NAME: persistence_add_name
#+BEGIN_SRC python
    def add_name(self, name):
        current_app.logger.debug("running add name to system operation"
                                 " name = %s" % name.to_client())
        name.save()
        current_app.logger.debug("completed add name to system operation"
                                 " name = %s" % name.to_client())
        return name

#+END_SRC


**** Tests
#+NAME: test_persistence_add_name
#+BEGIN_SRC python
    def test_add_name(self):
         print "test_add_name"
         name = "Prof. S. Dharmaraja"
         name = Name(name=name)
         name = self.persistence_delegate.add_name(name)
         name = name.get_by_id(1)
         self.assertEqual(name.get("name"), name.get("name"))

#+END_SRC


*** Add email to the system
    This function adds email to the system.
#+NAME: persistence_add_email
#+BEGIN_SRC python
    def add_email(self, email):
        current_app.logger.debug("running add email to system operation"
                                 " email = %s" % email.to_client())
        email.save()
        current_app.logger.debug("completed add email to system operation"
                                 " email = %s" % email.to_client())
        return email

#+END_SRC


**** Tests
#+NAME: test_persistence_add_email
#+BEGIN_SRC python
    def test_add_email(self):
         print "test_add_email"
         email = "dharmar@maths.iitd.ac.in"
         email = Email(email=email)
         email = self.persistence_delegate.add_email(email)
         email = email.get_by_id(1)
         self.assertEqual(email.get("email"), email.get("email"))

#+END_SRC


*** Add developer to the system
    This function adds developer to the system.
#+NAME: persistence_add_developer
#+BEGIN_SRC python
    def add_developer(self, developer):
        current_app.logger.debug("running add developer to system"
                                 " developer = %s" % developer.to_client())
        name = developer.get("name")
        current_app.logger.debug("running add developer to system"
                                 " with name = %s" % name)
        email = developer.get("email")
        current_app.logger.debug("running add developer to system"
                                 " with email = %s" % email)

        if not self.name_exists(name.get("name")):
            name.save()
            current_app.logger.debug("completed add operation"
                                    " to system with developer" 
                                    " name = %s" % name)
        if not self.email_exists(email.get("email")):
            email.save()
            current_app.logger.debug("completed add operation"
                                    " to system with developer"
                                    " email = %s" % email)
        developer.save()

        current_app.logger.debug("completed add developer"
                                 " operation = %s" % developer.to_client())
        return developer

#+END_SRC
**** Tests

#+NAME: test_persistence_add_developer
#+BEGIN_SRC python
    def test_add_developer(self):
         print "test_add_developer"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name,
                              institute_id=institute_id, assets=[asset])
         inst.save()

         discipline_name = "IIT Kanpur"
         discipline_id = "IITK"
         discipline = Discipline(discipline_name=discipline_name,
                                     discipline_id=discipline_id,
                                     assets=[asset])
         discipline.save()

         dev_name = Name(name="Prof. S. Dharmaraja")
         dev_name.save()
         email = Email(email="dharmar@maths.iitd.ac.in")
         email.save()
         dev = Developer(name=dev_name, email=email)
         dev = self.persistence_delegate.add_developer(dev)
        
         self.assertEqual(self.persistence_delegate.developer_exists(dev),
                          True)

    def test_add_developer_without_saving_name(self):
         print "test_add_developer_without_saving_name"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name,
                              institute_id=institute_id, assets=[asset])
         inst.save()

         discipline_name = "IIT Kanpur"
         discipline_id = "IITK"
         discipline = Discipline(discipline_name=discipline_name,
                                     discipline_id=discipline_id,
                                     assets=[asset])
         discipline.save()

         dev_name = Name(name="Prof. S. Dharmaraja")
         email = Email(email="dharmar@maths.iitd.ac.in")
         email.save()
         dev = Developer(name=dev_name, email=email)
         dev = self.persistence_delegate.add_developer(dev)
        
         self.assertEqual(self.persistence_delegate.developer_exists(dev),
                          True)

    def test_add_developer_without_saving_email(self):
         print "test_add_developer_without_saving_email"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name,
                              institute_id=institute_id, assets=[asset])
         inst.save()

         discipline_name = "IIT Kanpur"
         discipline_id = "IITK"
         discipline = Discipline(discipline_name=discipline_name,
                                     discipline_id=discipline_id,
                                     assets=[asset])
         discipline.save()

         dev_name = Name(name="Prof. S. Dharmaraja")
         dev_name.save()
         email = Email(email="dharmar@maths.iitd.ac.in")
         dev = Developer(name=dev_name, email=email)
         dev = self.persistence_delegate.add_developer(dev)
        
         self.assertEqual(self.persistence_delegate.developer_exists(dev),
                          True)

#+END_SRC


*** Add institute to the system

    This function adds institute to the system.
#+NAME: persistence_add_institute
#+BEGIN_SRC python
    def add_institute(self, institute):
        current_app.logger.debug("running add institute to system operation"
                                 " institute = %s" % institute.to_client())
        institute.save()
        current_app.logger.debug("completed add institute to system operation"
                                 " institute = %s" % institute.to_client())
        return institute

#+END_SRC
**** Tests
#+NAME: test_persistence_add_institute
#+BEGIN_SRC python
    def test_add_institute(self):
         print "test_add_institute"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save() 

         institute_name1 = "IIT Kanpur"
         institute_id1 = "IITK"
         institute1 = Institute(institute_name=institute_name1,
                                    institute_id=institute_id1,
                                    assets=[asset])  
         institute1 = self.persistence_delegate.add_institute(institute1)
         
         institute_name2= "IIT Kharagpur"
         institute_id2= "IITKgp"
         institute2 = Institute(institute_name=institute_name2,
                                    institute_id=institute_id2,
                                    assets=[asset]) 
         
         institute = Institute.get_by_id(1)

         self.assertEqual(self.persistence_delegate.institute_exists\
                              (institute1), True)
         self.assertEqual(self.persistence_delegate.institute_exists\
                              (institute2), False)
        

#+END_SRC


*** Add hosting_info to the system

    This function adds hosting_info to the system.
#+NAME: persistence_add_hosting_info
#+BEGIN_SRC python
    def add_hosting_info(self, hosting_info):
        current_app.logger.debug("running add hosting_info to system operation"
                                 " hosting_info = %s" % 
                                 hosting_info.to_client())
        hosting_info.save()
        current_app.logger.debug("completed add hosting_info"
                                 " to system operation"
                                 " hosting_info = %s" % 
                                 hosting_info.to_client())
        return hosting_info

#+END_SRC
**** COMMENT Tests
#+NAME: test_persistence_add_hosting_info
#+BEGIN_SRC python
    def test_add_hosting_info(self):
         print "test_add_hosting_info"
         hosting_status1 = "hosted"
         hosted_url1 = "http://cse14-iiith.vlabs.ac.in"
         hosted_on1 = "cloud"
         hosting_info1 = HostingInfo(hosting_status=hosting_status1,\
                                         hosted_url=hosted_url1,\
                                         hosted_on=hosted_on1)
         hosting_info1 = self.persistence_delegate.add_hosting_info(hosting_info1)
         
         hosting_status2 = "not hosted"
         hosted_url2 = "http://iitkgp.vlab.co.in/"
         hosted_on2 = "server"
         hosting_info2 = HostingInfo(hosting_status=hosting_status2,\
                                         hosted_url=hosted_url2,\
                                         hosted_on=hosted_on2)

         hosting_info = HostingInfo.get_by_id(1)

         self.assertEqual(self.persistence_delegate.hosting_info_exists\
                             (hosting_info1), True)
         self.assertEqual(self.persistence_delegate.hosting_info_exists\
                             (hosting_info2), False)
        
#+END_SRC


*** Add asset type to the system

    This function adds asset to the system.
#+NAME: persistence_add_asset_type
#+BEGIN_SRC python
    def add_asset_type(self, asset_type):
        current_app.logger.debug("running add asset type to system operation"
                                 " asset = %s" % asset_type.to_client())
        asset_type.save()
        current_app.logger.debug("completed add asset to system operation"
                                 " asset = %s" % asset_type.to_client())
        return asset_type

#+END_SRC

**** Tests
#+NAME: test_persistence_add_asset_type
#+BEGIN_SRC python
    def test_add_asset_type(self):
         print "test_add_asset_type"

         asset_type1 = AssetType(asset_type="Image")
         asset_type1 = self.persistence_delegate.add_asset_type(asset_type1)
         
         asset_type2 = AssetType(asset_type="Video")
         
         asset_type1 = AssetType.get_by_id(1)

         self.assertEqual(self.persistence_delegate.asset_type_exists(asset_type1),
                          True)
         self.assertEqual(self.persistence_delegate.asset_type_exists(asset_type2),
                          False)
#+END_SRC


*** Add asset to the system

    This function adds asset to the system.
#+NAME: persistence_add_asset
#+BEGIN_SRC python
    def add_asset(self, asset):
        current_app.logger.debug("running add asset to system operation"
                                 " asset = %s" % asset.to_client())
        asset_type = asset.get("asset_type")
        current_app.logger.debug("running add asset to system"
                                 " with asset type = %s" % asset_type)

        if not self.asset_type_exists(asset_type):
            asset_type.save()
            current_app.logger.debug("completed add operation"
                                    " to system with asset" 
                                    " type = %s" % asset_type)

        asset.save()
        current_app.logger.debug("completed add asset to system operation"
                                 " asset = %s" % asset.to_client())
        return asset

#+END_SRC

**** Tests
#+NAME: test_persistence_add_asset
#+BEGIN_SRC python
    def test_add_asset(self):
         print "test_add_asset"

         asset_type1 = AssetType(asset_type="Image")
         asset_type1.save()

         path1 = "vlabs.ac.in/static/images/logo.png"
         asset1 = Asset(asset_type=asset_type1, path=path1)
         asset1 = self.persistence_delegate.add_asset(asset1)
         
         asset_type2 = AssetType(asset_type="Video")

         path2 = "vlabs.ac.in/static/images/icon.png"
         asset2 = Asset(asset_type=asset_type2, path=path2)
         
         asset = Asset.get_by_id(1)

         self.assertEqual(self.persistence_delegate.asset_exists(asset1),
                          True)
         self.assertEqual(self.persistence_delegate.asset_exists(asset2),
                          False)
#+END_SRC


*** Add integration_status to the system
    This function adds integration_status to the system.
#+NAME: persistence_add_integration_status
#+BEGIN_SRC python
    def add_integration_status(self, integration_status):
        current_app.logger.debug("running add integration_status to"
                                 " system operation"
                                 " integration_status = %s" % 
                                 integration_status.to_client())
        integration_status.save()
        current_app.logger.debug("completed add integration_status to"
                                 " system operation"
                                 " integration_status = %s" % 
                                 integration_status.to_client())
        return integration_status

#+END_SRC
**** Tests
#+NAME: test_persistence_add_integration_status
#+BEGIN_SRC python
    def test_add_integration_status(self):
         print "test_add_integration_status"
         integration_level1 = 4
         integration_status1 = IntegrationStatus(integration_level= integration_level1)
         integration_status1 = self.persistence_delegate.add_integration_status(integration_status1)
         
         integration_level2= 2
         integration_status2 = IntegrationStatus(integration_level= integration_level2)
         
         integration_status = IntegrationStatus.get_by_id(1)

         self.assertEqual(self.persistence_delegate.integration_status_exists\
                              (integration_status1), True)
         self.assertEqual(self.persistence_delegate.integration_status_exists\
                              (integration_status2), False)
        
#+END_SRC


*** Add phase to the system
    This function adds phase to the system.
#+NAME: persistence_add_phase
#+BEGIN_SRC python
    def add_phase(self, phase):
        current_app.logger.debug("running add phase to" 
                                 " system operation"
                                 " phase = %s"
                                     % phase.to_client())
        phase.save()
        current_app.logger.debug("completed add"
                                 " phase to system"
                                 " operation phase = %s"
                                     % phase.to_client())
        return phase

#+END_SRC


**** Tests
#+NAME: test_persistence_add_phase
#+BEGIN_SRC python
    def test_add_phase(self):
         print "test_add_phase"
         phase1 = Phase(phase_id=1)
         phase = self.persistence_delegate.add_phase(phase1)
         phase = phase.get_by_id(1)
         self.assertEqual(phase.get("phase_id"),
                              phase.get("phase_id"))

#+END_SRC


*** Update lab 
    This function updates existing lab.
#+NAME: persistence_update_lab
#+BEGIN_SRC python
    def update_lab(self, lab, lab_name, overview, institute, discipline,
                       sections, integration_status, hosting_info, developers,
                       assets, experiments, phase):

        current_app.logger.debug("running update lab operation")

        lab.set(lab_name=lab_name, overview=overview, institute=institute, 
                    discipline=discipline, sections=sections, hosting_info=hosting_info,
                    integration_status=integration_status,
                    developers=developers, assets=assets,
                    experiments=experiments, phase=phase)
        lab.save()
 
        current_app.logger.debug("completed update lab operation") 

        return lab

#+END_SRC
**** Tests
#+NAME: test_persistence_update_lab
#+BEGIN_SRC python
    def test_update_lab(self):
         print "test_update_lab"
         lab_name = "Data Structures"
         lab_id = "cse01"
         overview = "overview lab"
         experiments = []

         asset_type = AssetType(asset_type="Logo")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name,
                              institute_id=institute_id, assets=[asset])
         inst.save()

         discipline_name = "Electronics & Communications"
         discipline_id = "ECE"
         discipline = Discipline(discipline_name=discipline_name,
                                     discipline_id=discipline_id,
                                     assets=[asset])
         discipline.save()

         integration_level = 4
         integration_status = IntegrationStatus(integration_level=
                                                    integration_level)
         integration_status.save()
      
         dev_name = Name(name="Mohit Tahiliani")
         dev_name.save()
         email_id = Email(email="mohit.tahiliani@gmail.com")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev.save()

         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         host = HostingInfo(hosting_status=hosting_status,
                                hosted_url=hosted_url,
                                hosted_on=hosted_on)
         host.save()

         exp_name = "Data Structures"
         exp_id = "cse01"
         overview = "overview"
        
         exp = Experiment(exp_name=exp_name, exp_id=exp_id, \
                              overview=overview, sections=[],
                              institute=inst, discipline=discipline, 
                              integration_status=integration_status,
                              assets=[asset], developers=[dev],
                              hosting_info=[host])

         exp1 = self.persistence_delegate.add_experiment(exp)

         name = "Theory"
         section = Section(name=name)
         section.save()

         phase1=Phase(phase_id=1)
         phase1.save()

         lab = Lab(lab_name=lab_name, lab_id=lab_id,
                       overview=overview, 
                       institute=inst,
                       discipline=discipline, 
                       assets=[asset], hosting_info=[host],
                       sections=[section],
                       experiments=[exp1], phase=[phase1],
                       developers=[dev], 
                       integration_status=integration_status) 

         lab1 = self.persistence_delegate.add_lab(lab)
         lab_name1 = "Computer Programming"
         overview1 = "overview"

         institute_name1 = "IIT Kharagpur"
         institute_id1 = "IITKgp"
         inst1 = Institute(institute_name=institute_name1,
                               institute_id=institute_id1,
                               assets=[asset])
         inst1.save()

         discipline_name1 = "Computer Science & Engineering"
         discipline_id1 = "CSE"
         discipline1 = Discipline(discipline_name=discipline_name1,
                                      discipline_id=discipline_id1,
                                      assets=[asset])
         discipline1.save()

         integration_level1 = 2
         integration_status1 = IntegrationStatus(integration_level=\
                                                     integration_level1)
         integration_status1.save()

         hosting_status1 = "hosted"
         hosted_url1 = "http://cse13-iiith.vlabs.ac.in"
         hosted_on1 = "cloud"
         host1 = HostingInfo(hosting_status=hosting_status1,
                                 hosted_url=hosted_url1,
                                 hosted_on=hosted_on1)
         host1.save()

         phase2=Phase(phase_id=2)
         phase2.save()

         dev_name1 = Name(name="Tahiliani")
         dev_name1.save()
         email_id1 = Email(email="tahiliani@gmail.com")
         email_id1.save()
         dev1 = Developer(name=dev_name1, email=email_id1)
         dev1.save()

         asset_type1 = AssetType(asset_type="Image")
         asset_type1.save()

         path1 = "vlabs.ac.in/images/static/image.png"
         asset1 = Asset(asset_type=asset_type1, path=path1)
         asset1.save()

         exp_name1 = "Computer Programming"
         exp_id1 = "cse02"
         overview1 = "computer overview"
        
         exp1 = Experiment(exp_name=exp_name1, exp_id=exp_id1, \
                              overview=overview1, sections=[],
                              institute=inst1, discipline=discipline1, 
                              integration_status=integration_status,
                              assets=[asset1], developers=[dev1],
                              hosting_info=[host1])

         exp2 = self.persistence_delegate.add_experiment(exp)

         lab2 = self.persistence_delegate.update_lab\
           (lab1, lab_name1, overview1, inst1, discipline1,
                [section], integration_status1, [host1],
           [dev1], [asset1], [exp2], [phase2]),

         lab2 = Lab.get_by_id(1)

         self.assertEqual(lab2.get("lab_id"), lab_id)
         self.assertEqual(lab2.get("lab_name"), lab_name1)
         self.assertEqual(lab2.get("overview"), overview1)
         self.assertEqual(lab2.get("institute").get("institute_id"), 
                              inst1.get("institute_id"))
         self.assertEqual(lab2.get("discipline").get("discipline_id"), 
                              discipline1.get("discipline_id"))
         self.assertEqual(lab2.get("integration_status").
                              get("integration_level"), 
                              integration_status1.get("integration_level"))

         self.assertEqual(lab2.get("hosting_info")[0].get("hosted_url"), 
                              hosted_url1)
         self.assertEqual(lab2.get("developers")[0].get("email").get("email"), 
                              email_id1.get("email"))
         self.assertEqual(lab2.get("assets")[0].get("path"),
                              asset1.get("path"))
         self.assertEqual(lab2.get("experiments")[0].get("exp_id"),
                              exp2.get("exp_id"))


#+END_SRC


*** Update Experiment 
    This function updates existing experiment.
#+NAME: persistence_update_experiment
#+BEGIN_SRC python
    def update_experiment(self, experiment, exp_name, overview, institute, 
                          discipline, integration_status, hosting_info,
                          developers, assets, sections):
        current_app.logger.debug("running update experiment operation")

        experiment.set(exp_name=exp_name, overview=overview,
                           institute=institute, discipline=discipline,
                           integration_status=integration_status, 
                           hosting_info=hosting_info, 
                           developers=developers, assets=assets, 
                           sections=sections)
        experiment.save()

        current_app.logger.debug("completed update experiment operation")

        return experiment

#+END_SRC

**** Tests
#+NAME: test_persistence_update_experiment
#+BEGIN_SRC python
    def test_update_experiment(self):
         print "test_update_experiment"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name,
                              institute_id=institute_id, assets=[asset])
         inst.save()

         discipline_name = "computer science"
         discipline_id = "cse"
         discipline = Discipline(discipline_name=discipline_name,
                                     discipline_id=discipline_id,
                                     assets=[asset])
         discipline.save()

         dev_name = Name(name="Mohit Tahiliani")
         dev_name.save()
         email_id = Email(email="mohit.tahiliani@gmail.com")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev.save()

         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         host = HostingInfo(hosting_status=hosting_status,
                                hosted_url=hosted_url, 
                                hosted_on=hosted_on)
         host.save()

         exp_name = "Data Structures"
         exp_id = "cse01"
         overview = "overview"

         integration_level = 4
         integration_status = IntegrationStatus(integration_level=
                                                    integration_level)
         integration_status.save()

         name = "Theory"
         section = Section(name=name)
         section.save()
        
         exp = Experiment(exp_name=exp_name, exp_id=exp_id, \
                              overview=overview, sections=[section],
                              institute=inst, discipline=discipline, 
                              integration_status=integration_status,
                              assets=[asset], developers=[dev],
                              hosting_info=[host] )
         exp1 = self.persistence_delegate.add_experiment(exp)

         exp_name1 = "Computer Programming"
         overview1 = "overveiw exp"

         asset_type1 = AssetType(asset_type="Video")
         asset_type1.save()

         path1 = "vlabs.ac.in/images/video/logo.png"
         asset1 = Asset(asset_type=asset_type1, path=path1)
         asset1.save()

         institute_name1 = "IIT Kharagpur"
         institute_id1 = "IITKgp"
         inst1 = Institute(institute_name=institute_name1, institute_id=institute_id1,
                               assets=[asset1])
         inst1.save()

         discipline_name1 = "Electronics and Communication"
         discipline_id1 = "ece"
         discipline1 = Discipline(discipline_name=discipline_name1, discipline_id=discipline_id1,
                                      assets=[asset1])
         discipline1.save()

         dev_name1 = Name(name="Palavi Pawar")
         dev_name1.save()
         email_id1 = Email(email="pallavipawar@gmail.com")
         email_id1.save()
         dev1 = Developer(name=dev_name1, email=email_id1)
         dev1.save()

         integration_level1 = 3
         integration_status1 = IntegrationStatus(integration_level=
                                                     integration_level1)
         integration_status1.save()

         hosting_status1 = "hosted"
         hosted_url1 = "http://cse13-iiith.vlabs.ac.in"
         hosted_on1 = "cloud"
         host1 = HostingInfo(hosting_status=hosting_status1,
                                 hosted_url=hosted_url1,
                                 hosted_on=hosted_on1)
         host1.save()
         
         name1 = "Procedure"
         section1 = Section(name=name1)
         section1.save()

         exp2 = self.persistence_delegate.update_experiment(exp1, exp_name1,
                                         overview1, inst1, discipline1,
                                         integration_status1, [host1], 
                                         [dev1], [asset1], [section1])
         exp2 = Experiment.get_by_id(1)

         self.assertEqual(exp2.get("exp_name"), exp_name1)
         self.assertEqual(exp2.get("overview"), overview1)
         self.assertEqual(exp2.get("exp_id"), exp_id)
         self.assertEqual(exp2.get("institute").get("institute_id"), 
                              inst1.get("institute_id"))
         self.assertEqual(exp2.get("discipline").get("discipline_id"), 
                              discipline1.get("discipline_id"))
         self.assertEqual(exp2.get("integration_status").
                              get("integration_level"), 
                              integration_status1.get("integration_level"))
         self.assertEqual(exp2.get("hosting_info")[0].get("hosted_url"), 
                              hosted_url1)
         self.assertEqual(exp2.get("developers")[0].get("email").get("email"), 
                              email_id1.get("email"))
         self.assertEqual(exp2.get("assets")[0].get("path"),
                              asset1.get("path"))
         self.assertEqual(exp2.get("sections")[0].get("name"),
                              section1.get("name"))


#+END_SRC


*** Update Discipline 
    This function updates existing discipline.
#+NAME: persistence_update_discipline
#+BEGIN_SRC python
    def update_discipline(self, discipline, discipline_name, assets):
        current_app.logger.debug("running update discipline operation")

        discipline.set(discipline_name=discipline_name, assets=assets)
        discipline.save()
       
        current_app.logger.debug("completed update discipline operation")
        return discipline

#+END_SRC

**** Tests
#+NAME: test_persistence_update_discipline
#+BEGIN_SRC python
    def test_update_discipline(self):
         print "test_update_discipline"

         asset_type = AssetType(asset_type="Logo")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         discipline_name = "IIT Delhi"
         discipline_id = "EEE08"
         dis = Discipline(discipline_name=discipline_name,
                              discipline_id=discipline_id, assets=[asset])
         dis1 = self.persistence_delegate.add_discipline(dis)

         asset_type1 = AssetType(asset_type="Image")
         asset_type1.save()
         path1 = "vlabs.ac.in/images/static/image.png"
         asset1 = Asset(asset_type=asset_type1, path=path1)
         asset1.save()

         discipline_name1 = "IIT Bombay"
         discipline_id1 = "EEE09"
         dis2 = self.persistence_delegate.update_discipline\
           (dis1, discipline_name1, [asset1]),
         dis2 = Discipline.get_by_id(1)
         self.assertEqual(dis2.get("discipline_name"), discipline_name1)
         self.assertEqual(dis2.get("discipline_id"), discipline_id)
         self.assertEqual(dis2.get("assets")[0].get("path"),
                              asset1.get("path"))

#+END_SRC



*** Update Section
    This function updates existing section.
#+NAME: persistence_update_section
#+BEGIN_SRC python
    def update_section(self, section, name):
        current_app.logger.debug("running update section operation"
                                 " with section name = %s" % name)

        section.set(name=name)
        section.save()

        current_app.logger.debug("completed update section operation"
                                 " with section name = %s" % name)
        return section

#+END_SRC

**** Tests

#+NAME: test_persistence_update_section
#+BEGIN_SRC python
    def test_update_section(self):
         print "test_update_section"
         name = "Theory"
         section = Section(name=name)
         section1 = self.persistence_delegate.add_section(section)
         name1 = "Procedure"         
         section2 = self.persistence_delegate.update_section\
           (section1, name1)
         section2 = Section.get_by_id(1)
         self.assertEqual(section2.get("name"), name1)

#+END_SRC


*** Update developer

    This function updates existing developer.
#+NAME: persistence_update_developer
#+BEGIN_SRC python
    def update_developer(self, dev, dev_name):

        current_app.logger.debug("running update developer operation")
        dev_name.save()
        dev.set(name=dev_name)
        dev.save()

        current_app.logger.debug("completed update developer operation")

        return dev

#+END_SRC

  
**** Tests
#+NAME: test_persistence_update_developer
#+BEGIN_SRC python
    def test_update_developer(self):
         print "test_update_developer"

         dev_name = Name(name="Prof. S. Dharmaraja")
         dev_name.save()
         email_id = Email(email="dharmar@maths.iitd.ac.in")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev1 = self.persistence_delegate.add_developer(dev)

         dev_name1 = Name(name="Prof. S. raja")
         dev_name1.save()

         dev2 = self.persistence_delegate.update_developer(dev1, dev_name1)

         self.assertEqual(dev1.get("name").get("name"), dev_name1.get("name"))

#+END_SRC


*** Update Institute 
    This function updates existing institute.
#+NAME: persistence_update_institute
#+BEGIN_SRC python
    def update_institute(self, institute, institute_name, assets):

        current_app.logger.debug("running update institute operation")

        institute.set(institute_name=institute_name, assets=assets)
        institute.save()

        current_app.logger.debug("completed update institute operation")

        return institute

#+END_SRC

**** Tests
#+NAME: test_persistence_update_institute
#+BEGIN_SRC python
    def test_update_institute(self):
         print "test_update_institute"

         asset_type = AssetType(asset_type="Logo")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Delhi"
         institute_id = "IITD"
         institute = Institute(institute_name=institute_name, institute_id=institute_id,
                                   assets=[asset])
         institute1 = self.persistence_delegate.add_institute(institute)

         asset_type1 = AssetType(asset_type="Image")
         asset_type1.save()

         path1 = "vlabs.ac.in/images/static/image.png"
         asset1 = Asset(asset_type=asset_type1, path=path1)
         asset1.save()

         institute_name1 = "IIT Kanpur"
         institute2 = self.persistence_delegate.update_institute\
           (institute1, institute_name1, [asset1]),

         institute = Institute.get_by_id(1)

         self.assertEqual(institute.get("institute_name"), institute_name1)
         self.assertEqual(institute.get("institute_id"), institute_id)
         self.assertEqual(institute.get("assets")[0].get("path"),
                              asset1.get("path"))

#+END_SRC


*** Update HostingInfo 
    This function updates existing hosting_info.
#+NAME: persistence_update_hosting_info
#+BEGIN_SRC python
    def update_hosting_info(self, hosting_info, hosting_status, hosted_on):

        current_app.logger.debug("running update hosting_info operation")

        hosting_info.set(hosting_status=hosting_status, hosted_on=hosted_on)
        hosting_info.save()

        current_app.logger.debug("completed update hosting_info operation")

        return hosting_info

#+END_SRC

**** Tests
#+NAME: test_persistence_update_hosting_info
#+BEGIN_SRC python
    def test_update_hosting_info(self):
         print "test_update_hosting_info"
         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         hosting_info = HostingInfo(hosting_status=hosting_status,
                                        hosted_url=hosted_url,
                                        hosted_on=hosted_on)
         hosting_info1 = self.persistence_delegate.add_hosting_info(
             hosting_info)

         hosting_status1 = "not hosted"
         hosted_on1 = "server"
         hosting_info2 = self.persistence_delegate.update_hosting_info\
           (hosting_info1, hosting_status1, hosted_on1),

         hosting_info = HostingInfo.get_by_id(1)

         self.assertEqual(hosting_info.get("hosting_status"), hosting_status1)
         self.assertEqual(hosting_info.get("hosted_url"), hosted_url)
         self.assertEqual(hosting_info.get("hosted_on"), hosted_on1)

#+END_SRC


*** Update Asset 
    This function updates existing asset.
#+NAME: persistence_update_asset
#+BEGIN_SRC python
    def update_asset(self, asset, asset_type):
        
        current_app.logger.debug("running update asset operation")
        asset_type.save()
        asset.set(asset_type=asset_type)
        asset.save()

        current_app.logger.debug("completed update asset operation")
        return asset

#+END_SRC

**** Tests
#+NAME: test_persistence_update_asset
#+BEGIN_SRC python
    def test_update_asset(self):
         print "test_update_asset"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/static/images/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asst1 = self.persistence_delegate.add_asset(asset)

         asset_type1 = AssetType(asset_type="Video")
         asset_type1.save()

         path1 = "vlabs.ac.in/static/images/icon.png"
         asst2 = self.persistence_delegate.update_asset\
           (asst1, asset_type1),
         asst2 = Asset.get_by_id(1)
         self.assertEqual(asst2.get("asset_type").get("asset_type"),
                              asset_type1.get("asset_type"))
         self.assertEqual(asst2.get("path"), path)

#+END_SRC


*** Delete lab 
    This function delete existing lab.
#+NAME: persistence_delete_lab
#+BEGIN_SRC python
    def delete_lab(self, lab_id):
        record = self.get_lab(lab_id=lab_id)
        if not record:
            abort(404, 'No Lab with lab_id %s' % (lab_id))
        else:
            try:
                current_app.logger.debug("running delete operation on"
                                         " lab with lab_id = %s"
                                         % lab_id)
                record.delete()
                #db.session.delete(record)
                #db.session.commit()
            except Exception, e:
                current_app.logger.debug("completed delete operation on"
                                         " lab with lab_id = %s"
                                         % lab_id)
                print e
                abort(500, str(e))

        return lab_id

#+END_SRC

**** Tests
#+NAME: test_persistence_delete_lab
#+BEGIN_SRC python
    def test_delete_lab(self):
         print "test_delete_lab"
         lab_name = "Data Structures"
         lab_id = "cse01"
         overview = "overview"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name, institute_id=institute_id,
                              assets=[asset])
         inst.save()

         integration_level = 4
         integration_status = IntegrationStatus(integration_level=
                                                    integration_level)                    
         integration_status.save()

         discipline_name = "IIT Kanpur"
         discipline_id = "IITK"
         discipline = Discipline(discipline_name=discipline_name, discipline_id=discipline_id,
                                     assets=[asset])
         discipline.save()
 
         dev_name = Name(name="Mohit Tahiliani")
         dev_name.save()
         email_id = Email(email="mohit.tahiliani@gmail.com")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev.save()

         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         host = HostingInfo(hosting_status=hosting_status,
                                hosted_url=hosted_url,
                                hosted_on=hosted_on)
         host.save()

         name = "Theory"
         section = Section(name=name)
         section.save()

         phase1=Phase(phase_id=1)
         phase1.save()

         lab = Lab(lab_name=lab_name, lab_id=lab_id,
                       overview=overview, 
                       institute=inst,
                       discipline=discipline,
                       hosting_info=[host],  assets=[asset],
                       experiments=[], developers=[dev],
                       sections=[section], phase=[phase1],
                       integration_status=integration_status)

         lab1 = self.persistence_delegate.add_lab(lab)

         lab_name1 = "Computer Programming"
         lab_id1 = "cse02"
         overview = "overview"

         lab1 = Lab(lab_name=lab_name1, lab_id=lab_id1,
                        overview=overview,
                        institute=inst,
                        discipline=discipline,
                        assets=[asset], 
                        experiments=[], phase=[phase1],
                        integration_status=integration_status,
                        developers=[dev],
                        hosting_info=[host],
                        sections=[section])

         lab2 = self.persistence_delegate.add_lab(lab1)

         self.persistence_delegate.delete_lab("cse01")

         self.assertEqual(len(Lab.get_all()), 1)

#+END_SRC


*** Delete Experiment 
    This function delete existing experiment.
#+NAME: persistence_delete_experiment
#+BEGIN_SRC python
    def delete_experiment(self, exp_id):
        record = self.get_experiment(exp_id=exp_id)
        if not record:
            abort(404, 'No Experiment found with exp_id %s' % (exp_id))
        else:
            try:
                current_app.logger.debug("running delete operation on"
                                         " experiment with exp_id = %s"
                                         % exp_id)
                record.delete()
                #db.session.delete(record)
                #db.session.commit()
            except Exception, e:
                current_app.logger.debug("completed delete operation on"
                                         " experiment with exp_id = %s"
                                         % exp_id)
                print e
                abort(500, str(e))

        return exp_id

#+END_SRC

**** Tests
#+NAME: test_persistence_delete_experiment
#+BEGIN_SRC python
    def test_delete_experiment(self):
         print "test_delete_experiment"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name, institute_id=institute_id, assets=[asset])
         inst.save()

         discipline_name = "IIT Kanpur"
         discipline_id = "IITK"
         discipline = Discipline(discipline_name=discipline_name, discipline_id=discipline_id,
                                     assets=[asset])
         discipline.save()

         dev_name = Name(name="Mohit Tahiliani")
         dev_name.save()
         email_id = Email(email="mohit.tahiliani@gmail.com")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev.save()

         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         host = HostingInfo(hosting_status=hosting_status,
                                hosted_url=hosted_url,
                                hosted_on=hosted_on)
         host.save()
         
         integration_level = 4
         integration_status = IntegrationStatus(integration_level=
                                                    integration_level)
         integration_status.save()
        
         exp_name = "arrays"
         exp_id = "cse01" 
         overview = "overview"
         exp = Experiment(exp_name=exp_name, exp_id=exp_id, \
                              overview=overview, sections=[],
                              institute=inst, discipline=discipline,
                              integration_status=integration_status,
                              assets=[asset], developers=[dev],
                              hosting_info=[host])
         exp1 = self.persistence_delegate.add_experiment(exp)

         exp_name1 = "linked list"
         exp_id1 = "cse02"
         overview = "overview"
         exp1 = Experiment(exp_name=exp_name1, exp_id=exp_id1, \
                               overview=overview, sections=[],
                               institute=inst, discipline=discipline,
                               integration_status=integration_status,
                               assets=[asset], developers=[dev],
                               hosting_info=[host])
         exp2 = self.persistence_delegate.add_experiment(exp1)

         self.persistence_delegate.delete_experiment(exp_id)

         self.assertEqual(len(Experiment.get_all()), 1)

#+END_SRC


*** Delete Discipline 
    This function delete existing Discipline.
#+NAME: persistence_delete_discipline
#+BEGIN_SRC python
    def delete_discipline(self, discipline_id):
        record = self.get_discipline(discipline_id=discipline_id)
        if not record:
            abort(404, 'No Discipline  with discipline_id %s' % (discipline_id))
        else:
            try:
                current_app.logger.debug("running delete operation on"
                                         " discipline with discipline_id = %s"
                                         % discipline_id)
                record.delete()
                #db.session.delete(record)
                #db.session.commit()
            except Exception, e:
                current_app.logger.debug("completed delete operation on"
                                         " discipline with discipline_id = %s"
                                         % discipline_id)
                print e
                abort(500, str(e))

        return discipline_id

#+END_SRC

**** Tests
#+NAME: test_persistence_delete_discipline
#+BEGIN_SRC python
    def test_delete_discipline(self):
         print "test_delete_discipline"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         discipline_name = "IIT Delhi"
         discipline_id = "EEE08"
         dis = Discipline(discipline_name=discipline_name, discipline_id=discipline_id, assets=[asset])
         dis1 = self.persistence_delegate.add_discipline(dis)

         discipline_name1 = "IIT Kanpur"
         discipline_id1 = "EEE10"
         dis1 = Discipline (discipline_name=discipline_name1, discipline_id=discipline_id1, assets=[asset])
         dis2 = self.persistence_delegate.add_discipline(dis1)

         self.persistence_delegate.delete_discipline("EEE08")

         self.assertEqual(len(Discipline.get_all()), 1)

#+END_SRC


*** Delete Section 
    This function delete existing section.
#+NAME: persistence_delete_section
#+BEGIN_SRC python
    def delete_section(self, s_id):
        record = Section.get_by_id(s_id)
        if not record:
            abort(404, 'No Section with id %s' % (e_id))
        else:
            try:
                current_app.logger.debug("running delete operation on section")
                record.delete()
                #db.session.delete(record)
                #db.session.commit()
            except Exception, e:
                current_app.logger.debug("completed delete"
                                         " operation on section")
                print e
                abort(500, str(e))

        return s_id

#+END_SRC

**** Tests
#+NAME: test_persistence_delete_section
#+BEGIN_SRC python
    def test_delete_section(self):
         print "test_delete_section"
         name = "theory"
         section = Section(name=name)
         section1 = self.persistence_delegate.add_section(section)
 
         name1 = "Procedure"
         section1 = Section(name=name1)
         section2 = self.persistence_delegate.add_section(section1)

         self.persistence_delegate.delete_section(1)

         self.assertEqual(len(Section.get_all()), 1)

#+END_SRC


*** Delete Name 
    This function delete existing name.
#+NAME: persistence_delete_name
#+BEGIN_SRC python
    def delete_name(self, n_id):
        current_app.logger.debug("running delete on developer name")
        record = Name.get_by_id(n_id)
        if not record:
            abort(404, 'No Name with id %s' % (n_id))
        else:
            try:
                record.delete()
                current_app.logger.debug("completed delete on developer"
                                         " name")
                #db.session.delete(record)
                #db.session.commit()
            except Exception, e:
                current_app.logger.error("Exception = %s" % str(e))
                print e
                abort(500, str(e))

        return n_id

#+END_SRC

**** Tests
#+NAME: test_persistence_delete_name
#+BEGIN_SRC python
    def test_delete_name(self):
         print "test_delete_name"
         name = "Prof. Dharmaraj"
         name = Name(name=name)
         name.save()

         name1 = "Prof. Yamraj"
         name2 = Name(name=name1)
         name2.save()

         self.persistence_delegate.delete_name(1)

         self.assertEqual(len(Name.get_all()), 1)

#+END_SRC


*** Delete Email 
    This function delete existing email.
#+NAME: persistence_delete_email
#+BEGIN_SRC python
    def delete_email(self, email_id):
        record = self.get_email(email=email_id.get("email"))
        current_app.logger.debug("running delete on developer"
                                 " email with email_id = %s" % email_id)
        if not record:
            abort(404, 'No Email with id %s' % (email_id))
        else:
            try:               
                record.delete()
                current_app.logger.debug("completed delete on developer"
                                        " email with email_id = %s" % email_id)
                #db.session.delete(record)
                #db.session.commit()
            except Exception, e:
                current_app.logger.error("Exception = %s" % str(etest_delete_developer))
                print e
                abort(500, str(e))

        return email_id

#+END_SRC

**** Tests
#+NAME: test_persistence_delete_email
#+BEGIN_SRC python
    def test_delete_email(self):
         email = Email(email="abc@gmail.com")
         email1 = self.persistence_delegate.add_email(email)

         email1 = Email(email="xyz@gmail.com")
         email2 = self.persistence_delegate.add_email(email1)

         self.persistence_delegate.delete_email(email)

         self.assertEqual(len(Email.get_all()), 1)

#+END_SRC


*** Delete Developer 
    This function delete existing developer.
#+NAME: persistence_delete_developer
#+BEGIN_SRC python
    def delete_developer(self, email_id):
        record = self.get_developer(email=email_id)
        if not record:
            current_app.logger.debug("running delete on developer"
                                     " with email_id = %s" % email_id)
            abort(404, 'No Developer with id %s' % (email_id))
        else:
            try:
                record.delete()
                current_app.logger.debug("completed delete on developer"
                                         " with email_id = %s" % email_id)
                self.delete_email(email_id)
               
            except Exception, e:
                current_app.logger.error("Exception = %s" % str(e))
                print e
                abort(500, str(e))

        return email_id

#+END_SRC

**** Tests
#+NAME: test_persistence_delete_developer
#+BEGIN_SRC python
    def test_delete_developer(self):
         print "test_delete_developer"

         dev_name = Name(name="Prof. S. Dharmaraja")
         dev_name.save()

         email_id = Email(email="dharmar@maths.iitd.ac.in")
         email_id.save()

         dev = Developer(name=dev_name, email=email_id)
         dev1 = self.persistence_delegate.add_developer(dev)

         dev_name1 = Name(name="Prof. S. Yamraja")
         dev_name1.save()
         email_id1 = Email(email="yamraja@maths.iitd.ac.in")
         email_id1.save()

         dev2 = Developer(name=dev_name1, email=email_id1)
         dev3 = self.persistence_delegate.add_developer(dev2)

         self.persistence_delegate.delete_developer(dev3.get("email"))

         self.assertEqual(len(Developer.get_all()), 1)
         self.assertEqual(len(Email.get_all()), 1)


#+END_SRC


*** Delete Institute 
    This function deletes existing institute.
#+NAME: persistence_delete_institute
#+BEGIN_SRC python
    def delete_institute(self, institute_id):
        record = self.get_institute(institute_id=institute_id)
        if not record:
            abort(404, 'No Institute with id %s' % (institute_id))
        else:
            try:
                current_app.logger.debug("running delete on institute"
                                         " with institute_id = %s" % 
                                         institute_id)
                record.delete()
                current_app.logger.debug("completed delete on institute"
                                         " with institute_id = %s" % 
                                         institute_id)
                #db.session.delete(record)
                #db.session.commit()
            except Exception, e:
                current_app.logger.error("Exception = %s" % str(e))
                print e
                abort(500, str(e))

        return institute_id

#+END_SRC

**** Tests
#+NAME: test_persistence_delete_institute
#+BEGIN_SRC python
    def test_delete_institute(self):
         print "test_delete_institute"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Delhi"
         institute_id = "IITD"
         institute = Institute(institute_name=institute_name, institute_id=institute_id,
                                   assets=[asset])                    
         institute1 = self.persistence_delegate.add_institute(institute)

         institute_name1 = "IIT Kharagpur"
         institute_id1 = "IITKgp"
         institute1 = Institute(institute_name=institute_name1, institute_id=institute_id1,
                                    assets=[asset]) 
         institute2 = self.persistence_delegate.add_institute(institute1)

         self.persistence_delegate.delete_institute("IITD")

         self.assertEqual(len(Institute.get_all()), 1)

#+END_SRC


*** Delete HostingInfo 
    This function deletes existing hosting_info.
#+NAME: persistence_delete_hosting_info
#+BEGIN_SRC python
    def delete_hosting_info(self, hosted_url):
        record = self.get_hosting_info(hosted_url=hosted_url)
        if not record:
            abort(404, 'No HostingInfo with id %s' % (hosted_url))
        else:
            try:
                current_app.logger.debug("running delete on hosting_info"
                                         " with hosted_url = %s" % hosted_url)
                record.delete()
                current_app.logger.debug("completed delete on hosting_info"
                                         " with hosted_url = %s" % hosted_url)
                #db.session.delete(record)
                #db.session.commit()
            except Exception, e:
                current_app.logger.error("Exception = %s" % str(e))
                print e
                abort(500, str(e))

        return hosted_url

#+END_SRC

**** Tests
#+NAME: test_persistence_delete_hosting_info
#+BEGIN_SRC python
    def test_delete_hosting_info(self):
         print "test_delete_hosting_info"
         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         hosting_info = HostingInfo(hosting_status=hosting_status,
                                        hosted_url=hosted_url,
                                        hosted_on=hosted_on)
         hosting_info = self.persistence_delegate.add_hosting_info(hosting_info)

         hosting_status1 = "not hosted"
         hosted_url1 = "http://iitkgp.vlab.co.in/"
         hosted_on1 = "server"
         hosting_info1 = HostingInfo(hosting_status=hosting_status1,
                                         hosted_url=hosted_url1,
                                         hosted_on=hosted_on1)
         hosting_info2 = self.persistence_delegate.add_hosting_info(
             hosting_info1)

         self.persistence_delegate.delete_hosting_info(
             "http://cse14-iiith.vlabs.ac.in")

         self.assertEqual(len(HostingInfo.get_all()), 1)

#+END_SRC


*** Delete Asset 
    This function delete existing asset.
#+NAME: persistence_delete_asset
#+BEGIN_SRC python
    def delete_asset(self, path):
        record = self.get_asset(path=path)
        if not record:
            abort(404, 'No Asset found with path %s' % (path))
        else:
            try:
                current_app.logger.debug("running delete on asset"
                                         " with path = %s" % path)
                record.delete()
                current_app.logger.debug("completed delete on asset"
                                         " with path = %s" % path)
                #db.session.delete(record)
                #db.session.commit()
            except Exception, e:
                current_app.logger.error("Exception = %s" % str(e))
                print e
                abort(500, str(e))

        return path

#+END_SRC

**** Tests
#+NAME: test_persistence_delete_asset
#+BEGIN_SRC python
    def test_delete_asset(self):
         print "test_delete_asset"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/static/images/logo.png"
         asset = Asset(asset_type=asset_type, path=path)

         asset1 = self.persistence_delegate.add_asset(asset)

         asset_type1 = AssetType(asset_type="Icon")
         asset_type1.save()

         path1 = "vlabs.ac.in/static/images/icon.png"
         asset1 = Asset(asset_type=asset_type1, path=path1)

         asset2 = self.persistence_delegate.add_asset(asset1)

         self.persistence_delegate.delete_asset(path)

         self.assertEqual(len(Asset.get_all()), 1)
#+END_SRC



*** Delete IntegrationStatus
    This function deletes existing integration_status.
#+NAME: persistence_delete_integration_status
#+BEGIN_SRC python
    def delete_integration_status(self, integration_level):
        record = self.get_integration_status(integration_level=integration_level)
        if not record:
            abort(404, 'No IntegrationStatus with id %s' % (integration_level))
        else:
            try:
                current_app.logger.debug("running delete on integration_status"
                                         " with integration_level = %s" 
                                         % integration_level)
                record.delete()
                current_app.logger.debug("completed delete on integration_status"
                                         " with integration_level = %s" 
                                         % integration_level)
                #db.session.delete(record)
                #db.session.commit()
            except Exception, e:
                current_app.logger.error("Exception = %s" % str(e))
                print e
                abort(500, str(e))

        return integration_level

#+END_SRC
**** Tests
#+NAME: test_persistence_delete_integration_status
#+BEGIN_SRC python
    def test_delete_integration_status(self):
         print "test_delete_integration_status"
         integration_level = 4
         integration_status = IntegrationStatus(integration_level=\
                                                    integration_level)         
         integration_status1 = self.persistence_delegate.add_integration_status\
         (integration_status)

         integration_level1 = 2
         integration_status1 = IntegrationStatus(integration_level=\
                                                     integration_level1)
         integration_status2 = self.persistence_delegate.\
           add_integration_status(integration_status1)

         self.persistence_delegate.delete_integration_status(integration_level)

         self.assertEqual(len(IntegrationStatus.get_all()), 1)

#+END_SRC



*** Delete Phase 
    This function delete existing phase.
#+NAME: persistence_delete_phase
#+BEGIN_SRC python
    def delete_phase(self, ph_id):
        current_app.logger.debug("running delete on phase")
        record = Phase.get_by_id(ph_id)
        if not record:
            abort(404, 'No Phase with id %s' % (ph_id))
        else:
            try:
                record.delete()
                current_app.logger.debug("completed delete"
                                         " on phase")
            except Exception, e:
                current_app.logger.error("Exception = %s" % str(e))
                print e
                abort(500, str(e))

        return ph_id

#+END_SRC

**** Tests
#+NAME: test_persistence_delete_phase
#+BEGIN_SRC python
    def test_delete_phase(self):
         print "test_delete_phase"
         phase1 = Phase(phase_id=1)
         phase1.save()

         phase2 = Phase(phase_id=2)
         phase2.save()

         self.persistence_delegate.delete_phase(2)

         self.assertEqual(len(Phase.get_all()), 1)

#+END_SRC


*** Add experiments to a Lab
    This function adds experiments to a given lab.
#+NAME: persistence_add_experiments_to_lab
#+BEGIN_SRC python
    def add_experiments_to_lab(self, labid, experiments):
        lab = self.get_lab_by_id(labid)
        experiment_list = []
        for experiment in experiments:

            current_app.logger.debug("running add experiments to a lab"
                                     " operation with labid = %s" % labid)

            if self.experiment_exists(experiment):
                experiment = self.get_experiment(exp_id=experiment.
                                                     get('exp_id'),
                                                 exp_name=experiment.
                                                     get('exp_name'))
            else:
                experiment.save()

            experiment_list.append(experiment)

        lab.set(experiments=experiment_list)

        current_app.logger.debug("completed add experiments to a lab operation")        
        return lab

#+END_SRC

****  Tests
#+NAME: test_persistence_add_experiments_to_lab
#+BEGIN_SRC python
    def test_add_saved_experiments_to_lab(self):
         print "test_add_experiments_to_lab_in_persistence_delegate"

         lab_name="Data Structures"
         lab_id="CSE02"
         overview = "overview"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()


         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name,
                              institute_id=institute_id,
                              assets=[asset])
         inst.save()

         discipline_name = "IIT Kanpur"
         discipline_id = "IITK"
         discipline = Discipline(discipline_name=discipline_name,
                                discipline_id=discipline_id,
                                assets=[asset])
         discipline.save()

         integration_level = 4
         integration_status = IntegrationStatus(integration_level=
                                                integration_level)
         integration_status.save()

         dev_name = Name(name="Mohit Tahiliani")
         dev_name.save()
         email_id = Email(email="mohit.tahiliani@gmail.com")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev.save()

         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         host = HostingInfo(hosting_status=hosting_status,
                                hosted_url=hosted_url,
                                hosted_on=hosted_on)
         host.save()

         name = "Theory"
         section = Section(name=name)
         section.save()

         phase1=Phase(phase_id=1)
         phase1.save()

         lab = Lab(lab_name=lab_name, lab_id=lab_id,
                       overview=overview,
                       institute=inst,
                       discipline=discipline,
                       hosting_info=[host], assets=[asset],
                       experiments=[], developers=[dev],
                       sections=[section], phase=[phase1],
                       integration_status=integration_status)

         lab.save()

         exp_name = "Number Systems"
         exp_id = "EE99777"
         overview = "overview"
         experiment = Experiment(exp_name=exp_name,
                                     exp_id=exp_id, 
                                     overview=overview,
                                     sections=[],
                                     institute=inst,
                                     discipline=discipline, 
                                     integration_status=integration_status,
                                     assets=[asset],
                                     developers=[dev],
                                     hosting_info=[host])
         experiment.save()
        
         lab1 = Lab.get_by_id(1)

         lab1 = self.persistence_delegate.add_experiments_to_lab(lab1.id, \
                                                             [experiment])
        
         self.assertEqual(len(lab1.get("experiments")), 1)
         self.assertEqual(lab1.get("experiments")[0].get("exp_id"), exp_id)
         self.assertEqual(lab1.get("experiments")[0].get("exp_name"),\
                                                      exp_name)

#+END_SRC


*** Add assets to a Lab
    This function adds assets to a given lab.
#+NAME: persistence_add_assets_to_lab
#+BEGIN_SRC python
    def add_assets_to_lab(self, lab, assets):
        asset_list = []
        for asset in assets:

            current_app.logger.debug("running add assets to a" 
                                     " lab = %s" % lab.to_client())
            if self.asset_exists(asset):
                asset = self.get_asset(path=asset.get('path'),
                                           asset_type=asset.
                                           get('asset_type'))
            else:
                asset.save()

            asset_list.append(asset)

        lab.set(assets=asset_list)

        current_app.logger.debug("completed add assets to a lab = %s"
                                 % lab.to_client())
        return lab

#+END_SRC

****  Tests
#+NAME: test_persistence_add_assets_to_lab
#+BEGIN_SRC python
    def test_add_saved_assets_to_lab(self):
         print "test_add_assets_to_lab_in_persistence_delegate"

         lab_name="Data Structures"
         lab_id="CSE02"
         overview = "overview"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name, institute_id=institute_id, assets=[asset])
         inst.save()

         discipline_name = "IIT Kanpur"
         discipline_id = "IITK"
         discipline = Discipline(discipline_name=discipline_name, discipline_id=discipline_id,
                                     assets=[asset])
         discipline.save()

         integration_level = 4
         integration_status = IntegrationStatus(integration_level=
                                                    integration_level)
         integration_status.save()

         dev_name = Name(name="Mohit Tahiliani")
         dev_name.save()
         email_id = Email(email="mohit.tahiliani@gmail.com")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev.save()

         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         host = HostingInfo(hosting_status=hosting_status,
                                hosted_url=hosted_url,
                                hosted_on=hosted_on)
         host.save()

         name = "Theory"
         section = Section(name=name)
         section.save()

         lab = Lab(lab_name=lab_name, lab_id=lab_id, overview=overview,
                       institute=inst, discipline=discipline,
                       hosting_info=[host], assets=[asset],
                       experiments=[], developers=[dev], sections=[section],
                       integration_status=integration_status)

         lab.save()

         exp_name = "Number Systems"
         exp_id = "EE99777"
         overview = "overview"
         experiment = Experiment(exp_name=exp_name, exp_id=exp_id, \
                                     overview=overview, 
                                     integration_status=integration_status, 
                                     sections=[], assets=[asset],
                                     developers=[dev], hosting_info=[host], 
                                     institute=inst, discipline=discipline)
         experiment.save()
        
         lab1 = Lab.get_by_id(1)

         lab1 = self.persistence_delegate.add_assets_to_lab(lab, \
                                                             [asset])
        
         self.assertEqual(len(lab1.get("assets")), 1)
         self.assertEqual(lab1.get("assets")[0].get("path"), path)
         self.assertEqual(lab1.get("assets")[0].get("asset_type"),\
                                                      asset_type)

#+END_SRC


*** Add labs to an Institute
    This function adds labs to a given institute.
#+NAME: persistence_add_labs_to_institute
#+BEGIN_SRC python
    def add_labs_to_institute(self, instituteid, labs):
        institute = self.get_institute_by_id(instituteid)
        lab_list = []
        for lab in labs:
            current_app.logger.debug("running add labs to an institute with"
                                     " instituteid = %s" % instituteid)
            if self.lab_exists(lab):
                lab = self.get_lab(lab_id=lab.get('lab_id'),
                                                 lab_name=lab.get('lab_name'))
            else:
                lab.save()

            lab_list.append(lab)

        institute.set(labs=lab_list)

        current_app.logger.debug("completed add labs to an institute with"
                                 " instituteid = %s" % instituteid)
        return institute

#+END_SRC

****  Tests
#+NAME: test_persistence_add_labs_to_institute
#+BEGIN_SRC python
    def test_add_saved_labs_to_institute(self):
         print "test_add_labs_to_institute_in_persistence_delegate"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()
        
         lab_name = "Data Structures"
         lab_id = "cse05"
         overview = "overview"

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name,
                              institute_id=institute_id,
                              assets=[asset])
         inst.save()

         discipline_name = "IIT Kanpur"
         discipline_id = "IITK"
         discipline = Discipline(discipline_name=discipline_name,
                                discipline_id=discipline_id,
                                assets=[asset])
         discipline.save()

         integration_level = 4
         integration_status = IntegrationStatus(integration_level=
                                                integration_level)
         integration_status.save()

         dev_name = Name(name="Mohit Tahiliani")
         dev_name.save()
         email_id = Email(email="mohit.tahiliani@gmail.com")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev.save()

         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         host = HostingInfo(hosting_status=hosting_status,
                                hosted_url=hosted_url,
                                hosted_on=hosted_on)
         host.save()

         name = "Theory"
         section = Section(name=name)
         section.save()

         phase1=Phase(phase_id=1)
         phase1.save()

         lab = Lab(lab_name=lab_name, lab_id=lab_id,
                       overview=overview, 
                       institute=inst,
                       discipline=discipline,
                       sections=[section],
                       hosting_info=[host],  assets=[],
                       experiments=[], phase=[phase1],
                       developers=[dev],
                       integration_status=integration_status)

         lab.save()
         
         institute1 = Lab.get_by_id(1)

         institute1 = self.persistence_delegate.add_labs_to_institute(
             institute1.id, [lab])
        
         self.assertEqual(len(institute1.get("labs")), 1)
         self.assertEqual(institute1.get("labs")[0].get("lab_id"), lab_id)
         self.assertEqual(institute1.get("labs")[0].get("lab_name"),\
                                                      lab_name)

#+END_SRC


*** Add sections to a Experiment
    This function adds sections to a given experiment.
#+NAME: persistence_add_sections_to_experiment
#+BEGIN_SRC python
    def add_sections_to_experiment(self, experiment, sections):
        section_list = []
        for section in sections:
            current_app.logger.debug("running add sections to an"
                                   " experiment = %s" % experiment.to_client())
            if self.section_exists(section):
                section = self.get_section(name=section.get('name'))
            else:
                section.save()

            section_list.append(section)

        experiment.set(sections=section_list)

        current_app.logger.debug("completed add sections to an"
                                 " experiment = %s" % experiment.to_client())
        return experiment

#+END_SRC

****  Tests
#+NAME: test_persistence_add_sections_to_experiment
#+BEGIN_SRC python
    def test_add_saved_sections_to_experiment(self):
         print "test_add_sections_to_experiment_in_persistence_delegate"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name, institute_id=institute_id, assets=[asset])
         inst.save()

         discipline_name = "IIT Kanpur"
         discipline_id = "IITK"
         discipline = Discipline(discipline_name=discipline_name, discipline_id=discipline_id,
                                     assets=[asset])
         discipline.save()

         dev_name = Name(name="Mohit Tahiliani")
         dev_name.save()
         email_id = Email(email="mohit.tahiliani@gmail.com")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev.save()

         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         host = HostingInfo(hosting_status=hosting_status,
                                hosted_url=hosted_url,
                                hosted_on=hosted_on)
         host.save()

         integration_level = 4
         integration_status = IntegrationStatus(integration_level=
                                                    integration_level)
         integration_status.save()
         
         exp_name = "Number Systems"
         exp_id = "EE99777"
         overview = "overview"
         exp = Experiment(exp_name=exp_name, exp_id=exp_id, \
                           overview=overview, institute=inst,
                           discipline=discipline, 
                           integration_status=integration_status, 
                           sections=[], assets=[asset],
                           developers=[dev], hosting_info=[host])
         exp.save()
        
         section1 = Section(name='Theory')
         section1.save()
         section2 = Section(name='Procedure')
         section2.save()

         exp1 = self.persistence_delegate.add_sections_to_experiment\
                                     (exp, [section1, section2])
        
         self.assertEqual(len(exp1.get("sections")), 2)
         self.assertEqual(exp1.get("sections")[0].get("name"), 'Theory')
         self.assertEqual(exp1.get("sections")[1].get("name"), 'Procedure')

#+END_SRC


*** Get an object
    A generic function to find an object of type =cls= matching a given a criteria

#+NAME: persistence_get_object
#+BEGIN_SRC python
    def get_object(self, cls, **kwargs):
        ret_val = None
        try:
            ret_val = cls.apply_filters(**kwargs)[0]
        except NotFoundError as e:
            ret_val = None
        
        return ret_val

#+END_SRC
	

*** Get Lab
    This function returns a lab if present in the database.  If the lab is
    not present, =None= type is returned.
#+NAME: persistence_get_lab
#+BEGIN_SRC python
    def get_lab(self, **kwargs):
        current_app.logger.debug("running get lab operation")
        current_app.logger.debug("completed get lab operation")

        return self.get_object(Lab, **kwargs)

#+END_SRC

**** Tests
#+NAME: test_persistence_get_lab
#+BEGIN_SRC python
    def test_get_lab(self):
         print "test_get_lab"
         lab_name1 = "Computer Programming"
         lab_id1 = "CSE01"
         overview = "overview"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name,
                              institute_id=institute_id,
                              assets=[asset])
         inst.save()

         discipline_name = "IIT Kanpur"
         discipline_id = "IITK"
         discipline = Discipline(discipline_name=discipline_name,
                                discipline_id=discipline_id,
                                assets=[asset])
         discipline.save()

         integration_level = 4
         integration_status = IntegrationStatus\
           (integration_level=integration_level)
         integration_status.save()

         dev_name = Name(name="Mohit Tahiliani")
         dev_name.save()
         email_id = Email(email="mohit.tahiliani@gmail.com")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev.save()

         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         host = HostingInfo(hosting_status=hosting_status,
                                hosted_url=hosted_url,
                                hosted_on=hosted_on)
         host.save()

         name = "Theory"
         section = Section(name=name)
         section.save()

         phase1=Phase(phase_id=1)
         phase1.save()

         lab = Lab(lab_name=lab_name1, lab_id=lab_id1,
                       overview=overview,
                       institute=inst,
                       discipline=discipline, 
                       hosting_info=[host], assets=[asset],
                       experiments=[], developers=[dev],
                       sections=[section], phase=[phase1], 
                       integration_status=integration_status)

         lab.save()

         lab_obj = self.persistence_delegate.get_lab(lab_name=
                                                lab.get("lab_name"))
         self.assertEqual(lab_obj.get("lab_name"), lab.get("lab_name"))
         self.assertEqual(lab_obj.get("lab_id"), lab.get("lab_id"))

#+END_SRC



*** Get AssetType
    This function returns a lab if present in the database.  If the lab is
    not present, =None= type is returned.
#+NAME: persistence_get_asset_type
#+BEGIN_SRC python
    def get_asset_type(self, **kwargs):
        current_app.logger.debug("running get asset_type operation")
        current_app.logger.debug("completed get asset_type operation")

        return self.get_object(AssetType, **kwargs)

#+END_SRC

**** Tests
#+NAME: test_persistence_get_lab
#+BEGIN_SRC python
    def test_get_lab(self):
         print "test_get_lab"
         lab_name1 = "Computer Programming"
         lab_id1 = "CSE01"
         overview = "overview"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name, institute_id=institute_id, assets=[asset])
         inst.save()

         discipline_name = "IIT Kanpur"
         discipline_id = "IITK"
         discipline = Discipline(discipline_name=discipline_name, discipline_id=discipline_id,
                                     assets=[asset])
         discipline.save()

         integration_level = 4
         integration_status = IntegrationStatus(integration_level=
                                                    integration_level)
         integration_status.save()

         dev_name = Name(name="Mohit Tahiliani")
         dev_name.save()
         email_id = Email(email="mohit.tahiliani@gmail.com")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev.save()

         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         host = HostingInfo(hosting_status=hosting_status,
                                hosted_url=hosted_url,
                                hosted_on=hosted_on)
         host.save()

         name = "Theory"
         section = Section(name=name)
         section.save()

         phase1=Phase(phase_id=1)
         phase1.save()

         lab = Lab(lab_name=lab_name1, lab_id=lab_id1, overview=overview,
                       institute=inst, discipline=discipline, 
                       hosting_info=[host], assets=[asset], phase=[phase1],
                       experiments=[], developers=[dev], sections=[section], 
                       integration_status=integration_status)

         lab.save()

         lab_obj = self.persistence_delegate.get_lab(lab_name=
                                                lab.get("lab_name"))
         self.assertEqual(lab_obj.get("lab_name"), lab.get("lab_name"))
         self.assertEqual(lab_obj.get("lab_id"), lab.get("lab_id"))

#+END_SRC


*** Get Section
    This function returns a section if present in the database.  If the lab is
    not present, =None= type is returned.
#+NAME: persistence_get_section
#+BEGIN_SRC python
    def get_section(self, **kwargs):
        current_app.logger.debug("running get section operation")
        current_app.logger.debug("completed get section operation")
        return self.get_object(Section, **kwargs)

#+END_SRC

**** Tests
#+NAME: test_persistence_get_section
#+BEGIN_SRC python
    def test_get_section(self):
         print "test_get_section"
         name = "Theory"
         section = Section(name=name)
         section.save()

         section_obj = self.persistence_delegate.get_section(name=
                                                section.get("name"))
         self.assertEqual(section_obj.get("name"),
                              section.get("name"))

#+END_SRC



*** Get Name
    This function returns a name if present in the database.  If the name is
    not present, =None= type is returned.
#+NAME: persistence_get_name
#+BEGIN_SRC python
    def get_name(self, **kwargs):
        current_app.logger.debug("running get developer's name operation")
        current_app.logger.debug("completed get developer's name operation")
        return self.get_object(Name, **kwargs)

#+END_SRC

**** Tests
#+NAME: test_persistence_get_name
#+BEGIN_SRC python
    def test_get_name(self):
         print "test_get_name"
         name = "Prof. Dharamaraja"
         name = Name(name=name)
         name.save()

         name_obj = self.persistence_delegate.get_name(name=
                                                name.get("name"))
         self.assertEqual(name_obj.get("name"),
                              name.get("name"))

#+END_SRC



*** Get Email
    This function returns a email if present in the database.  If the email is
    not present, =None= type is returned.
#+NAME: persistence_get_email
#+BEGIN_SRC python
    def get_email(self, **kwargs):
        current_app.logger.debug("running get developer's email operation")
        current_app.logger.debug("completed get developer's email operation")
        return self.get_object(Email, **kwargs)

#+END_SRC

**** Tests
#+NAME: test_persistence_get_email
#+BEGIN_SRC python
    def test_get_email(self):
         print "test_get_email"
         email = "abc@gmail.com"
         email = Email(email=email)
         email.save()

         email_obj = self.persistence_delegate.get_email(email=
                                                email.get("email"))
         self.assertEqual(email_obj.get("email"),
                              email.get("email"))

#+END_SRC



*** Get Developer
    This function returns a developer if present in the database.  If the
    developer is not present, =None= type is returned.
#+NAME: persistence_get_developer
#+BEGIN_SRC python
    def get_developer(self, **kwargs):
        current_app.logger.debug("running get developer operation")
        current_app.logger.debug("completed get developer operation")
        return self.get_object(Developer, **kwargs)

#+END_SRC

**** Tests
#+NAME: test_persistence_get_developer
#+BEGIN_SRC python
    def test_get_developer(self):
         print "test_get_developer"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name, institute_id=institute_id, assets=[asset])
         inst.save()

         discipline_name = "IIT Kanpur"
         discipline_id = "IITK"
         discipline = Discipline(discipline_name=discipline_name, discipline_id=discipline_id,
                                     assets=[asset])
         discipline.save()
        
         dev_name = Name(name="Prof. S. Dharmaraja")
         dev_name.save()
         email_id = Email(email="dharmar@maths.iitd.ac.in")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev.save()

         dev_obj = self.persistence_delegate.get_developer(email=dev.
                                                               get("email"))
         self.assertEqual(dev_obj.get("email").get("email"), email_id.
                              get("email"))

#+END_SRC



*** Get Experiment
    This function returns experiment if present in the database.  If the experiment is
    not present, =None= type is returned.
#+NAME: persistence_get_experiment
#+BEGIN_SRC python
    def get_experiment(self, **kwargs):
        current_app.logger.debug("running get experiment operation")
        current_app.logger.debug("completed get experiment operation")
        return self.get_object(Experiment, **kwargs)

#+END_SRC

**** Tests
#+NAME: test_persistence_get_experiment
#+BEGIN_SRC python
    def test_get_experiment(self):
         print "test_get_experiment"

         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         host = HostingInfo(hosting_status=hosting_status,
                                hosted_url=hosted_url,
                                hosted_on=hosted_on)
         host.save()

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name, institute_id=institute_id, assets=[asset])
         inst.save()

         discipline_name = "IIT Kanpur"
         discipline_id = "IITK"
         discipline = Discipline(discipline_name=discipline_name, discipline_id=discipline_id,
                                     assets=[asset])
         discipline.save()

         dev_name = Name(name="Mohit Tahiliani")
         dev_name.save()
         email_id = Email(email="mohit.tahiliani@gmail.com")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev.save()

         exp_name = "Number Systems"
         exp_id = "EE99777"
         overview = "overview"

         integration_level = 4
         integration_status = IntegrationStatus(integration_level=
                                                    integration_level)
         integration_status.save()

         exp = Experiment(exp_name=exp_name, exp_id=exp_id,
                              overview=overview, sections=[],
                              institute=inst, discipline=discipline, 
                              integration_status=integration_status,
                              assets=[asset], developers=[dev],
                              hosting_info=[host])
         exp.save()
         exp_obj = self.persistence_delegate.get_experiment(exp_name=
                                                exp.get("exp_name"))
         self.assertEqual(exp_obj.get("exp_name"),
                              exp.get("exp_name"))

#+END_SRC




*** Get Institute
    This function returns institute if present in the database. If the institute is
    not present, =None= type is returned.
#+NAME: persistence_get_institute
#+BEGIN_SRC python
    def get_institute(self, **kwargs):
        current_app.logger.debug("running get institute operation")
        current_app.logger.debug("completed get institute operation")
        return self.get_object(Institute, **kwargs)

#+END_SRC
**** Tests

#+NAME: test_persistence_get_institute
#+BEGIN_SRC python
    def test_get_institute(self):
         print "test_get_institute"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Delhi"
         institute_id = "IITD"
         inst = Institute(institute_name=institute_name, institute_id=institute_id,
                              assets=[asset]) 
         inst.save()
         inst_obj = self.persistence_delegate.get_institute(institute_name=
                                                inst.get("institute_name"))

         inst_obj1 = self.persistence_delegate.get_institute(institute_id=
                                                inst.get("institute_id"))

         self.assertEqual(inst_obj.get("institute_name"), inst.get("institute_name"))
         self.assertEqual(inst_obj1.get("institute_id"), inst.get("institute_id"))

#+END_SRC


*** Get Discipline
    This function returns discipline if present in the database.  If the discipline is
    not present, =None= type is returned.
#+NAME: persistence_get_discipline 
#+BEGIN_SRC python
    def get_discipline(self, **kwargs):
        current_app.logger.debug("running get discipline operation")
        current_app.logger.debug("completed get discipline operation")
        return self.get_object(Discipline, **kwargs)

#+END_SRC

**** Tests

#+NAME: test_persistence_get_discipline
#+BEGIN_SRC python
    def test_get_discipline(self):
         print "test_get_discipline"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         discipline_name = "IIT Delhi"
         discipline_id = "EEE08"
         dis = Discipline(discipline_name=discipline_name, discipline_id=discipline_id, assets=[asset])
         dis.save()
         dis_obj = self.persistence_delegate.get_discipline(discipline_name=discipline_name)
         dis_obj1 = self.persistence_delegate.get_discipline(discipline_id=discipline_id)

         self.assertEqual(dis_obj.get("discipline_name"), discipline_name)
         self.assertEqual(dis_obj1.get("discipline_id"), discipline_id)

#+END_SRC


*** Get Asset
    This function returns asset if present in the database.  If the asset is
    not present, =None= type is returned.
#+NAME: persistence_get_asset
#+BEGIN_SRC python
    def get_asset(self, **kwargs):
        current_app.logger.debug("running get asset operation")
        current_app.logger.debug("completed get asset operation")
        return self.get_object(Asset, **kwargs)

#+END_SRC

**** Tests
#+NAME: test_persistence_get_asset
#+BEGIN_SRC python
    def test_get_asset(self):
         print "test_get_asset"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/static/images/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()
         asset_obj = self.persistence_delegate.get_asset(asset_type=
                                                asset.get("asset_type"))
                           
         self.assertEqual(asset_obj.get("asset_type"),
                              asset.get("asset_type"))

#+END_SRC




*** Get Labs
    This function returns all labs if present in the database.  If the labs are
    not present, =None= type is returned.
#+NAME: persistence_get_labs
#+BEGIN_SRC python
    def get_labs(self, **kwargs):
        current_app.logger.debug("")
        ret_val = None
        try:
            current_app.logger.debug("running operation get labs")
            ret_val = Lab.apply_filters(**kwargs)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            ret_val = None
        
        return ret_val

#+END_SRC

****  Tests
#+NAME: test_persistence_get_labs
#+BEGIN_SRC python
    def test_get_labs_with_same_overview(self):
         print "test_get_labs_with_same_overview"
         lab_name1="Computer Programming"
         lab_id1="CSE01"
         overview="overview"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name,
                              institute_id=institute_id,
                              assets=[asset])
         inst.save()

         discipline_name = "IIT Kanpur"
         discipline_id = "IITK"
         discipline = Discipline(discipline_name=discipline_name,
                                discipline_id=discipline_id,
                                assets=[asset])
         discipline.save()

         integration_level = 4
         integration_status = IntegrationStatus\
           (integration_level=integration_level)
         integration_status.save()

         dev_name = Name(name="Mohit Tahiliani")
         dev_name.save()
         email_id = Email(email="mohit.tahiliani@gmail.com")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev.save()

         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         host = HostingInfo(hosting_status=hosting_status,
                                hosted_url=hosted_url,
                                hosted_on=hosted_on)
         host.save()

         name = "Theory"
         section = Section(name=name)
         section.save()

         phase1=Phase(phase_id=1)
         phase1.save()

         lab1 = Lab(lab_name=lab_name1, lab_id=lab_id1,
                        overview=overview,
                        institute=inst,
                        discipline=discipline, 
                        hosting_info=[host], assets=[asset],
                        experiments=[], developers=[dev],
                        sections=[section], phase=[phase1], 
                        integration_status=integration_status)

         lab1.save()

         lab_name2="Data Structures"
         lab_id2="CSE02"


         lab2 = Lab(lab_name=lab_name2, lab_id=lab_id2,
                        overview=overview, 
                        institute=inst,
                        discipline=discipline,
                        assets=[asset],
                        experiments=[], phase=[phase1],
                        integration_status=integration_status,
                        developers=[dev],
                        hosting_info=[host],
                        sections=[section])

         lab2.save()

         labs_list = self.persistence_delegate.\
           get_labs(overview=overview)

         self.assertEqual(labs_list[0].get("overview"),
                              overview)
         self.assertEqual(labs_list[1].get("overview"),
                              overview)

    def test_get_lab_with_given_lab_id(self):
         print "test_get_lab_with_given_lab_id"
         lab_name1="Computer Programming"
         lab_id1="CSE01"
         overview="overview"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name,
                              institute_id=institute_id,
                              assets=[asset])
         inst.save()

         discipline_name = "IIT Kanpur"
         discipline_id = "IITK"
         discipline = Discipline(discipline_name=discipline_name,
                                discipline_id=discipline_id,
                                assets=[asset])
         discipline.save()

         integration_level = 4
         integration_status = IntegrationStatus\
         (integration_level=integration_level)
         integration_status.save()

         dev_name = Name(name="Mohit Tahiliani")
         dev_name.save()
         email_id = Email(email="mohit.tahiliani@gmail.com")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev.save()

         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         host = HostingInfo(hosting_status=hosting_status,
                                hosted_url=hosted_url,
                                hosted_on=hosted_on)
         host.save()

         name = "Theory"
         section = Section(name=name)
         section.save()

         phase1=Phase(phase_id=1)
         phase1.save()
         
         lab1 = Lab(lab_name=lab_name1, lab_id=lab_id1,
                        overview=overview,
                        institute=inst,
                        discipline=discipline,
                        hosting_info=[host], assets=[asset],
                        experiments=[], developers=[dev],
                        sections=[section], phase=[phase1],
                        integration_status=integration_status)

         lab1.save()

         lab_name2="Data Structures"
         lab_id2="CSE02"

         lab2 = Lab(lab_name=lab_name2, lab_id=lab_id2,
                        overview=overview, 
                        institute=inst,
                        discipline=discipline,
                        assets=[asset],
                        experiments=[], phase=[phase1],
                        integration_status=integration_status,
                        developers=[dev],
                        sections=[section],
                        hosting_info=[host])

         lab2.save()

         labs_list = self.persistence_delegate.get_labs\
           (lab_id=lab_id1)

         self.assertEqual(labs_list[0].get("lab_id"),
                              lab_id1)

    def test_get_lab_with_given_lab_id_and_lab_name(self):
         print "test_get_lab_with_given_lab_id_and_labname"
         lab_name1="Computer Programming"
         lab_id1="CSE01"
         overview="overview"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name,
                              institute_id=institute_id,
                              assets=[asset])
         inst.save()

         discipline_name = "computer science"
         discipline_id = "cse"
         discipline = Discipline(discipline_name=discipline_name,
                                discipline_id=discipline_id,
                                assets=[asset])
         discipline.save()

         integration_level = 4
         integration_status = IntegrationStatus\
           (integration_level=integration_level)
         integration_status.save()

         dev_name = Name(name="Mohit Tahiliani")
         dev_name.save()
         email_id = Email(email="mohit.tahiliani@gmail.com")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev.save()

         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         host = HostingInfo(hosting_status=hosting_status,
                                hosted_url=hosted_url,
                                hosted_on=hosted_on)
         host.save()

         name = "Theory"
         section = Section(name=name)
         section.save()

         phase1=Phase(phase_id=1)
         phase1.save()

         lab1 = Lab(lab_name=lab_name1, lab_id=lab_id1,
                        overview=overview,
                        institute=inst,
                        discipline=discipline, 
                        hosting_info=[host], assets=[asset],
                        experiments=[], developers=[dev],
                        sections=[section], phase=[phase1], 
                        integration_status=integration_status)
         lab1.save()

         lab_name2="Data Structures"
         lab_id2="CSE02"

         lab2 = Lab(lab_name=lab_name2, lab_id=lab_id2,
                        overview=overview, 
                        institute=inst,
                        discipline=discipline,
                        assets=[asset],
                        experiments=[],
                        integration_status=integration_status,
                        developers=[dev],
                        sections=[section], phase=[phase1],
                        hosting_info=[host])
         lab2.save()

         labs_list = self.persistence_delegate.\
           get_labs(lab_id=lab_id1, lab_name=lab_name1)

         self.assertEqual(labs_list[0].get("lab_id"),
                              lab_id1)

    def test_get_lab_with_given_institute(self):
         print "test_get_lab_with_given_institute"

         lab_name1="Computer Programming"
         lab_id1="CSE01"
         overview="overview"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name,
                              institute_id=institute_id,
                              assets=[asset])
         inst.save()

         discipline_name = "IIT Kanpur"
         discipline_id = "IITK"
         discipline = Discipline(discipline_name=discipline_name,
                                discipline_id=discipline_id,
                                assets=[asset])
         discipline.save()

         integration_level = 4
         integration_status = IntegrationStatus\
           (integration_level=integration_level)
         integration_status.save()

         dev_name = Name(name="Mohit Tahiliani")
         dev_name.save()
         email_id = Email(email="mohit.tahiliani@gmail.com")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev.save()

         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         host = HostingInfo(hosting_status=hosting_status,
                                hosted_url=hosted_url,
                                hosted_on=hosted_on)
         host.save()

         name = "Theory"
         section = Section(name=name)
         section.save()

         phase1=Phase(phase_id=1)
         phase1.save()

         lab1 = Lab(lab_name=lab_name1, lab_id=lab_id1,
                        overview=overview,
                        institute=inst,
                        discipline=discipline, 
                        hosting_info=[host], assets=[asset],
                        experiments=[], developers=[dev],
                        sections=[section], phase=[phase1], 
                        integration_status=integration_status)
         lab1.save()

         lab_name2="Data Structures"
         lab_id2="CSE02"

         lab2 = Lab(lab_name=lab_name2, lab_id=lab_id2,
                        overview=overview, 
                        institute=inst,
                        discipline=discipline,
                        assets=[asset],
                        experiments=[], phase=[phase1],
                        integration_status=integration_status,
                        developers=[dev],
                        sections=[section],
                        hosting_info=[host])
         lab2.save()

         labs_list = self.persistence_delegate.\
           get_labs(institute=inst)

         self.assertEqual(labs_list[0].get("institute").\
                              get("institute_id"),
                              lab1.get("institute").\
                              get("institute_id"))

   def test_get_lab_with_given_phase(self):
         print "test_get_lab_with_given_phase"

         lab_name1="Computer Programming"
         lab_id1="CSE01"
         overview="overview"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name,
                              institute_id=institute_id,
                              assets=[asset])
         inst.save()

         discipline_name = "IIT Kanpur"
         discipline_id = "IITK"
         discipline = Discipline(discipline_name=discipline_name,
                                discipline_id=discipline_id,
                                assets=[asset])
         discipline.save()

         integration_level = 4
         integration_status = IntegrationStatus\
           (integration_level=integration_level)
         integration_status.save()
        dev_name = Name(name="Mohit Tahiliani")
         dev_name.save()
         email_id = Email(email="mohit.tahiliani@gmail.com")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev.save()

         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         host = HostingInfo(hosting_status=hosting_status,
                                hosted_url=hosted_url,
                                hosted_on=hosted_on)
         host.save()

         name = "Theory"
         section = Section(name=name)
         section.save()

         phase1=Phase(phase_id=1)
         phase1.save()

         lab1 = Lab(lab_name=lab_name1, lab_id=lab_id1,
                        overview=overview,
                        institute=inst,
                        discipline=discipline,
                        hosting_info=[host], assets=[asset],
                        experiments=[], developers=[dev],
                        sections=[section], phase=[phase1],
                        integration_status=integration_status)
         lab1.save()

         lab_name2="Data Structures"
         lab_id2="CSE02"

         lab2 = Lab(lab_name=lab_name2, lab_id=lab_id2,
                        overview=overview,
                        institute=inst,
                        discipline=discipline,
                        assets=[asset],
                        experiments=[], phase=[phase1],
                        integration_status=integration_status,
                        developers=[dev],
                        sections=[section],
                        hosting_info=[host])
         lab2.save()

         labs_list = self.persistence_delegate.\
           get_labs(phase=phase1)

         self.assertEqual(labs_list[0].get("phase")[0].\
                              get("phase_id"),
                              phase1.get("phase_id"))


#+END_SRC


*** Get Institutes
    This function returns all institutes if present in the database.  If institutes are
    not present, =None= type is returned.
#+NAME: persistence_get_institutes
#+BEGIN_SRC python
    def get_institutes(self, **kwargs):
        current_app.logger.debug("")
        ret_val = None
        try:
            current_app.logger.debug("running operation get institutes")
            ret_val = Institute.apply_filters(**kwargs)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            ret_val = None
        
        return ret_val

#+END_SRC

****  Tests
#+NAME: test_persistence_get_institutes
#+BEGIN_SRC python
    def test_get_institutes(self):
         print "test_get_institutes"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Delhi"
         institute_id = "IITD"
         inst = Institute(institute_name=institute_name, institute_id=institute_id,
                              assets=[asset])                             
         inst.save()
         inst_obj = self.persistence_delegate.get_institute(institute_name=
                                                inst.get("institute_name"))

         insts_list = self.persistence_delegate.get_institutes(institute_id=
                                                inst.get("institute_id"),
                                                institute_name=
                                                inst.get("institute_name"))

         self.assertEqual(insts_list[0].get("institute_name"),
                              inst.get("institute_name"))
         self.assertEqual(insts_list[0].get("institute_id"), inst.get("institute_id"))

#+END_SRC


*** Get HostingInfo
    This function returns hosting_info if present in the database. If the hosting_info is
    not present, =None= type is returned.
#+NAME: persistence_get_hosting_info
#+BEGIN_SRC python
    def get_hosting_info(self, **kwargs):
        current_app.logger.debug("running get hostinginfo operation")
        current_app.logger.debug("completed get hostinginfo operation")
        return self.get_object(HostingInfo, **kwargs)

#+END_SRC
**** Tests

#+NAME: test_persistence_get_hosting_info
#+BEGIN_SRC python
    def test_get_hosting_info(self):
         print "test_get_hosting_info"

         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         host = HostingInfo(hosting_status=hosting_status,
                                hosted_url=hosted_url,
                                hosted_on=hosted_on)
         host.save()
         host_obj = self.persistence_delegate.get_hosting_info(hosting_status=
                                                host.get("hosting_status"))

         host_obj1 = self.persistence_delegate.get_hosting_info(hosted_url=
                                                host.get("hosted_url"))

         host_obj2 = self.persistence_delegate.get_hosting_info(hosted_on=
                                                host.get("hosted_on"))

         self.assertEqual(host_obj.get("hosting_status"),
                              host.get("hosting_status"))
         self.assertEqual(host_obj1.get("hosted_url"), host.
                              get("hosted_url"))
         self.assertEqual(host_obj2.get("hosted_on"), host.
                              get("hosted_on"))

#+END_SRC


*** Get IntegrationStatus
    This function returns integration_status if present in the database. If the integration_status is
    not present, =None= type is returned.
#+NAME: persistence_get_integration_status
#+BEGIN_SRC python
    def get_integration_status(self, **kwargs):
        current_app.logger.debug("running get instegration status operation")
        current_app.logger.debug("completed get integration status operation")
        return self.get_object(IntegrationStatus, **kwargs)

#+END_SRC

**** Tests
#+NAME: test_persistence_get_integration_status
#+BEGIN_SRC python
    def test_get_integration_status(self):
         print "test_get_integration_status"

         integration_level = 4
         intstatus = IntegrationStatus(integration_level=integration_level)
         intstatus.save()
         intstatus_obj = self.persistence_delegate.get_integration_status\
         (integration_level=intstatus.get("integration_level"))

         self.assertEqual(intstatus_obj.get("integration_level"),
                              intstatus.get("integration_level"))

#+END_SRC


*** Get Assets
    This function returns all assets if present in the database.  If assets are
    not present, =None= type is returned.
#+NAME: persistence_get_assets
#+BEGIN_SRC python
    def get_assets(self, **kwargs):
        current_app.logger.debug("")
        ret_val = None
        try:
            current_app.logger.debug("running operation get assets")
            ret_val = Asset.apply_filters(**kwargs)
        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            ret_val = None
        
        return ret_val

#+END_SRC

****  Tests
#+NAME: test_persistence_get_assets
#+BEGIN_SRC python
    def test_get_assets(self):
         print "test_get_assets"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/static/images/logo.png"
         asset = Asset(path=path, asset_type=asset_type)     
         asset.save()
         asset_obj = self.persistence_delegate.get_asset(asset_type=
                                                asset.get("asset_type"))

         assets_list = self.persistence_delegate.get_assets(path=
                                                asset.get("path"),
                                                asset_type=
                                                asset.get("asset_type"))

         self.assertEqual(assets_list[0].get("asset_type"),
                              asset.get("asset_type"))
         self.assertEqual(assets_list[0].get("path"), asset.get("path"))

#+END_SRC


*** Get Phase
    This function returns a phase if present in the database.  If the phase is
    not present, =None= type is returned.
#+NAME: persistence_get_phase
#+BEGIN_SRC python
    def get_phase(self, **kwargs):
        return self.get_object(Phase, **kwargs)

#+END_SRC

**** Tests
#+NAME: test_persistence_get_phase
#+BEGIN_SRC python
    def test_get_phase(self):
         print "test_get_phase"
         phase1 = Phase(phase_id=1)
         phase1.save()

         phase_obj = self.persistence_delegate.get_phase\
           (phase_id=phase1.get("phase_id"))
         self.assertEqual(phase_obj.get("phase_id"),
                              phase1.get("phase_id"))

#+END_SRC



*** Get Lab By ID
    This function returns a lab object by an ID if present in database,
    otherwise, =None= type is returned.
#+NAME: persistence_get_lab_by_id
#+BEGIN_SRC python
    def get_lab_by_id(self, id):
        ret_val = None
        try:
            current_app.logger.debug("running operation get"
                                     " lab by ID = %s" % id)
            ret_val = Lab.get_by_id(id)
        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            ret_val = None
        
        return ret_val

#+END_SRC

****  Tests
#+NAME: test_persistence_get_lab_by_id
#+BEGIN_SRC python
    def test_get_lab_by_id(self):
         print "test_persistence_get_lab_by_id"

         lab_name1="Computer Programming"
         lab_id1="CSE01"
         overview="overview"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name,
                              institute_id=institute_id,
                              assets=[asset])
         inst.save()

         discipline_name = "IIT Kanpur"
         discipline_id = "IITK"
         discipline = Discipline(discipline_name=discipline_name,
                                discipline_id=discipline_id,
                                assets=[asset])
         discipline.save()

         integration_level = 4
         integration_status = IntegrationStatus\
           (integration_level=integration_level)
         integration_status.save()

         dev_name = Name(name="Mohit Tahiliani")
         dev_name.save()
         email_id = Email(email="mohit.tahiliani@gmail.com")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev.save()

         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         host = HostingInfo(hosting_status=hosting_status,
                                hosted_url=hosted_url,
                                hosted_on=hosted_on)
         host.save()

         name = "Theory"
         section = Section(name=name)
         section.save()

         phase1=Phase(phase_id=1)
         phase1.save()

         lab = Lab(lab_name=lab_name1, lab_id=lab_id1,
                       overview=overview, 
                       institute=inst,
                       discipline=discipline, 
                       hosting_info=[host], assets=[asset],
                       experiments=[], developers=[dev],
                       sections=[section], phase=[phase1], 
                       integration_status=integration_status)
         lab.save()

         lab_obj = self.persistence_delegate.get_lab_by_id(1)
         self.assertEqual(lab_obj.get("lab_id"),
                              lab_id1)
         self.assertEqual(lab_obj.get("lab_name"), lab_name1)

#+END_SRC



*** Get Experiment By ID
    This function returns a experiment object by an ID if present in database,
    otherwise, =None= type is returned.

#+NAME: persistence_get_experiment_by_id
#+BEGIN_SRC python
    def get_experiment_by_id(self, id):
        ret_val = None
        try:
            current_app.logger.debug("running operation get"
                                     " experiment by ID = %s" % id)
            ret_val = Experiment.get_by_id(id)
        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            ret_val = None
        
        return ret_val

#+END_SRC

****  Tests
#+NAME: test_persistence_get_experiment_by_id
#+BEGIN_SRC python
    def test_get_experiment_by_id(self):
         print "test_persistence_get_experiment_by_id"

         hosting_status = "hosted"
         hosted_url = "http://cse14-iiith.vlabs.ac.in"
         hosted_on = "cloud"
         host = HostingInfo(hosting_status=hosting_status,
                                hosted_url=hosted_url,
                                hosted_on=hosted_on)
         host.save()

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name, institute_id=institute_id, assets=[asset])
         inst.save()

         discipline_name = "IIT Kanpur"
         discipline_id = "IITK"
         discipline = Discipline(discipline_name=discipline_name, discipline_id=discipline_id,
                                     assets=[asset])
         discipline.save()

         dev_name = Name(name="Mohit Tahiliani")
         dev_name.save()
         email_id = Email(email="mohit.tahiliani@gmail.com")
         email_id.save()
         dev = Developer(name=dev_name, email=email_id)
         dev.save()

         exp_name = "Number Systems"
         exp_id = "EE99777"
         overview = "overview"

         integration_level = 4
         integration_status = IntegrationStatus(integration_level=
                                                    integration_level)
         integration_status.save()
        
         exp = Experiment(exp_name=exp_name, exp_id=exp_id,
                              overview=overview, sections=[],
                         institute=inst, discipline=discipline, 
                              integration_status=integration_status,
                              assets=[asset], developers=[dev],
                              hosting_info=[host])
         exp.save()

         exp_obj = self.persistence_delegate.get_experiment_by_id(1)
         self.assertEqual(exp_obj.get("exp_id"),
                              exp_id)
         self.assertEqual(exp_obj.get("exp_name"), exp_name)

#+END_SRC


*** Get Institute By ID
    This function returns an institute object by an ID if present in database,
    otherwise, =None= type is returned.

#+NAME: persistence_get_institute_by_id
#+BEGIN_SRC python
    def get_institute_by_id(self, id):
        ret_val = None
        try:
            current_app.logger.debug("running operation get"
                                     " institute by ID = %s" % id)
            ret_val = Institute.get_by_id(id)
        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            ret_val = None
        
        return ret_val

#+END_SRC

****  Tests
#+NAME: test_persistence_get_institute_by_id
#+BEGIN_SRC python
    def test_get_institute_by_id(self):
         print "test_persistence_get_institute_by_id"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         institute_name = "IIT Kanpur"
         institute_id = "IITK"
         inst = Institute(institute_name=institute_name, institute_id=institute_id,
                              assets=[asset])      
         inst.save()

         inst_obj = self.persistence_delegate.get_institute_by_id(1)
         self.assertEqual(inst_obj.get("institute_id"), institute_id)
         self.assertEqual(inst_obj.get("institute_name"), institute_name)

#+END_SRC


*** Get Discipline By ID
    This function returns an discipline object by an ID if present in database,
    otherwise, =None= type is returned.

#+NAME: persistence_get_discipline_by_id
#+BEGIN_SRC python
    def get_discipline_by_id(self, id):
        ret_val = None
        try:
            current_app.logger.debug("running operation get"
                                     " discipline by ID = %s" % id)
            ret_val = Discipline.get_by_id(id)
        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            ret_val = None
        
        return ret_val

#+END_SRC

****  Tests
#+NAME: test_persistence_get_discipline_by_id
#+BEGIN_SRC python
    def test_get_discipline_by_id(self):
         print "test_persistence_get_discipline_by_id"

         asset_type = AssetType(asset_type="Image")
         asset_type.save()

         path = "vlabs.ac.in/images/static/logo.png"
         asset = Asset(asset_type=asset_type, path=path)
         asset.save()

         discipline_name = "IIT Delhi"
         discipline_id = "EEE08"
         dis = Discipline(discipline_name=discipline_name,
                              discipline_id=discipline_id, assets=[asset])
         dis.save()

         dis_obj = self.persistence_delegate.get_discipline_by_id(1)
         self.assertEqual(dis_obj.get("discipline_id"), discipline_id)
         self.assertEqual(dis_obj.get("discipline_name"), discipline_name)

#+END_SRC


*** Update Name
    This function updates existing name.
#+NAME: persistence_update_name
#+BEGIN_SRC python
    def update_name(self, name, n_name):
        name.set(name=n_name)
        name.save()
        return name

#+END_SRC

**** Tests

#+NAME: test_persistence_update_name
#+BEGIN_SRC python
    def test_update_name(self):
         print "test_update_name"
         n_name = "Prof. Dharamraj"
         name = Name(name=n_name)
         name1 = self.persistence_delegate.add_name(name)
         n_name1 = "Prof. Dharam"         
         name2 = self.persistence_delegate.update_name\
           (name1, n_name1)
         name2 = Name.get_by_id(1)
         self.assertEqual(name2.get("name"), n_name1)

#+END_SRC



* Infra                                                         :boilerplate:

** sources
*** Imports 

#+name: imports_for_persistence_delegate
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.persistence.entities import *
from runtime.exceptions.custom_exceptions import *
from flask import current_app, abort

#+end_src


** Tests
*** Imports 

#+name: imports_for_tests_persistence
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from runtime.rest.app import create_app
from runtime.system.persistence_delegate import *


config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }
#+end_src


*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangling                                                      :boilerplate:
  
** sources
   
#+BEGIN_SRC python :tangle persistence_delegate.py :eval no :noweb yes
<<imports_for_persistence_delegate>>
<<class_persistence_delegate>>
<<persistence_key_exists>>
<<persistence_get_object>>

<<persistence_get_lab>>
<<persistence_get_section>>
<<persistence_get_experiment>>
<<persistence_get_institute>>
<<persistence_get_discipline>>
<<persistence_get_hosting_info>>
<<persistence_get_asset>>
<<persistence_get_integration_status>>
<<persistence_discipline_exists>>
<<persistence_add_discipline>>
<<persistence_delete_discipline>>
<<persistence_update_discipline>>

<<persistence_get_labs>>
<<persistence_get_institutes>>
<<persistence_get_assets>>

<<persistence_lab_exists>>
<<persistence_asset_type_exists>>
<<persistence_section_exists>>
<<persistence_experiment_exists>>
<<persistence_institute_exists>>
<<persistence_name_exists>>
<<persistence_email_exists>>
<<persistence_developer_exists>>
<<persistence_hosting_info_exists>>
<<persistence_asset_exists>>
<<persistence_integration_status_exists>>
<<persistence_phase_exists>>

<<persistence_add_lab>>
<<persistence_add_experiment>>
<<persistence_add_section>>
<<persistence_add_institute>>
<<persistence_add_hosting_info>>
<<persistence_add_asset_type>>
<<persistence_add_asset>>
<<persistence_add_integration_status>>

<<persistence_delete_lab>>
<<persistence_delete_section>>
<<persistence_delete_experiment>>
<<persistence_delete_institute>>
<<persistence_delete_hosting_info>>
<<persistence_delete_asset>>
<<persistence_delete_integration_status>>

<<persistence_update_lab>>
<<persistence_update_section>>
<<persistence_update_experiment>>
<<persistence_update_institute>>
<<persistence_update_hosting_info>>
<<persistence_update_asset>>

<<persistence_get_lab_by_id>>
<<persistence_get_experiment_by_id>>
<<persistence_get_institute_by_id>>
<<persistence_get_discipline_by_id>>
<<persistence_get_asset_by_path>>

<<persistence_add_experiments_to_lab>>
<<persistence_add_assets_to_lab>>
<<persistence_add_sections_to_experiment>>
<<persistence_add_labs_to_institute>>

<<persistence_add_name>>
<<persistence_add_email>>
<<persistence_add_developer>>
<<persistence_add_phase>>

<<persistence_update_developer>>

<<persistence_delete_name>>
<<persistence_delete_email>>
<<persistence_delete_developer>>
<<persistence_delete_phase>>

<<persistence_get_name>>
<<persistence_get_email>>
<<persistence_get_developer>>
<<persistence_get_asset_type>>
<<persistence_update_name>>
<<persistence_get_phase>>
#+end_src


** tests
#+BEGIN_SRC python :tangle test_persistence_delegate.py :eval no :noweb yes
<<imports_for_tests_persistence>>
<<test_class_persistence_delegate>>

<<test_persistence_get_lab>>
<<test_persistence_get_section>>
<<test_persistence_get_experiment>>
<<test_persistence_get_institute>>
<<test_persistence_get_discipline>>
<<test_persistence_get_hosting_info>>
<<test_persistence_get_asset>>
<<test_persistence_get_integration_status>>

<<test_persistence_get_labs>>
<<test_persistence_get_institutes>>
<<test_persistence_get_assets>>

<<test_persistence_lab_exists>>
<<test_persistence_experiment_exists>>
<<test_persistence_section_exists>>
<<test_persistence_name_exists>>
<<test_persistence_email_exists>>
<<test_persistence_developer_exists>>
<<test_persistence_institute_exists>>
<<test_persistence_discipline_exists>>
<<test_persistence_hosting_info_exists>>
<<test_persistence_asset_exists>>
<<test_persistence_phase_exists>>
<<test_persistence_integration_status_exists>>

<<test_persistence_add_lab>>
<<test_persistence_add_section>>
<<test_persistence_add_experiment>>
<<test_persistence_add_institute>>
<<test_persistence_add_discipline>>
<<test_persistence_add_hosting_info>>
<<test_persistence_add_asset>>
#<<test_persistence_add_asset_type>>
<<test_persistence_add_integration_status>>
<<test_persistence_add_phase>>

<<test_persistence_delete_lab>>
<<test_persistence_delete_section>>
<<test_persistence_delete_experiment>>
<<test_persistence_delete_institute>>
<<test_persistence_delete_discipline>>
<<test_persistence_delete_hosting_info>>
<<test_persistence_delete_asset>>
<<test_persistence_delete_integration_status>>

<<test_persistence_update_lab>>
<<test_persistence_update_experiment>>
<<test_persistence_update_section>>
<<test_persistence_update_institute>>
<<test_persistence_update_discipline>>
<<test_persistence_update_hosting_info>>
<<test_persistence_update_asset>>

<<test_persistence_get_lab_by_id>>
<<test_persistence_get_experiment_by_id>>
<<test_persistence_get_institute_by_id>>
<<test_persistence_get_discipline_by_id>>
<<test_persistence_get_asset_by_path>>

<<test_persistence_add_experiments_to_lab>>
#<<test_persistence_add_assets_to_lab>>
<<test_persistence_add_sections_to_experiment>>
#<<test_persistence_add_labs_to_institute>>

<<test_persistence_add_name>>
<<test_persistence_add_email>>
<<test_persistence_add_developer>>

<<test_persistence_update_developer>>

<<test_persistence_delete_name>>
<<test_persistence_delete_email>>
<<test_persistence_delete_developer>>
<<test_persistence_delete_phase>>

<<test_persistence_get_phase>>
<<test_persistence_get_name>>
<<test_persistence_get_email>>
<<test_persistence_get_developer>>
<<test_persistence_update_name>>
<<run_test_cases>>

#+end_src

