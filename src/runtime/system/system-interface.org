#+TITLE: System Interface implementation for LDS
#+AUTHOR: VLEAD
#+DATE: [2016-07-22 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction
  System Interface is the glue that between the =rest= and =system=.  The world
  of =rest= uses =json= and the world of =system= uses objects.  System
  Interface allows these two worlds to talk to each other. 
  
  
* The =SystemInterface= class

** Constructor
#+NAME: class_system_interface
#+begin_src python
class SystemInterface ():

    def __init__(self):
        raise Error('Can not instantiate')

    @staticmethod
    def initialize(cls):
        System.initialize_system(cls)

#+end_src


** Add Lab
#+NAME: class_add_lab
#+begin_src python
    @staticmethod
    def add_lab(data_dict):
        session_cls = System.delegate.entities['session']
        lab_cls = System.delegate.entities['lab']
        exp_cls = System.delegate.entities['experiment']
        name_cls = System.delegate.entities['name']
        phase_cls = System.delegate.entities['phase']
        email_cls = System.delegate.entities['email']
        developer_cls = System.delegate.entities['developer']
        asset_cls = System.delegate.entities['asset']
        asset_type_cls = System.delegate.entities['asset_type']
        section_cls = System.delegate.entities['section']
        hosting_info_cls = System.delegate.entities['hosting_info']

        session = session_cls(key=data_dict['key'])
        del(data_dict['key'])

        section_list=data_dict['lab']['sections']        
        section_obj_list=[]
        for section_x in section_list:
            section = System.do("get_section", name=section_x['name'])
            if section is None:
                section = section_cls(name=str(section_x))
                section = System.do("add_section", section=section, session=session)
            section_obj_list.append(section)


        experiments=data_dict['lab']['experiments']
        exp_list = []
        for e_id in experiments:
            experiment = System.do("get_experiment", exp_id=e_id)
            exp_list.append(experiment)

        institute_id = data_dict['lab']['institute_id']
        institute = System.do("get_institute", institute_id=institute_id)

        integration_level = data_dict['lab']['integration_level']
        integration_status = System.do("get_integration_status",
                                           integration_level=integration_level)

        discipline_id = data_dict['lab']['discipline_id']
        discipline = System.do("get_discipline", discipline_id=discipline_id)

        assets = data_dict['lab']['assets']
        asset_list = []
        for asset_x in assets:
            asset_type = asset_type_cls(asset_type=str(asset_x['asset_type']))
            asset = System.do("get_asset", path=asset_x['path'])
            if asset is None:
                asset_type = asset_type_cls(asset_type=\
                                                str(asset_x['asset_type']))
                asset = asset_cls(asset_type=asset_type, \
                                      path=str(asset_x['path']))
                asset = System.do("add_asset", asset=asset, session=session)
            asset_list.append(asset)
 
        developers = data_dict['lab']['developers']
        developer_list = []
        for developer_x in developers:
            name = name_cls(name=developer_x['name'])
            email = email_cls(email=developer_x['email'])
            developer = System.do("get_developer",
                                      email=email)
            if developer is None:
                developer = developer_cls(name=name,
                                              email=email)
                developer = System.do("add_developer",
                                        developer=developer,
                                        session=session)
            developer_list.append(developer)

        phase = data_dict['lab']['phase']
        phase_list = []
        for phase_x in phase:
            phase = phase_cls(phase_id=\
                                  phase_x['phase_id'])

            phase = System.do("get_phase", phase=phase)
            if phase is None:
                phase = phase_cls(phase_id=
                                      phase_x['phase_id'])
                phase = System.do("add_phase", phase=phase,
                                      session=session)
            phase_list.append(phase)

        hosting_info = data_dict['lab']['hosting_info']
        hosting_info_list = []
        for hosting_info_x in hosting_info:
            hosting_info = System.do("get_hosting_info",
                    hosted_url=hosting_info_x['hosted_url'])
            if hosting_info is None:
                hosting_info = hosting_info_cls\
                  (hosting_status=\
                    str(hosting_info_x['hosting_status']), \
                  hosted_url=str(hosting_info_x\
                                     ['hosted_url']),
                hosted_on=str(hosting_info_x['hosted_on']))
                hosting_info = System.do("add_hosting_info",
                                hosting_info=hosting_info,
                                        session=session)
            hosting_info_list.append(hosting_info)

        lab = lab_cls(lab_name=data_dict['lab']['name'],
                                lab_id=data_dict['lab']['id'],
                                overview=data_dict['lab']['overview'],
                                institute=institute,
                                integration_status=integration_status,
                                discipline=discipline,
                                assets=asset_list,
                                experiments=exp_list,
                                developers=developer_list,
                                phase=phase_list,
                                sections=section_obj_list,
                                hosting_info=hosting_info_list)
        try:
            current_app.logger.debug("running operation add_lab")
            lab = System.do("add_lab", lab=lab, session=session)
            current_app.logger.debug("completed operation add_lab")
            return lab.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+end_src

*** TestAddLab
 #+NAME: test_class_add_lab
 #+BEGIN_SRC python
class TestAddLab(TestCase):
   TESTING = True
   def create_app(self):
       app = create_app(config)
       return app

   def setUp(self):
       app = self.create_app()
       self.app_context = app.app_context()
       self.app_context.push()
       db.create_all()

   def tearDown(self):
       self.app_context.pop()
       db.session.remove()
       db.drop_all()

   def test_add_lab_in_system_interface(self):
       print "test_add_lab_in_system_interface"

       data_dict = {
		   'key' : KEY,
		   'integration_level': 4
		   }

       integration_status = SystemInterface.add_integration_status(data_dict)

       data_dict = {
		   'key' : KEY,
		   'asset_type': 'Image',
		   'path': 'vlabs.ac.in/images/static/logo.png'
		  }

       asset = SystemInterface.add_asset(data_dict)

       data_dict = {
		   'key' : KEY,
		   'hosting_status': 'hosted',
		   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
		   'hosted_on': 'cloud'
		  }

       hosting_info = SystemInterface.add_hosting_info(data_dict)

       data_dict = {
		   'key' : KEY,
		   'institute_name': 'IIT Kanpur',
		   'institute_id': 'IITK',
		   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

		   }

       institute = SystemInterface.add_institute(data_dict)

       data_dict = {
		   'key' : KEY,
		   'discipline_name': 'computer science',
		   'discipline_id': 'CSE',
		   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

		  }

       discipline = SystemInterface.add_discipline(data_dict)

       data_dict = {
		   'key' : KEY,
		   'name': 'Prof. Dharamaja',
		   'email': 'abc@gmail.com',
		   'institute_id': 'IITK',
		   'discipline_id': 'CSE'
		  }

       developer = SystemInterface.add_developer(data_dict)


       data_dict = {
		   "key": KEY,
                   "experiment": {
                     "id": "exp123",
                     "name": "arrays",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "overview": "This experiments describes about parallel and distributed processing",
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       "Introduction",
                       "Objective",
                       "Tutorial",
                       "Illustration",
                       "Experiment",
                       "Observations",
                       "Assignment",
                       "References"
                     ]
                   }
                 }


       experiment = SystemInterface.add_experiment(data_dict)


       data_dict = {
		   "key" : KEY,
                   "lab": {
                     "id": "cse02",
                     "name": "Computer Programming",
                     "overview": "overview",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "experiments": [
                           "exp123"
                         ],
                     "sections": [
                       {
                         "name": "Procedure"
                       }
                     ]
                   }
                 }

       lab = SystemInterface.add_lab(data_dict)
       lab_cls = System.delegate.entities['lab']
       lab = lab_cls.get_all()[0]

       self.assertEqual(lab.get("lab_name"), data_dict['lab']['name'])
       self.assertEqual(lab.get("lab_id"), data_dict['lab']['id'])
       self.assertEqual(lab.get("institute").get("institute_id"),
			    data_dict['lab']['institute_id'])
       self.assertEqual(lab.get("integration_status").get("integration_level"),
			    data_dict['lab']['integration_level'])
       self.assertEqual(lab.get("discipline").get("discipline_id"),
			    data_dict['lab']['discipline_id'])
       self.assertEqual(lab.get("assets")[0].get("path"),
			    'vlabs.ac.in/images/static/logo.png')
       self.assertEqual(lab.get("hosting_info")[0].get("hosted_url"),
			    'http://cse14-iiith.vlabs.ac.in')
       self.assertEqual(lab.get("experiments")[0].get("exp_name"), 'arrays')
       self.assertEqual(lab.get("experiments")[0].get("exp_id"), 'exp123')
       self.assertEqual(lab.get("developers")[0].get("email").get("email"),
                            'xyz@gmail.com')
       self.assertEqual(lab.get("developers")[1].get("email").get("email"),
                            'abc@gmail.com')
       self.assertEqual(str(lab.get("sections")[0].get("name")),
                            str(data_dict['lab']['sections'][0]))


   def test_add_lab_raises_type_error_in_system_interface(self):
       print "test_add_lab_raises_type_error_in_system_interface"

       data_dict = {
		   'key' : KEY,
		   'integration_level': 4
		   }

       integration_status = SystemInterface.add_integration_status(data_dict)

       data_dict = {
		   'key' : KEY,
		   'asset_type': 'Image',
		   'path': 'vlabs.ac.in/images/static/logo.png'
		  }

       asset = SystemInterface.add_asset(data_dict)

       data_dict = {
		   'hosting_status': 'hosted',
		   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
		   'hosted_on': 'cloud',
		   'key' : KEY
		  }

       hosting_info = SystemInterface.add_hosting_info(data_dict)

       data_dict = {
		   'key' : KEY,
		   'institute_name': 'IIT Kanpur',
		   'institute_id': 'IITK',
		   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

		   }

       institute = SystemInterface.add_institute(data_dict)

       data_dict = {
		   'key' : KEY,
		   'discipline_name': 'computer science',
		   'discipline_id': 'CSE',
		   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

		  }

       discipline = SystemInterface.add_discipline(data_dict)

       data_dict = {
		   'key' : KEY,
		   'name': 'Prof. Dharamaja',
		   'email': 'abc@gmail.com'
		  }

       developer = SystemInterface.add_developer(data_dict)
       
       data_dict = {
		   'key' : KEY,
		   'name': 'Procedure'
		  }

       section = SystemInterface.add_section(data_dict)

       data_dict = {
		   "key": KEY,
                   "experiment": {
                     "id": "exp123",
                     "name": "arrays",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "overview": "This experiments describes about parallel and distributed processing",
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       "Introduction",
                       "Objective",
                       "Tutorial",
                       "Illustration",
                       "Procedure",
                       "Experiment",
                       "Observations",
                       "Assignment",
                       "References"
                     ]
                   }
                 }

       experiment = SystemInterface.add_experiment(data_dict)

       data_dict = {
           "key" : KEY,     
	   "lab": {
	       "id": "cse02",
	       "name": "Computer Programming",
               "overview": "overview",
	       "discipline_id": "CSE",
	       "institute_id": "IIITH",
               "phase":[{"phase_id":1,  "phase_id":2}],
	       "developers": [
		   {
		       "name": "Dinesh Malviya",
		       "email": "xyz@gmail.com"
		   },
		   {
		       "name": "Ashish Ahuja",
		       "email": "abc@gmail.com"
		   }
	       ],
	       "hosting_info": [
		   {
		       "hosting_status": "hosted",
		       "hosted_on": "cloud",
		       "hosted_url": "http://cse14-iiith.vlabs.ac.in"
		   },
		   {
		       "hosting_status": "hosted",
		       "hosted_on": "college-cloud",
		       "hosted_url": "http://cse14-iiith.ac.in"
		   }
	       ],
	       "integration_level": 4,
	       "assets": [
		   {
		       "asset_type": "image",
		       "path": "vlabs.ac.in/images/static/logo.png"
		   },
		   {
		       "asset_type": "video",
		       "path": "vlabs.ac.in/video/abc.mkv"
		   }
	       ],
	       "experiments": [
		       "exp123"
	       ],

	       "sections": [
		   {
		       "name": "Procedure"
		   }
		   
		   
	       ]
	   }
       }


       with self.assertRaises(TypeError):
	   SystemInterface.add_lab(data_dict)

 #+END_SRC

 
** Add Experiment
#+NAME: class_add_experiment
#+begin_src python
    @staticmethod
    def add_experiment(data_dict):
        session_cls = System.delegate.entities['session']
        section_cls = System.delegate.entities['section']
        experiment_cls = System.delegate.entities['experiment']
        institute_cls = System.delegate.entities['institute']
        discipline_cls = System.delegate.entities['discipline']
        developer_cls = System.delegate.entities['developer']
        name_cls = System.delegate.entities['name']
        email_cls = System.delegate.entities['email']
        hosting_info_cls = System.delegate.entities['hosting_info']
        asset_cls = System.delegate.entities['asset']
        asset_type_cls = System.delegate.entities['asset_type']
        session = session_cls(key=data_dict['key'])
        del(data_dict['key'])

        sections = data_dict['experiment']['sections']
        section_list = []
        for section_x in sections:
            section = System.do("get_section", name=section_x)
            if section is None:
                section = section_cls(name=str(section_x))
                section = System.do("add_section", section=section, session=session)
            section_list.append(section)

        institute_id = data_dict['experiment']['institute_id']
        institute = System.do("get_institute", institute_id=institute_id)

        discipline_id = data_dict['experiment']['discipline_id']
        discipline = System.do("get_discipline", discipline_id=discipline_id)

        integration_level = data_dict['experiment']['integration_level']
        integration_status = System.do("get_integration_status",
                                           integration_level=integration_level)

        assets = data_dict['experiment']['assets']
        asset_list = []
        for asset_x in assets:
            asset = System.do("get_asset", path=asset_x['path'])
            if asset is None:
                asset_type = asset_type_cls(asset_type=\
                                                str(asset_x['asset_type']))
                asset = asset_cls(asset_type=asset_type, \
                                      path=str(asset_x['path']))
                asset = System.do("add_asset", asset=asset, session=session)
            asset_list.append(asset)

        developers = data_dict['experiment']['developers']
        developer_list = []
        for developer_x in developers:
            name = name_cls(name=developer_x['name'])
            email = email_cls(email=developer_x['email'])
            developer = System.do("get_developer", email=email)
            if developer is None:
                developer = developer_cls(name=name, email=email)
                developer = System.do("add_developer", developer=developer,
                                          session=session)
            developer_list.append(developer)

        hosting_info = data_dict['experiment']['hosting_info']
        hosting_info_list = []
        for hosting_info_x in hosting_info:
            hosting_info = System.do("get_hosting_info", hosted_url=hosting_info_x['hosted_url'])
            if hosting_info is None:
                hosting_info = hosting_info_cls(hosting_status=str(hosting_info_x['hosting_status']), \
                                      hosted_url=str(hosting_info_x['hosted_url']), hosted_on=str(hosting_info_x['hosted_on']))
                hosting_info = System.do("add_hosting_info", hosting_info=hosting_info, session=session)
            hosting_info_list.append(hosting_info)

        experiment = experiment_cls(exp_name=data_dict['experiment']['name'],
                                exp_id=data_dict['experiment']['id'],
                                overview=data_dict['experiment']['overview'],
                                sections=section_list,
                                institute=institute,
                                discipline=discipline,
                                assets=asset_list,
                                integration_status=integration_status,
                                developers=developer_list,
                                hosting_info=hosting_info_list)
        try:
            current_app.logger.debug("running operation add_experiment")
            experiment = System.do("add_experiment", experiment=experiment, 
                                    session=session)
            current_app.logger.debug("completed operation add_experiment")
            return experiment

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+end_src

*** TestAddExperiment
 #+NAME: test_class_add_experiment
 #+BEGIN_SRC python
class TestAddExperiment(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_add_experiment_in_system_interface(self):
        print "test_add_experiment_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                    }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
                    		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'computer science',
                    'discipline_id': 'CSE',
                    		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integration_status = SystemInterface.add_integration_status(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Theory'
                    }
        section = SystemInterface.add_section(data_dict)
        
        data_dict = {
                    'key' : KEY,
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud'
                   }

        hosting_info = SystemInterface.add_hosting_info(data_dict)

        data_dict = {
                    "key" : KEY,
		    "experiment": {
		      "id": "exp123",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
		  }
        experiment = SystemInterface.add_experiment(data_dict)
        
        self.assertEqual(experiment.get("exp_name"), 
                             data_dict['experiment']['name'])
        self.assertEqual(experiment.get("exp_id"),
                             data_dict['experiment']['id'])
        self.assertEqual(experiment.get("institute").get("institute_id"),
                             data_dict['experiment']['institute_id'])
        self.assertEqual(experiment.get("discipline").get("discipline_id"),
                             data_dict['experiment']['discipline_id'])
        self.assertEqual(experiment.get("integration_status").get("integration_level"),
                             data_dict['experiment']['integration_level'])
        self.assertEqual(experiment.get("assets")[0].get("path"), 
                             'vlabs.ac.in/images/static/logo.png')
        self.assertEqual(experiment.get("hosting_info")[0].get("hosted_url"),
                             'http://cse14-iiith.ac.in')
        self.assertEqual(experiment.get("developers")[0].get("email").\
                             get("email"), 'xyz@gmail.com')
        self.assertEqual(experiment.get("developers")[1].get("email").\
                             get("email"), 'abc@gmail.com')
        self.assertEqual(experiment.get("sections")[0].get("name"), 'Introduction')

    def test_add_experiment_raises_type_error_in_system_interface(self):
        print "test_add_experiment_raises_type_error_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Procedure'
                    }
        section = SystemInterface.add_section(data_dict)


        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
                    		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'computer science',
                    'discipline_id': 'CSE',
                    		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }
        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integration_status = SystemInterface.add_integration_status(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hosting_info = SystemInterface.add_hosting_info(data_dict)

        data_dict = {
                    "key" : KEY,
		    "experiment": {
		      "id": 123,
                      "overview":"overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "cloud",
			  "hosted_url": "http://cse14-iiith.vlabs.ac.in"
			},
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
		  } 
        with self.assertRaises(TypeError):
            SystemInterface.add_experiment(data_dict)
 #+END_SRC


** Add Institute
#+NAME: class_add_institute
#+begin_src python
    @staticmethod
    def add_institute(data_dict):
        session_cls = System.delegate.entities['session']       
        institute_cls = System.delegate.entities['institute']
        asset_cls = System.delegate.entities['asset']
        asset_type_cls = System.delegate.entities['asset_type']

        session = session_cls(key=data_dict['key'])
        del(data_dict['key'])

        assets = data_dict['assets']
        asset_list = []
        for asset_x in assets:
            asset = System.do("get_asset", path=asset_x['path'])
            if asset is None:
                asset_type = asset_type_cls(asset_type=asset_x['asset_type'])
                asset = asset_cls(asset_type=asset_type, \
                                      path=str(asset_x['path']))
                asset = System.do("add_asset", asset=asset, session=session)

            asset_list.append(asset)

        institute = institute_cls(institute_name=str(data_dict['institute_name']),
                                  institute_id=str(data_dict['institute_id']),
                                  assets=asset_list)

        try:
            current_app.logger.debug("running operation add_institute")
            institute = System.do("add_institute", institute=institute,
                                    session=session)
            current_app.logger.debug("completed operation add_institute")
            return institute.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+END_SRC
*** TestAddInstitute 
 #+NAME: test_class_add_institute
 #+BEGIN_SRC python
class TestAddInstitute(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_add_institute_in_system_interface(self):
        print "test_add_institute_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]
                    }
        institute = SystemInterface.add_institute(data_dict)
        institute_cls = System.delegate.entities['institute']
        institute = institute_cls.get_all()[0]

        self.assertEqual(institute.get("institute_name"), 
                             data_dict['institute_name'])
        self.assertEqual(institute.get("institute_id"), data_dict['institute_id'])
        self.assertEqual(institute.get("assets")[0].get("path"), 
                             'vlabs.ac.in/images/static/logo.png')

#    def test_add_institute_raises_type_error_in_system_interface(self):
#        print "test_add_institute_raises_type_error_in_system_interface"
 
#        data_dict = {
#                    'key' : KEY,
#                    'asset_type': 'Image',
#                    'path': 'vlabs.ac.in/images/static/logo.png'
#                   }

#        asset = SystemInterface.add_asset(data_dict)
       
#        data_dict = {
#                    'key' : KEY,
#                    'institute_name': 'IIT Kanpur',
#                    'institute_id': 123,
#                    		    "assets": [
#			{
#			  "asset_type": "image",
#			  "path": "vlabs.ac.in/images/static/logo.png"
#			}
#		      ]

#                    }
#        with self.assertRaises(TypeError):
#            SystemInterface.add_institute(data_dict)

 #+END_SRC


** Add Discipline
#+NAME: class_add_discipline
#+begin_src python
    @staticmethod
    def add_discipline(data_dict):
        session_cls = System.delegate.entities['session']
        discipline_cls = System.delegate.entities['discipline']
        asset_cls = System.delegate.entities['asset']
        asset_type_cls = System.delegate.entities['asset_type']

        session = session_cls(key=data_dict['key'])

        assets = data_dict['assets']
        asset_list = []
        for asset_x in assets:
            asset = System.do("get_asset", path=asset_x['path'])
            if asset is None:
                asset_type = asset_type_cls(asset_type=asset_x['asset_type'])
                asset = asset_cls(asset_type=asset_type, \
                                      path=str(asset_x['path']))
                asset = System.do("add_asset", asset=asset, session=session)

            asset_list.append(asset)
 
        discipline = discipline_cls(discipline_name=data_dict['discipline_name'],
                                    discipline_id=data_dict['discipline_id'],
                                    assets=asset_list)
        try:
            current_app.logger.debug("running operation add_discipline")
            question = System.do("add_discipline", discipline=discipline, 
                                    session=session)
            current_app.logger.debug("completed operation add_discipline")
            return discipline.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+end_src


*** TestAddDiscipline
 #+NAME: test_class_add_discipline
 #+BEGIN_SRC python
class TestAddDiscipline(TestCase):

    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_add_discipline_in_system_interface(self):
        print "test_add_discipline_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'array',
                    'discipline_id': 'cse02',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]
                   }

        discipline = SystemInterface.add_discipline(data_dict)

        self.assertEqual(discipline.get("discipline_name"), 
                             data_dict['discipline_name'])
        self.assertEqual(discipline.get("discipline_id"), data_dict['discipline_id'])
        self.assertEqual(discipline.get("assets")[0].get("path"), 
                             'vlabs.ac.in/images/static/logo.png')
        
    def test_add_discipline_raises_type_error_in_system_interface(self):
        print "test_add_discipline_raises_type_error_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'cse02',
                    'discipline_id': 123,
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

		    }
        with self.assertRaises(TypeError):
            SystemInterface.add_discipline(data_dict)

 #+END_SRC


** Add Section
#+NAME: class_add_section
#+begin_src python
    @staticmethod
    def add_section(data_dict):
        session_cls = System.delegate.entities['session']
        section_cls = System.delegate.entities['section']

        session = session_cls(key=data_dict['key'])
        section = section_cls(name=data_dict['name'])
        try:
            current_app.logger.debug("running operation add_section")
            question = System.do("add_section", section=section, 
                                    session=session)
            current_app.logger.debug("completed operation add_section")
            return section.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+end_src

*** TestAddSection
 #+NAME: test_class_add_section
 #+BEGIN_SRC python
class TestAddSection(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_add_section_in_system_interface(self):
        print "test_add_section_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'name' : 'Theory'
                   }

        section = SystemInterface.add_section(data_dict)

        self.assertEqual(section.get("name"), 
                             data_dict['name'])
        
    def test_add_section_raises_type_error_in_system_interface(self):
        print "test_add_section_raises_type_error_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'name' : 123
		    }
        with self.assertRaises(TypeError):
            SystemInterface.add_section(data_dict)
 #+END_SRC


** Add Hosting_Info
#+NAME: class_add_hosting_info
#+begin_src python
    @staticmethod
    def add_hosting_info(data_dict):
        session_cls = System.delegate.entities['session']       
        hosting_info_cls = System.delegate.entities['hosting_info']

        session = session_cls(key=data_dict['key'])
        del(data_dict['key'])

        hosting_info = hosting_info_cls(hosting_status=str(data_dict['hosting_status']),
                                  hosted_url=str(data_dict['hosted_url']),
                                  hosted_on=str(data_dict['hosted_on']))

        try:
            current_app.logger.debug("running operation add_hosting_info")
            hosting_info = System.do("add_hosting_info", hosting_info=hosting_info,
                                    session=session)
            current_app.logger.debug("completed operation add_hosting_info")
            return hosting_info.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+END_SRC
*** TestAddHosting_Info
 #+NAME: test_class_add_hosting_info
 #+BEGIN_SRC python
class TestAddHosting_Info(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_add_hosting_info_in_system_interface(self):
        print "test_add_hosting_info_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud'
                    }

        hosting_info = SystemInterface.add_hosting_info(data_dict)
        hosting_info_cls = System.delegate.entities['hosting_info']
        hosting_info = hosting_info_cls.get_all()[0]

        self.assertEqual(hosting_info.get("hosting_status"),
                             data_dict['hosting_status'])
        self.assertEqual(hosting_info.get("hosted_url"), data_dict['hosted_url'])
        self.assertEqual(hosting_info.get("hosted_on"), data_dict['hosted_on'])

 #+END_SRC


** Add Name
#+NAME: class_add_name
#+begin_src python
    @staticmethod
    def add_name(data_dict):
        session_cls = System.delegate.entities['session']
        name_cls = System.delegate.entities['name']

        session = session_cls(key=data_dict['key'])
        name = name_cls(name=str(data_dict['name']))
        try:
            current_app.logger.debug("running operation add_section")
            question = System.do("add_name", name=name, session=session)
            current_app.logger.debug("completed operation add_name")
            return name.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+end_src

*** TestAddName
 #+NAME: test_class_add_name
 #+BEGIN_SRC python
class TestAddName(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_add_name_in_system_interface(self):
        print "test_add_name_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'name' : 'Prof. S. Dharmaraja'
                   }

        name = SystemInterface.add_name(data_dict)

        self.assertEqual(name.get("name"), 
                             data_dict['name'])
        
    def test_add_name_raises_type_error_in_system_interface(self):
        print "test_add_name_raises_type_error_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'name' : 123
		    }
        with self.assertRaises(TypeError):
            SystemInterface.add_name(data_dict)
 #+END_SRC
 

** Add Email
#+NAME: class_add_email
#+begin_src python
    @staticmethod
    def add_email(data_dict):
        session_cls = System.delegate.entities['session']
        email_cls = System.delegate.entities['email']

        session = session_cls(key=data_dict['key'])
        email = email_cls(email=str(data_dict['email']))
        try:
            current_app.logger.debug("running operation add_email")
            question = System.do("add_email", email=email, session=session)
            current_app.logger.debug("completed operation add_email")
            return email.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+end_src

*** TestAddEmail
 #+NAME: test_class_add_email
 #+BEGIN_SRC python
class TestAddEmail(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_add_email_in_system_interface(self):
        print "test_add_email_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'email' : 'dharmar@maths.iitd.ac.in'
                   }

        email = SystemInterface.add_email(data_dict)

        self.assertEqual(email.get("email"), 
                             data_dict['email'])
        
    def test_add_email_raises_type_error_in_system_interface(self):
        print "test_add_email_raises_type_error_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'email' : 123
		    }
        with self.assertRaises(TypeError):
            SystemInterface.add_email(data_dict)
 #+END_SRC


** Add Developer
#+NAME: class_add_developer
#+begin_src python
    @staticmethod
    def add_developer(data_dict):
        session_cls = System.delegate.entities['session']
        name_cls = System.delegate.entities['name']
        email_cls = System.delegate.entities['email']
        developer_cls = System.delegate.entities['developer']
        institute_cls = System.delegate.entities['institute']
        discipline_cls = System.delegate.entities['discipline']

        session = session_cls(key=data_dict['key'])
        name = name_cls(name=str(data_dict['name']))
        email = email_cls(email=str(data_dict['email']))

        developer = developer_cls(name=name, email=email)

        try:
            current_app.logger.debug("running operation add_developer")
            developer = System.do("add_developer", developer=developer,
                                    session=session)
            current_app.logger.debug("completed operation add_developer")

            return developer
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+end_src
  

*** TestAddDeveloper
 #+NAME: test_class_add_developer
 #+BEGIN_SRC python
class TestAddDeveloper(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_add_developer_in_system_interface(self):
        print "test_add_developer_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'computer science',
                    'discipline_id': 'CSE',
		    "assets": [
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/images/static/icon.png"
			}
		      ]

                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        self.assertEqual(developer.get("name").get("name"),
                             data_dict['name'])
        self.assertEqual(developer.get("email").get("email"),
                             data_dict['email'])

    def test_add_developer_raises_type_error_in_system_interface(self):
        print "test_add_developer_raises_type_error_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'name': 'Prof. S. Dharmaraja',
                    'email': 123456
		    }

        with self.assertRaises(TypeError):
            SystemInterface.add_developer(data_dict)
 #+END_SRC


** Add Integration_Status
#+NAME: class_add_integration_status
#+begin_src python
    @staticmethod
    def add_integration_status(data_dict):
        session_cls = System.delegate.entities['session']       
        integration_status_cls = System.delegate.entities['integration_status']

        session = session_cls(key=data_dict['key'])
        del(data_dict['key'])
        IL = data_dict['integration_level']

        if IL in range(0, 6):
            int_status = integration_status_cls(integration_level=IL)
        else:
            current_app.logger.error("Integration Level= %d is not in range 0 to 6" % IL)
            abort(500, "Integration Level is not in range 0 to 6")

        try:
            current_app.logger.debug("running operation add_integration_status")
            integration_status = System.do("add_integration_status", integration_status=int_status,
                                    session=session)
            current_app.logger.debug("completed operation add_integration_status")
            return integration_status.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+END_SRC
*** TestAddIntegration_Status
 #+NAME: test_class_add_integration_status
 #+BEGIN_SRC python
class TestAddIntegration_Status(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_add_integration_status_in_system_interface(self):
        print "test_add_integration_status_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integration_status = SystemInterface.add_integration_status(data_dict)
        integration_status_cls = System.delegate.entities['integration_status']
        integration_status = integration_status_cls.get_all()[0]

        self.assertEqual(integration_status.get("integration_level"), 
                             data_dict['integration_level'])

 #+END_SRC


** Get Labs
#+NAME: class_get_labs
#+begin_src python
    @staticmethod
    def get_labs():
        lab_cls = System.delegate.entities['lab']
        try:
            current_app.logger.debug("running operation get labs")
            labs = lab_cls.get_all()
            lab_dict_list = []
            for lab in labs:
                lab_x = lab.to_client()
                lab_dict_list.append(lab_x)
            current_app.logger.debug("got labs")
            return  lab_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetLabs
 #+NAME: test_class_get_labs
 #+BEGIN_SRC python
class TestGetLabs(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_labs_in_system_interface(self):
        print "test_get_labs_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integration_status = SystemInterface.add_integration_status(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)
        
        data_dict = {
                    'key' : KEY,
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud'
                   }

        hosting_info = SystemInterface.add_hosting_info(data_dict)

        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'computer science',
                    'discipline_id': 'CSE',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com',
		    "assets": [
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/images/static/icon.png"
			}
		      ]
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
		   'key' : KEY,
		   'name': 'Procedure'
		  }

        section = SystemInterface.add_section(data_dict)

        data_dict = {
                    "key" : KEY,
		    "experiment": {
		      "id": "exp123",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
		  }

        experiment = SystemInterface.add_experiment(data_dict)

        data_dict = {           
		   "key" : KEY,     
                   "lab": {
                     "id": "cse02",
                     "name": "Computer Programming",
                     "overview": "overview",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       {
                         "name": "Procedure"
                       }                       
                     ],
                         "experiments": [
                           "exp123"
                         ]

                   }
                 }

        data_dict1 = {           
		   "key" : KEY,     
                   "lab": {
                     "id": "cse03",
                     "name": "Computer Programming",
                     "overview": "overview",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       {
                         "name": "Introduction"
                       }
                                              
                     ],
                         "experiments": [
                           "exp123"
                         ]

                   }
                 }

        lab1 = SystemInterface.add_lab(data_dict)
        lab2 = SystemInterface.add_lab(data_dict1)

        lab_list = SystemInterface.get_labs()
        
        self.assertEqual(lab_list[0].get("lab_name"), data_dict['lab']['name'])
        self.assertEqual(lab_list[1].get("lab_name"), data_dict1['lab']['name'])
        self.assertEqual(lab_list[0].get("lab_id"), 
                             data_dict['lab']['id'])
        self.assertEqual(lab_list[1].get("lab_id"), 
                             data_dict1['lab']['id'])

 #+END_SRC

 
** Get Labs by Keyword Lab Name
#+NAME: class_get_labs_by_keyword_lab_name
#+begin_src python
    @staticmethod
    def get_labs_by_keyword_lab_name(keyword):
        lab_cls = System.delegate.entities['lab']
        try:
            current_app.logger.debug("running get labs by keyword" 
                                     " lab name")
            labs = lab_cls.get_all()
            labs_match_list=[]
            for lab in labs:
                lab_x = lab.to_client()
                if keyword.lower() in (lab_x['lab_name']).lower():
                    labs_match_list.append(lab_x)

            current_app.logger.debug("got labs by keyword lab name")
            return  labs_match_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetLabsByKeywordLabName
 #+NAME: test_class_get_labs_by_keyword_lab_name
 #+BEGIN_SRC python
class TestGetLabsByKeywordLabName(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_labs_by_keyword_lab_in_system_interface(self):
        print "test_get_labs_by_keyword_lab_name_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integration_status = SystemInterface.add_integration_status(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud'
                   }

        hosting_info = SystemInterface.add_hosting_info(data_dict)

        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
                    "assets": [
                    {
                    "asset_type": "video",
                    "path": "vlabs.ac.in/images/static/icon.png"
                }
                ]

            }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'computer science',
                    'discipline_id': 'CSE',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
		   'key' : KEY,
		   'name': 'Procedure'
		  }

        section = SystemInterface.add_section(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    "key" : KEY,
		    "experiment": {
		      "id": "exp123",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
		  }

        experiment = SystemInterface.add_experiment(data_dict)

        data_dict = {'lab_name': 'data structure',
                    'lab_id': 'cse02',
                    'overview': 'overview',
                    'key': KEY,
                    'institute_id': 'IITK',
                    'discipline_id': 'CSE',
                    'assets': [{'path':'vlabs.ac.in/images/static/logo.png',
                                    'asset_type': 'image'},
                                {'path':'vlabs.ac.in/images/static/image.png',
                                    'asset_type': 'image'}],
                                    "phase":[{"phase_id":1,  "phase_id":2}],
                    "phase":[{"phase_id":1,  "phase_id":2}],
                    'developers': [{'name':'Prof. Dharamaja',
                                    'email': 'abc@gmail.com',
                                    'institute_id': 'IITK', 'discipline_id': 'CSE'},
                                    {'name':'Prof. Pallavi Pawar',
                                    'email': 'pallavi.pawar@gmail.com',
                                    'institute_id': 'IITK', 'discipline_id': 'CSE'}],
                    'hosting_info': [{'hosted_url':'http://cse14-iiith.vlabs.ac.in',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'cloud'},
                                    {'hosted_url':'http://iitkgp.vlab.co.in/',
                                    'hosting_status': 'hosted',
                                    'hosted_on': 'server'}],
                    'integration_level': 4,
                    'experiments': ['exp123']
                   }

        data_dict = {
		   "key" : KEY,
                   "lab": {
                     "id": "cse02",
                     "name": "data bases",
                     "overview": "overview",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       }
                     ],
                     "sections": [
                       {
                         "name": "Introduction"
                       }
                                              
                     ],
                         "experiments": [
                           "exp123"
                         ]

                   }
                 }

        data_dict1 = {
		   "key" : KEY,
                   "lab": {
                     "id": "cse03",
                     "name": "data structures",
                     "overview": "overview",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       }
                     ],
                     "sections": [
                       {
                         "name": "Introduction"
                       }
                                              
                     ],
                         "experiments": [
                           "exp123"
                         ]

                   }
                 }

        lab1 = SystemInterface.add_lab(data_dict)
        lab2 = SystemInterface.add_lab(data_dict1)

        labs_list = SystemInterface.get_labs_by_keyword_lab_name("data")

        self.assertEqual(labs_list[0].get("lab_name"), data_dict['lab']['name'])
        self.assertEqual(labs_list[1].get("lab_name"), data_dict1['lab']['name'])
        self.assertEqual(labs_list[0].get("lab_id"),
                             data_dict['lab']['id'])
        self.assertEqual(labs_list[1].get("lab_id"),
                             data_dict1['lab']['id'])

 #+END_SRC


** Get Labs by Institute
#+NAME: class_get_labs_by_institute
#+begin_src python
    @staticmethod
    def get_labs_by_institute(institute_name):
        institute = System.do("get_institute_by_institute_name",
                                  institute_name=str(institute_name))
        try:
            current_app.logger.debug("running operation get_labs_by_institute")
            labs = System.do("get_labs_by_institute", institute=institute)
            current_app.logger.debug("completed operation get_labs_by_institute")
            labs_dict_list = []
            for lab in labs:
                lab_x = lab.to_client()
                labs_dict_list.append(lab_x)
            current_app.logger.debug("got labs")
            return  labs_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetLabsByInstitute
 #+NAME: test_class_get_labs_by_institute
 #+BEGIN_SRC python
class TestGetLabsByInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_labs_by_institute_in_system_interface(self):
        print "test_get_labs_by_institute_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud'
                   }

        hosting_info = SystemInterface.add_hosting_info(data_dict)

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integration_status = SystemInterface.add_integration_status(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Logo',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)


        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
		    "assets": [
			{
			  "asset_type": "icon",
			  "path": "vlabs.ac.in/images/static/icon.png"
			}
		      ]

                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'computer science',
                    'discipline_id': 'CSE',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)


        data_dict = {
		   'key' : KEY,
		   'name': 'Procedure'
		  }

        section = SystemInterface.add_section(data_dict)

        data_dict = {
                    "key" : KEY,
		    "experiment": {
		      "id": "exp123",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "logo",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
		  }

        experiment = SystemInterface.add_experiment(data_dict)


        data_dict = {
               "key" : KEY,     
           "lab": {
               "id": "cse02",
               "name": "Computer Programming",
                   "overview": "overview",
               "discipline_id": "CSE",
               "institute_id": "IITK",
               "phase":[{"phase_id":1,  "phase_id":2}],
               "developers": [
               {
                   "name": "Dinesh Malviya",
                   "email": "xyz@gmail.com"
               },
               {
                   "name": "Ashish Ahuja",
                   "email": "abc@gmail.com"
               }
               ],
               "hosting_info": [
               {
                   "hosting_status": "hosted",
                   "hosted_on": "cloud",
                   "hosted_url": "http://cse14-iiith.vlabs.ac.in"
               },
               {
                   "hosting_status": "hosted",
                   "hosted_on": "college-cloud",
                   "hosted_url": "http://cse14-iiith.ac.in"
               }
               ],
               "integration_level": 4,
               "assets": [
               {
                   "asset_type": "logo",
                   "path": "vlabs.ac.in/images/static/logo.png"
               },
               {
                   "asset_type": "video",
                   "path": "vlabs.ac.in/video/abc.mkv"
               }
               ],
               "sections": [
               {
                   "name": "Introduction"
               }
                              
               ],
                   "experiments": [
                   "exp123"
                   ]

           }
           }

        data_dict1 = {
               "key" : KEY,     
               "lab": {
                   "id": "cse03",
                   "name": "Computer Programming",
                   "overview": "overview",
                   "discipline_id": "CSE",
                   "institute_id": "IITK",
                   "phase":[{"phase_id":1,  "phase_id":2}],
                   "developers": [
                       {
                           "name": "Dinesh Malviya",
                           "email": "xyz@gmail.com"
                       },
                       {
                           "name": "Ashish Ahuja",
                           "email": "abc@gmail.com"
                       }
                   ],
                   "hosting_info": [
                       {
                           "hosting_status": "hosted",
                           "hosted_on": "cloud",
                           "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                           "hosting_status": "hosted",
                           "hosted_on": "college-cloud",
                           "hosted_url": "http://cse14-iiith.ac.in"
                       }
                   ],
                   "integration_level": 4,
                   "assets": [
                       {
                           "asset_type": "image",
                           "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                           "asset_type": "video",
                           "path": "vlabs.ac.in/video/abc.mkv"
                       }
                   ],
                   "sections": [
                       {
                           "name": "Introduction"
                       }
                       
                   ],
                   "experiments": [
                   "exp123"
                   ]

               }
           }

        lab = SystemInterface.add_lab(data_dict)
        lab1 = SystemInterface.add_lab(data_dict1)

        labs = SystemInterface.get_labs_by_institute("IIT Kanpur")

        self.assertEqual(labs[0]['institute']['institute_name'], "IIT Kanpur")

 #+END_SRC


** Get Labs by Discipline
#+NAME: class_get_labs_by_discipline
#+begin_src python
    @staticmethod
    def get_labs_by_discipline(discipline_name):
        discipline = System.do("get_discipline_by_discipline_name",
                                  discipline_name=str(discipline_name))
        try:
            current_app.logger.debug("running operation get_labs_by_discipline")
            labs = System.do("get_labs_by_discipline", discipline=discipline)
            current_app.logger.debug("completed operation get_labs_by_discipline")
            labs_dict_list = []
            for lab in labs:
                lab_x = lab.to_client()
                labs_dict_list.append(lab_x)
            current_app.logger.debug("got labs")
            return  labs_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetLabsByDiscipline
 #+NAME: test_class_get_labs_by_discipline
 #+BEGIN_SRC python
class TestGetLabsByDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_labs_by_discipline_in_system_interface(self):
        print "test_get_labs_by_discipline_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud'
                   }

        hosting_info = SystemInterface.add_hosting_info(data_dict)

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integration_status = SystemInterface.add_integration_status(data_dict)


        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
		    "assets": [
			{
			  "asset_type": "icon",
			  "path": "vlabs.ac.in/images/static/icon.png"
			}
		      ]

                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'Computer Science',
                    'discipline_id': 'CSE',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
		   'key' : KEY,
		   'name': 'Procedure'
		  }

        section = SystemInterface.add_section(data_dict)

        data_dict = {
                    "key" : KEY,
		    "experiment": {
		      "id": "exp123",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
		  }
        experiment = SystemInterface.add_experiment(data_dict)

        data_dict = {           
		   "key" : KEY,     
                   "lab": {
                     "id": "cse02",
                     "name": "Computer Programming",
                     "overview": "overview",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       {
                         "name": "Introduction"
                       }
                       
                     ],
                     "experiments": [
                     "exp123"
                     ]

                   }
                 }

        data_dict1 = {           
		   "key" : KEY,     
                   "lab": {
                     "id": "cse03",
                     "name": "Computer Programming",
                     "overview": "overview",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       {
                         "name": "Introduction"
                       }                       
                     ],
                         "experiments": [
                           "exp123"
                         ]
                   }
                 }

        lab = SystemInterface.add_lab(data_dict)
        lab1 = SystemInterface.add_lab(data_dict1)

        labs = SystemInterface.get_labs_by_discipline("Computer Science")

        self.assertEqual(labs[0]['discipline']['discipline_name'], "Computer Science")

 #+END_SRC


** Get Labs by LabName
#+NAME: class_get_labs_by_lab_name
#+begin_src python
    @staticmethod
    def get_labs_by_lab_name(lab_name):

        try:
            current_app.logger.debug("running operation get_labs_by_lab_name")
            labs = System.do("get_labs_by_lab_name", lab_name=str(lab_name))
            current_app.logger.debug("completed operation get_labs_by_lab_name")
            labs_dict_list = []
            for lab in labs:
                lab_x = lab.to_client()
                labs_dict_list.append(lab_x)
            current_app.logger.debug("got labs")
            return  labs_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetLabsByLabName
 #+NAME: test_class_get_labs_by_lab_name
 #+BEGIN_SRC python
class TestGetLabsByLabName(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_labs_by_lab_name_in_system_interface(self):
        print "test_get_labs_by_lab_name_in_system_interface"

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hosting_info = SystemInterface.add_hosting_info(data_dict)

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integration_status = SystemInterface.add_integration_status(data_dict)

        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'computer science',
                    'discipline_id': 'CSE',
		    "assets": [
			{
			  "asset_type": "Icon",
			  "path": "vlabs.ac.in/images/static/icon.png"
			}
		      ]

                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)
        
        data_dict = {
		   'key' : KEY,
		   'name': 'Procedure'
		  }

        section = SystemInterface.add_section(data_dict)

        data_dict = {
                    "key" : KEY,
		    "experiment": {
		      "id": "exp123",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
		  }
        experiment = SystemInterface.add_experiment(data_dict)

        data_dict = {           
		   "key" : KEY,     
                   "lab": {
                     "id": "cse02",
                     "name": "Computer Programming",
                     "overview": "overview",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       {
                         "name": "Introduction"
                       }
                     ],
                     "experiments": [
                     "exp123"
                     ]

                   }
                 }

        data_dict1 = {           
		   "key" : KEY,     
                   "lab": {
                     "id": "cse03",
                     "name": "Computer Programming",
                     "overview": "overview",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       {
                         "name": "Introduction"
                       }
                       ],
                       "experiments": [
                         "exp123"
                         ]
                   }
                 }
        lab = SystemInterface.add_lab(data_dict)
        lab1 = SystemInterface.add_lab(data_dict1)

        labs = SystemInterface.get_labs_by_lab_name(data_dict['lab']['name'])

        self.assertEqual(labs[0]['lab_name'], data_dict['lab']['name'])

 #+END_SRC

 
** Get Experiments
#+NAME: class_get_experiments
#+begin_src python
    @staticmethod
    def get_experiments():
        experiment_cls = System.delegate.entities['experiment']
        try:
            current_app.logger.debug("getting experiments")
            experiments = experiment_cls.get_all()
            exp_dict_list = [] 
            for exp in experiments:
                exp_x = exp.to_client()
                exp_dict_list.append(exp_x)
            current_app.logger.debug("got experiments")
            return  exp_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetExperiments
 #+NAME: test_class_get_experiments
 #+BEGIN_SRC python
class TestGetExperiments(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_experiments_in_system_interface(self):
        print "test_get_experiments_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
                    		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'computer science',
                    'discipline_id': 'CSE',
                    		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        discipline = SystemInterface.add_discipline(data_dict)
          
        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integration_status = SystemInterface.add_integration_status(data_dict)  

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'key' : KEY,
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud'
                   }

        hosting_info = SystemInterface.add_hosting_info(data_dict)

        data_dict = {
                    "key" : KEY,
		    "experiment": {
		      "id": "exp123",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
		  }


        data_dict1 = {
                    'key' : KEY,
                    'institute_name': 'IIT Kharagpur',
                    'institute_id': 'IITKgp',
                    		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        institute1 = SystemInterface.add_institute(data_dict1)

        data_dict1 = {
                    'key' : KEY,
                    'discipline_name': 'electronics and communication',
                    'discipline_id': 'ECE',
                    		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        discipline1 = SystemInterface.add_discipline(data_dict1)

        data_dict1 = {
                    "key" : KEY,
		    "experiment": {
		      "id": "e99848",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
		  }

        exp1 = SystemInterface.add_experiment(data_dict)
        exp2 = SystemInterface.add_experiment(data_dict1)

        exp_list = SystemInterface.get_experiments()
        
        self.assertEqual(exp_list[0].get("exp_name"), data_dict['experiment']['name'])
        self.assertEqual(exp_list[1].get("exp_name"), data_dict1['experiment']['name'])
        self.assertEqual(exp_list[0].get("exp_id"), 
                             data_dict['experiment']['id'])
        self.assertEqual(exp_list[1].get("exp_id"), 
                             data_dict1['experiment']['id'])

 #+END_SRC


** Get Institutes
#+NAME: class_get_institutes
#+begin_src python
    @staticmethod
    def get_institutes():
        institute_cls = System.delegate.entities['institute']
        try:
            current_app.logger.debug("getting institutes")
            institutes = institute_cls.get_all()
            inst_dict_list = []
            for inst in institutes:
                inst_x = inst.to_client()
                inst_dict_list.append(inst_x)
            current_app.logger.debug("got institutes")
            return  inst_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetInstitutes
 #+NAME: test_class_get_institutes
 #+BEGIN_SRC python
class TestGetInstitutes(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_institutes_in_system_interface(self):
        print "test_get_institutes_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {'institute_name': 'IIT Kharagpur',
                    'institute_id': 'IITKgp',
                    		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]
,
                    'key' : KEY
                    }

        data_dict1 = {'institute_name': "IIT Delhi",
                     'institute_id': 'IITD',
                     		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]
,
                     'key' : KEY
                     }

        inst1 = SystemInterface.add_institute(data_dict)
        inst2 = SystemInterface.add_institute(data_dict1)

        inst_list = SystemInterface.get_institutes()
        
        self.assertEqual(inst_list[0].get("institute_name"), data_dict['institute_name'])
        self.assertEqual(inst_list[1].get("institute_name"), data_dict1['institute_name'])
        self.assertEqual(inst_list[0].get("institute_id"), 
                             data_dict['institute_id'])
        self.assertEqual(inst_list[1].get("institute_id"), 
                             data_dict1['institute_id'])

 #+END_SRC


** Get Sections

#+NAME: class_get_sections
#+begin_src python
    @staticmethod
    def get_sections():
        section_cls = System.delegate.entities['section']
        try:
            current_app.logger.debug("getting sections")
            sections = section_cls.get_all()
            section_dict_list = []
            for section in sections:
                section_x = section.to_client()
                section_dict_list.append(section_x)
            current_app.logger.debug("got sections")
            return  section_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetSections
 #+NAME: test_class_get_sections
 #+BEGIN_SRC python
class TestGetSections(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_section_in_system_interface(self):
        print "test_get_section_in_system_interface"

        data_dict = {'name': 'Theory',
                    'key' : KEY
                   }

        data_dict1 = {'name': 'Aim',
                     'key' : KEY
                     }

        section1 = SystemInterface.add_section(data_dict)
        section2 = SystemInterface.add_section(data_dict1)

        section_list = SystemInterface.get_sections()
        
        self.assertEqual(section_list[0].get("name"), data_dict['name'])
        self.assertEqual(section_list[1].get("name"), data_dict1['name'])

 #+END_SRC


** Get Disciplines

#+NAME: class_get_disciplines
#+begin_src python
    @staticmethod
    def get_disciplines():
        discipline_cls = System.delegate.entities['discipline']
        try:
            current_app.logger.debug("getting disciplines")
            disciplines = discipline_cls.get_all()
            dis_dict_list = []
            for dis in disciplines:
                dis_x = dis.to_client()
                dis_dict_list.append(dis_x)
            current_app.logger.debug("got disciplines")
            return  dis_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetDisciplines
 #+NAME: test_class_get_disciplines
 #+BEGIN_SRC python
class TestGetDisciplines(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_disciplines_in_system_interface(self):
        print "test_get_disciplines_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                    }

        asset = SystemInterface.add_asset(data_dict)


        data_dict = {'discipline_name': 'data structure',
                    'discipline_id': 'cse01',
                    'key' : KEY,
                    		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        data_dict1 = {'discipline_name': "Automata",
                      'discipline_id': 'DFA',
                      'key' : KEY,
                      		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                      }

        dis = SystemInterface.add_discipline(data_dict)
        dis1 = SystemInterface.add_discipline(data_dict1)

        dis_list = SystemInterface.get_disciplines()
        
        self.assertEqual(dis_list[0].get("discipline_name"), data_dict["discipline_name"])
        self.assertEqual(dis_list[1].get("discipline_name"), data_dict1["discipline_name"])
        self.assertEqual(dis_list[0].get("discipline_id"), 
                             data_dict["discipline_id"])
        self.assertEqual(dis_list[1].get("discipline_id"), 
                             data_dict1["discipline_id"])

 #+END_SRC
 

** Get Hosting_Info
#+NAME: class_get_hosting_info
#+begin_src python
    @staticmethod
    def get_hosting_info():
        hosting_info_cls = System.delegate.entities['hosting_info']
        try:
            current_app.logger.debug("getting hosting_info")
            hosting_info = hosting_info_cls.get_all()
            host_dict_list = []
            for host in hosting_info:
                host_x = host.to_client()
                host_dict_list.append(host_x)
            current_app.logger.debug("got hosting_infos")
            return  host_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetHosting_Info
 #+NAME: test_class_get_hosting_info
 #+BEGIN_SRC python
class TestGetHosting_Info(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_hosting_info_in_system_interface(self):
        print "test_get_hosting_info_in_system_interface"

        data_dict = {'hosting_status': 'hosted',
                     'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                     'hosted_on': 'cloud',
                     'key' : KEY
                    }

        data_dict1 = {'hosting_status': 'not hosted',
                      'hosted_url': 'http://cse12-iiith.vlabs.ac.in',
                      'hosted_on': 'server',
                      'key' : KEY
                     }

        host1 = SystemInterface.add_hosting_info(data_dict)
        host2 = SystemInterface.add_hosting_info(data_dict1)

        host_list = SystemInterface.get_hosting_info()
        
        self.assertEqual(host_list[0].get("hosting_status"), data_dict['hosting_status'])
        self.assertEqual(host_list[1].get("hosting_status"), data_dict1['hosting_status'])
        self.assertEqual(host_list[0].get("hosted_url"), data_dict['hosted_url'])
        self.assertEqual(host_list[1].get("hosted_url"), data_dict1['hosted_url'])
        self.assertEqual(host_list[0].get("hosted_on"), data_dict['hosted_on'])
        self.assertEqual(host_list[1].get("hosted_on"), data_dict1['hosted_on'])

 #+END_SRC


** Get Names

#+NAME: class_get_names
#+begin_src python
    @staticmethod
    def get_names():
        name_cls = System.delegate.entities['name']
        try:
            current_app.logger.debug("getting names")
            names = name_cls.get_all()
            name_dict_list = []
            for name in names:
                name_x = name.to_client()
                name_dict_list.append(name_x)
            current_app.logger.debug("got names")
            return  name_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetNames
 #+NAME: test_class_get_names
 #+BEGIN_SRC python
class TestGetNames(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_name_in_system_interface(self):
        print "test_get_name_in_system_interface"

        data_dict = {'name': 'Prof. Dharamaraj',
                    'key': KEY
                   }

        data_dict1 = {'name': 'Prof. Yamaraja',
                     'key': KEY
                     }

        name1 = SystemInterface.add_name(data_dict)
        name2 = SystemInterface.add_name(data_dict1)

        name_list = SystemInterface.get_names()
        
        self.assertEqual(name_list[0].get("name"), data_dict['name'])
        self.assertEqual(name_list[1].get("name"), data_dict1['name'])

 #+END_SRC


** Get Emails

#+NAME: class_get_emails
#+begin_src python
    @staticmethod
    def get_emails():
        email_cls = System.delegate.entities['email']
        try:
            current_app.logger.debug("getting emails")
            emails = email_cls.get_all()
            email_dict_list = []
            for email in emails:
                email_x = email.to_client()
                email_dict_list.append(email_x)
            current_app.logger.debug("got emails")
            return  email_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetEmails
 #+NAME: test_class_get_emails
 #+BEGIN_SRC python
class TestGetEmails(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_email_in_system_interface(self):
        print "test_get_email_in_system_interface"

        data_dict = {'email': 'abc@gmail.com',
                    'key': KEY
                   }

        data_dict1 = {'email': 'xyz@gmail.com',
                     'key': KEY
                     }

        email1 = SystemInterface.add_email(data_dict)
        email2 = SystemInterface.add_email(data_dict1)

        email_list = SystemInterface.get_emails()
        
        self.assertEqual(email_list[0].get("email"), data_dict['email'])
        self.assertEqual(email_list[1].get("email"), data_dict1['email'])

 #+END_SRC


** Get Developers

#+NAME: class_get_developers
#+begin_src python
    @staticmethod
    def get_developers():
        developer_cls = System.delegate.entities['developer']
        try:
            current_app.logger.debug("getting developers")
            developers = developer_cls.get_all()
            developer_dict_list = []
            for developer in developers:
                developer_x = developer.to_client()
                developer_dict_list.append(developer_x)
            current_app.logger.debug("got developers")
            return  developer_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetDevelopers
 #+NAME: test_class_get_developers
 #+BEGIN_SRC python
class TestGetDevelopers(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_developer_in_system_interface(self):
        print "test_get_developer_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
                    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'computer science',
                    'discipline_id': 'CSE',
                    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com',
                    'institute_id': 'IITK',
                    'discipline_id': 'CSE'
                   }

        data_dict1 = {
                    'key' : KEY,
                    'institute_name': 'IIT Kharagpur',
                    'institute_id': 'IITKgp',
                    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        institute1 = SystemInterface.add_institute(data_dict1)

        data_dict1 = {
                    'key' : KEY,
                    'discipline_name': 'electronics and communication',
                    'discipline_id': 'ECE',
                    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        discipline1 = SystemInterface.add_discipline(data_dict1)

        data_dict1 = {'name': 'Prof. Yamraja',
                      'email': 'xyz@gmail.com',
                      'key': KEY
                     }

        developer1 = SystemInterface.add_developer(data_dict)
        developer2 = SystemInterface.add_developer(data_dict1)

        developer_list = SystemInterface.get_developers()
        
        self.assertEqual(developer_list[0].get("name").get("name"),
                             data_dict['name'])
        self.assertEqual(developer_list[1].get("name").get("name"),
                             data_dict1['name'])

 #+END_SRC


** Get Integration_Status
#+NAME: class_get_integration_status
#+begin_src python
    @staticmethod
    def get_integration_status():
        integration_status_cls = System.delegate.entities['integration_status']
        try:
            current_app.logger.debug("getting integration_status")
            integration_status = integration_status_cls.get_all()
            intstatus_dict_list = []
            for intstatus in integration_status:
                intstatus_x = intstatus.to_client()
                intstatus_dict_list.append(intstatus_x)
            current_app.logger.debug("got integration_status")
            return  intstatus_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetIntigrationStatuss
 #+NAME: test_class_get_integration_status
 #+BEGIN_SRC python
class TestGetIntegration_Status(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_integration_status_in_system_interface(self):
        print "test_get_integration_status_in_system_interface"

        data_dict = {'integration_level': 4,
                    'key' : KEY
                    }

        data_dict1 = {'integration_level': 2,
                     'key' : KEY
                     }

        intstatus1 = SystemInterface.add_integration_status(data_dict)
        intstatus2 = SystemInterface.add_integration_status(data_dict1)

        intstatus_list = SystemInterface.get_integration_status()
        
        self.assertEqual(intstatus_list[0].get("integration_level"), data_dict['integration_level'])
        self.assertEqual(intstatus_list[1].get("integration_level"), data_dict1['integration_level'])

 #+END_SRC


** Get Lab By Id
#+NAME: class_get_lab_by_id
#+begin_src python
    @staticmethod
    def get_lab_by_id(id):
        lab_cls = System.delegate.entities['lab']
        try:
            current_app.logger.debug("getting lab by id")
            lab = lab_cls.get_by_id(id)
            if not lab:
                return ("No lab found with id: %s" % (id))

            current_app.logger.debug("got lab by id: %s" % id)
            return lab.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetLabById
 #+NAME: test_class_get_lab_by_id
 #+BEGIN_SRC python
class TestGetLabById(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_lab_by_id_in_system_interface(self):
        print "test_get_lab_by_id_in_system_interface"

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hosting_info = SystemInterface.add_hosting_info(data_dict)
       
        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integration_status = SystemInterface.add_integration_status(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
                    		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'computer science',
                    'discipline_id': 'CSE',
                    		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Icon',
                    'path': 'vlabs.ac.in/images/static/icon.png'
                   }

        asset2 = SystemInterface.add_asset(data_dict)

        data_dict = {
		   'key' : KEY,
		   'name': 'Procedure'
		  }

        section = SystemInterface.add_section(data_dict)

        data_dict = {
                    "key" : KEY,
		    "experiment": {
		      "id": "exp123",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
		  }


        experiment = SystemInterface.add_experiment(data_dict)

        data_dict = {
           "key" : KEY,     
           "lab": {
	       "id": "cse02",
	       "name": "Computer Programming",
               "overview": "overview",
	       "discipline_id": "CSE",
	       "institute_id": "IITK",
               "phase":[{"phase_id":1,  "phase_id":2}],
	       "developers": [
		   {
		       "name": "Dinesh Malviya",
		       "email": "xyz@gmail.com"
		   },
		   {
		       "name": "Ashish Ahuja",
		       "email": "abc@gmail.com"
		   }
	       ],
	       "hosting_info": [
		   {
		       "hosting_status": "hosted",
		       "hosted_on": "cloud",
		       "hosted_url": "http://cse1-iiith.vlabs.ac.in"
		   },
		   {
		       "hosting_status": "hosted",
		       "hosted_on": "college-cloud",
		       "hosted_url": "http://cse4-iiith.ac.in"
		   }
	       ],
	       "integration_level": 4,
	       "assets": [
		   {
		       "asset_type": "logo",
		       "path": "vlabs.ac.in/images/static/logo.png"
		   },
		   {
		       "asset_type": "video1",
		       "path": "vlabs.ac.in/video/abc.mkv"
		   }
	       ],
	       "experiments": [
			   "exp123"
		       ],
	       "sections": [
		   {
		       "name": "Introduction"
		   }
	       ]
	   }
       }


        data_dict1 = {
               "key" : KEY,     
               "lab": {
               "id": "cse03",
               "name": "Computer Programming",
                   "overview": "overview",
               "discipline_id": "CSE",
               "institute_id": "IITK",
               "phase":[{"phase_id":1,  "phase_id":2}],
               "developers": [
               {
                   "name": "Dinesh Malviya",
                   "email": "xyz@gmail.com"
               },
               {
                   "name": "Ashish Ahuja",
                   "email": "abc@gmail.com"
               }
               ],
               "hosting_info": [
               {
                   "hosting_status": "hosted",
                   "hosted_on": "cloud",
                   "hosted_url": "http://ce14-iiith.vlabs.ac.in"
               },
               {
                   "hosting_status": "hosted",
                   "hosted_on": "college-cloud",
                   "hosted_url": "http://cs14-iiith.ac.in"
               }
               ],
               "integration_level": 4,
               "assets": [
               {
                   "asset_type": "logo1",
                   "path": "vlabs.ac.in/images/static/logo.png"
               },
               {
                   "asset_type": "video2",
                   "path": "vlabs.ac.in/video/abc.mkv"
               }
               ],
               "sections": [
               {
                   "name": "Introduction"
               }
               
               ],
               "experiments": [
                   "exp123"
                   ]

           }
           }

        lab1 = SystemInterface.add_lab(data_dict)
        lab2 = SystemInterface.add_lab(data_dict1)

        lab_data_one = SystemInterface.get_lab_by_id(1)
        lab_data_two = SystemInterface.get_lab_by_id(2)
        
        self.assertEqual(lab_data_one.get("lab_name"), data_dict['lab']['name'])
        self.assertEqual(lab_data_two.get("lab_name"), data_dict1['lab']['name'])
        self.assertEqual(lab_data_one.get("lab_id"), 
                             data_dict['lab']['id'])
        self.assertEqual(lab_data_two.get("lab_id"), 
                             data_dict1['lab']['id'])

 #+END_SRC


** Get Section By Id

#+NAME: class_get_section_by_id
#+begin_src python
    @staticmethod
    def get_section_by_id(id):
        section_cls = System.delegate.entities['section']
        try:
            current_app.logger.debug("getting section by id")
            section = section_cls.get_by_id(id)
            if not section:
                return ("No section found with id: %s" % (id))

            current_app.logger.debug("got section by id = %s" % id)
            return section.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetSectionById
 #+NAME: test_class_get_section_by_id
 #+BEGIN_SRC python
class TestGetSectionById(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_section_by_id_in_system_interface(self):
        print "test_get_section_by_id_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'name' : "Theory"
                   }

        data_dict1 = {
                    'key' : KEY,
                    'name' : "Quiz"
                   }

        section1 = SystemInterface.add_section(data_dict)
        section2 = SystemInterface.add_section(data_dict1)

        section_data_one = SystemInterface.get_section_by_id(1)
        section_data_two = SystemInterface.get_section_by_id(2)
        
        self.assertEqual(section_data_one.get("name"), data_dict['name'])
        self.assertEqual(section_data_two.get("name"), data_dict1['name'])

 #+END_SRC


** Get Experiment By Id
#+NAME: class_get_experiment_by_id
#+begin_src python
    @staticmethod
    def get_experiment_by_id(id):
        experiment_cls = System.delegate.entities['experiment']
        try:
            current_app.logger.debug("getting experiment by id")
            experiment = experiment_cls.get_by_id(id)
            if not experiment:
                return ("No experiment found with id: %s" % (id))

            current_app.logger.debug("got experiment by id = %s" % id)
            return experiment.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetExperimentById
 #+NAME: test_class_get_experiment_by_id
 #+BEGIN_SRC python
class TestGetExperimentById(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_experiment_by_id_in_system_interface(self):
        print "test_get_experiment_by_id_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
                    		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'computer science',
                    'discipline_id': 'CSE',
                    		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict1 = {
                    'key' : KEY,
                    'institute_name': 'IIT Kharagpur',
                    'institute_id': 'IITKgp',
                    		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        institute1 = SystemInterface.add_institute(data_dict1)

        data_dict1 = {
                    'key' : KEY,
                    'discipline_name': 'electronics and communication',
                    'discipline_id': 'ECE',
                    		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        discipline1 = SystemInterface.add_discipline(data_dict1)

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integration_status = SystemInterface.add_integration_status(data_dict)
    
        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hosting_info = SystemInterface.add_hosting_info(data_dict)

        data_dict = {
                    "key" : KEY,
		    "experiment": {
		      "id": "exp123",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
		  }

        data_dict1 = {
                    "key" : KEY,
		    "experiment": {
		      "id": "e99848",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
		  }


        exp1 = SystemInterface.add_experiment(data_dict)
        exp2 = SystemInterface.add_experiment(data_dict1)

        exp_data_one = SystemInterface.get_experiment_by_id(1)
        exp_data_two = SystemInterface.get_experiment_by_id(2)
        
        self.assertEqual(exp_data_one.get("exp_name"), data_dict['experiment']['name'])
        self.assertEqual(exp_data_two.get("exp_name"), data_dict1['experiment']['name'])
        self.assertEqual(exp_data_one.get("exp_id"), data_dict['experiment']['id'])
        self.assertEqual(exp_data_two.get("exp_id"), data_dict1['experiment']['id'])
      
 #+END_SRC


** Get Institute By Id
#+NAME: class_get_institute_by_id
#+begin_src python
    @staticmethod
    def get_institute_by_id(id):
        institute_cls = System.delegate.entities['institute']
        try:
            current_app.logger.debug("getting institute by id")
            institute = institute_cls.get_by_id(id)
            if not institute:
                return ("No institute found with id: %s" % (id))

            current_app.logger.debug("got institute by id = %s" % id)
            return institute.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetInstituteById
 #+NAME: test_class_get_institute_by_id
 #+BEGIN_SRC python
class TestGetInstituteById(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_institute_by_id_in_system_interface(self):
        print "test_get_institute_by_id_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)


        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
                    		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        data_dict1 = {
                    'key' : KEY,
                    'institute_name': 'IIT Delhi',
                    'institute_id': 'IITD',
                    		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        inst1 = SystemInterface.add_institute(data_dict)
        inst2 = SystemInterface.add_institute(data_dict1)

        inst_data_one = SystemInterface.get_institute_by_id(1)
        inst_data_two = SystemInterface.get_institute_by_id(2)
        
        self.assertEqual(inst_data_one.get("institute_name"), data_dict['institute_name'])
        self.assertEqual(inst_data_two.get("institute_name"), data_dict1['institute_name'])
        self.assertEqual(inst_data_one.get("institute_id"), 
                             data_dict['institute_id'])
        self.assertEqual(inst_data_two.get("institute_id"), 
                             data_dict1['institute_id'])

 #+END_SRC


** Get Discipline By Id
#+NAME: class_get_discipline_by_id
#+begin_src python
    @staticmethod
    def get_discipline_by_id(id):
        discipline_cls = System.delegate.entities['discipline']
        try:
            current_app.logger.debug("getting discipline by id")
            discipline = discipline_cls.get_by_id(id)
            if not discipline:
                return ("No discipline found with id: %s" % (id))

            current_app.logger.debug("got discipline by id = %s" % id)
            return discipline.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetDisciplineById
 #+NAME: test_class_get_discipline_by_id
 #+BEGIN_SRC python
class TestGetDisciplineById(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_discipline_by_id_in_system_interface(self):
        print "test_get_discipline_by_id_in_system_interface"

  
        data_dict = {'discipline_name': 'data structure',
                    'discipline_id': 'cse01',
                    'key' : KEY,
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        data_dict1 = {'discipline_name': "Automata",
                      'discipline_id': 'DFA',
                      'key' : KEY,
		      "assets": [
			{
			  "asset_type": "Icon",
			  "path": "vlabs.ac.in/images/static/icon.png"
			}
		      ]

                     }

        dis = SystemInterface.add_discipline(data_dict)
        dis1 = SystemInterface.add_discipline(data_dict1)

        dis_data_one = SystemInterface.get_discipline_by_id(1)
        dis_data_two = SystemInterface.get_discipline_by_id(2)
        
        self.assertEqual(dis_data_one.get("discipline_name"), data_dict["discipline_name"])
        self.assertEqual(dis_data_two.get("discipline_name"), data_dict1["discipline_name"])
        self.assertEqual(dis_data_one.get("discipline_id"), 
                             data_dict["discipline_id"])
        self.assertEqual(dis_data_two.get("discipline_id"), 
                             data_dict1["discipline_id"])

 #+END_SRC


** Get Name By Id

#+NAME: class_get_name_by_id
#+begin_src python
    @staticmethod
    def get_name_by_id(id):
        name_cls = System.delegate.entities['name']
        try:
            current_app.logger.debug("getting name by id")
            name = name_cls.get_by_id(id)
            if not name:
                return ("No name found with id: %s" % (id))

            current_app.logger.debug("got developer name by id = %s" % id)
            return name.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetNameById
 #+NAME: test_class_get_name_by_id
 #+BEGIN_SRC python
class TestGetNameById(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_name_by_id_in_system_interface(self):
        print "test_get_name_by_id_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'name' : "Prof. Dharamraj"
                   }

        data_dict1 = {
                    'key' : KEY,
                    'name' : "Prof. Dharamrajuuuu"
                   }

        name1 = SystemInterface.add_name(data_dict)
        name2 = SystemInterface.add_name(data_dict1)

        name_data_one = SystemInterface.get_name_by_id(1)
        name_data_two = SystemInterface.get_name_by_id(2)
        
        self.assertEqual(name_data_one.get("name"), data_dict['name'])
        self.assertEqual(name_data_two.get("name"), data_dict1['name'])

 #+END_SRC


** Update Lab
#+NAME: class_update_lab
#+begin_src python
    @staticmethod
    def update_lab(data_dict):
        session_cls = System.delegate.entities['session']
        institute_cls = System.delegate.entities['institute']
        discipline_cls = System.delegate.entities['discipline']
        hosting_info_cls = System.delegate.entities['hosting_info']
        asset_cls = System.delegate.entities['asset']
        asset_type_cls = System.delegate.entities['asset_type']
        developer_cls = System.delegate.entities['developer']
        name_cls = System.delegate.entities['name']
        email_cls = System.delegate.entities['email']
        section_cls = System.delegate.entities['section']
        phase_cls = System.delegate.entities['phase']

        session = session_cls(key=data_dict['key'])

        lab_id = str(data_dict['lab']['id'])
        lab = System.do("get_lab", lab_id=lab_id)

        if 'name' not in data_dict['lab']:
            lab_name=str(lab.get("lab_name"))
        else:
            lab_name=data_dict['lab']['name']


        if 'phase' not in data_dict['lab']:
            phase_list = lab.get("phase")
        else:
            phase = data_dict['lab']['phase']
            phase_list = []

            for phase_x in phase:
                phase = phase_cls(phase_id=\
                                    phase_x['phase_id'])
                phase = System.do("get_phase", phase=phase)
                if phase is None:
                    phase = phase_cls(phase_id=
                                        phase_x['phase_id'])
                    phase = System.do("add_phase", phase=phase,
                                        session=session)
                phase_list.append(phase)


        if 'overview' not in data_dict['lab']:
            overview=str(lab.get("overview"))
        else:
            overview=data_dict['lab']['overview']

        if 'institute_id' not in data_dict['lab']:
            institute = lab.get("institute")
        else:
            institute = System.do("get_institute", institute_id=
                                      data_dict['lab']['institute_id'])

        if 'discipline_id' not in data_dict['lab']:
            discipline = lab.get("discipline")
        else:
            discipline = System.do("get_discipline", discipline_id=
                                       data_dict['lab']['discipline_id'])

        if 'integration_level' not in data_dict['lab']:
            integration_status = lab.get("integration_status")
        else:
            integration_status = System.do("get_integration_status_by_IL",
                             integration_level=data_dict['lab']['integration_level'])

        if 'hosting_info' not in data_dict['lab']:
            hosting_info_list = lab.get("hosting_info")
        else:
            hosting_info = data_dict['lab']['hosting_info']
            hosting_info_list = []
            for hosting_info_x in hosting_info:
                hosting_info = System.do("get_hosting_info",
                                            hosted_url=
                                            hosting_info_x['hosted_url'])
                if hosting_info is None:
                    hosting_info = hosting_info_cls\
                      (hosting_status=str(hosting_info_x['hosting_status']), \
                           hosted_url=str(hosting_info_x['hosted_url']), \
                      hosted_on=str(hosting_info_x['hosted_on']))
                    hosting_info = System.do("add_hosting_info",
                                                 hosting_info=hosting_info,
                                                 session=session)
                hosting_info_list.append(hosting_info)

        if 'assets' not in data_dict['lab']:
            asset_list = lab.get("assets")
        else:
            assets = data_dict['lab']['assets']
            asset_list = []
            for asset_x in assets:
                asset = System.do("get_asset", path=asset_x['path'])
                if asset is None:
                    asset_type = asset_type_cls(asset_type=\
                                                    str(asset_x['asset_type']))
                    asset = asset_cls(asset_type=asset_type, \
                                        path=str(asset_x['path']))
                    asset = System.do("add_asset", asset=asset, session=session)
                asset_list.append(asset)

        if 'sections' not in data_dict['lab']:
            section_list = lab.get("sections")
        else:
            sections = data_dict['lab']['sections']
            section_list = []
            for section_x in sections:
                section = System.do("get_section", name=section_x['name'])
                if section is None:
                    section = section_cls(name=str(section_x['name']))
                    section = System.do("add_section", section=section, session=session)
                section_list.append(section)

        if 'developers' not in data_dict['lab']:
            developer_list = lab.get("developers")
        else:
            developers = data_dict['lab']['developers']
            developer_list = []
            for developer_x in developers:
                name = name_cls(name=developer_x['name'])
                email = email_cls(email=developer_x['email'])
                developer = System.do("get_developer", email=email)
                if developer is None:
                    developer = developer_cls(name=name, email=email)
                    developer = System.do("add_developer", developer=developer,
                                              session=session)
                developer_list.append(developer)

        if 'experiments' not in data_dict['lab']:
            exp_list = lab.get("experiments")
        else:
            experiments = data_dict['lab']['experiments']
            exp_list = []
            for e_id in experiments:
                experiment = System.do("get_experiment", exp_id=e_id)
                exp_list.append(experiment)

        try:
            current_app.logger.debug("running operation update_lab")
            lab = System.do("update_lab", lab=lab,
                                    lab_name=lab_name,
                                    overview=overview,
                                    session=session,
                                    institute=institute,
                                    discipline=discipline,
                                    hosting_info=hosting_info_list,
                                    assets=asset_list,
                                    experiments=exp_list,
                                    phase=phase_list,
                                    developers=developer_list,
                                    sections=section_list,
                                    integration_status=integration_status)
            current_app.logger.debug("completed operation update_lab")
            return lab.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+end_src

*** TestUpdateLab
 #+NAME: test_class_update_lab
 #+BEGIN_SRC python
class TestUpdateLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_update_lab_in_system_interface(self):
        print "test_update_lab_name_in_system_interface"

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hosting_info = SystemInterface.add_hosting_info(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key': KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
                    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integration_status = SystemInterface.add_integration_status(data_dict)

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'computer science',
                    'discipline_id': 'CSE',
                    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)


        data_dict = {
                    "key" : KEY,
		    "experiment": {
		      "id": "exp123",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
		  }

        experiment = SystemInterface.add_experiment(data_dict)


        data_dict = {
           "key" : KEY,
           "lab": {
	       "id": "cse03",
	       "name": "Computer Programming",
               "overview": "overview",
	       "discipline_id": "CSE",
	       "institute_id": "IITK",
               "phase":[{"phase_id":1,  "phase_id":2}],
	       "developers": [
		   {
		       "name": "Dinesh Malviya",
		       "email": "xyz@gmail.com"
		   },
		   {
		       "name": "Ashish Ahuja",
		       "email": "abc@gmail.com"
		   }
	       ],
	       "hosting_info": [
		   {
		       "hosting_status": "hosted",
		       "hosted_on": "cloud",
		       "hosted_url": "http://cse14-iiith.vlabs.ac.in"
		   },
		   {
		       "hosting_status": "hosted",
		       "hosted_on": "college-cloud",
		       "hosted_url": "http://cse14-iiith.ac.in"
		   }
	       ],
	       "integration_level": 4,
	       "assets": [
		   {
		       "asset_type": "image",
		       "path": "vlabs.ac.in/images/static/logo.png"
		   },
		   {
		       "asset_type": "video",
		       "path": "vlabs.ac.in/video/abc.mkv"
		   }
	       ],
	       "sections": [
		   {
		       "name": "Introduction"
		   }
		   
	       ],
		       "experiments": [
			   "exp123"
		       ]

	   }
        }
        lab = SystemInterface.add_lab(data_dict)


        data_dict1 = {
                    'key': KEY,
                    'institute_name': 'IIT Kharagpur',
                    'institute_id': 'IITKgp',
                    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        institute = SystemInterface.add_institute(data_dict1)

        data_dict1 = {
                    'key' : KEY,
                    'discipline_name': 'electronics engineering',
                    'discipline_id': 'ECE',
                    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]
                    }

        discipline = SystemInterface.add_discipline(data_dict1)

        data_dict1 = {
                    'key' : KEY,
                    'integration_level': 3
                    }

        integration_status = SystemInterface.add_integration_status(data_dict1)


        data_dict1 = {
           "key" : KEY,
           "experiment": {
              "id": "exp1234",
              "overview": "overview",
              "name": "Parallel and distributed processing",
              "discipline_id": "CSE",
              "institute_id": "IITK",
              "developers": [
                 {
                    "name": "Dinesh Malviya",
                    "email": "xyz@gmail.com"
                 },
                 {
                    "name": "Ashish Ahuja",
                    "email": "abc@gmail.com"
                 }
              ],
              "hosting_info": [
                 {
                    "hosting_status": "hosted",
                    "hosted_on": "college-cloud",
                    "hosted_url": "http://cse14-iiith.ac.in"
                 }
              ],
              "integration_level": 4,
              "assets": [
                 {
                    "asset_type": "image",
                    "path": "vlabs.ac.in/images/static/logo.png"
                 },
                 {
                    "asset_type": "video",
                    "path": "vlabs.ac.in/video/abc.mkv"
                 }
              ],
              "sections": [
                 "Introduction",
                 "Objective",
                 "Tutorial",
                 "Illustration",
                 "Procedure",
                 "Experiment",
                 "Observations",
                 "Assignment",
                 "References"
              ]
           }
        }
        experiment1 = SystemInterface.add_experiment(data_dict1)

        data_dict1 = {
           "key" : KEY,
           "lab": {
	       "id": "cse03",
	       "name": "Computer Programming",
               "overview": "overviewasds",
	       "discipline_id": "CSE",
	       "institute_id": "IITK",
               "phase":[{"phase_id":1,  "phase_id":2}],
	       "developers": [
		   {
		       "name": "Dinesh Malviya",
		       "email": "xyz@gmail.com"
		   },
		   {
		       "name": "Ashish Ahuja",
		       "email": "abc@gmail.com"
		   }
	       ],
	       "hosting_info": [
		   {
		       "hosting_status": "hosted",
		       "hosted_on": "cloud",
		       "hosted_url": "http://cse14-iiith.vlabs.ac.in"
		   },
		   {
		       "hosting_status": "hosted",
		       "hosted_on": "college-cloud",
		       "hosted_url": "http://cse14-iiith.ac.in"
		   }
	       ],
	       "integration_level": 4,
	       "assets": [
		   {
		       "asset_type": "image",
		       "path": "vlabs.ac.in/images/static/logo.png"
		   }
	       ],
	       "sections": [
		   {
		       "name": "Introduction"
		   }
	       ],
                      "experiments": [
                         "exp1234", "exp123"
                      ]
	   }
        }

        lab1 = SystemInterface.update_lab(data_dict1)

        self.assertEqual(lab1.get("lab_name"), data_dict1['lab']['name'])
        self.assertEqual(lab1.get("lab_id"), data_dict1['lab']['id'])
        self.assertEqual(lab1.get("overview"), data_dict1['lab']['overview'])
        self.assertEqual(lab1.get("institute").get("institute_id"),
                             data_dict1['lab']['institute_id'])
        self.assertEqual(lab1.get("discipline").get("discipline_id"),
                             data_dict1['lab']['discipline_id'])
        self.assertEqual(lab1.get("integration_status").\
                             get("integration_level"),
                             data_dict1['lab']['integration_level'])
        self.assertEqual(lab1.get("hosting_info")[0].get("hosted_url"),
                             data_dict1['lab']['hosting_info'][0]['hosted_url'])
        self.assertEqual(lab1.get("hosting_info")[1].get("hosted_url"),
                             data_dict1['lab']['hosting_info'][1]['hosted_url'])
        self.assertEqual(lab1.get("developers")[0].get("email").get("email"),
                             data_dict1['lab']['developers'][0]['email'])
        self.assertEqual(lab1.get("developers")[1].get("email").get("email"),
                             data_dict1['lab']['developers'][1]['email'])
        self.assertEqual(lab1.get("assets")[0].get("path"),
                             data_dict1['lab']['assets'][0]['path'])
        self.assertEqual(lab.get("sections")[0].get("name"),
			    'Introduction')
        self.assertEqual(lab1.get("developers")[0].get("email").get("email"),
                            data_dict1['lab']['developers'][0].get("email"))
        self.assertEqual(lab1.get("assets")[0].get("path"),
                             data_dict1['lab']["assets"][0].get("path"))
        self.assertEqual(lab1.get("experiments")[1].get("exp_id"),
                              experiment1.get("exp_id"))
        self.assertEqual(lab1.get("experiments")[0].get("exp_id"),
                              experiment.get("exp_id"))
    
 #+END_SRC


** Update Experiment
#+NAME: class_update_experiment
#+begin_src python
    @staticmethod
    def update_experiment(data_dict):
        session_cls = System.delegate.entities['session']
        exp_cls = System.delegate.entities['experiment']
        institute_cls = System.delegate.entities['institute']
        discipline_cls = System.delegate.entities['discipline']
        hosting_info_cls = System.delegate.entities['hosting_info']
        developer_cls = System.delegate.entities['developer']
        asset_cls = System.delegate.entities['asset']
        asset_type_cls = System.delegate.entities['asset_type']
        name_cls = System.delegate.entities['name']
        email_cls = System.delegate.entities['email']
        section_cls = System.delegate.entities['section']
        session = session_cls(key=str(data_dict['key']))

        exp_id=str(data_dict['experiment']['id'])
        experiment = System.do("get_experiment", exp_id=exp_id)
        if 'name' not in data_dict['experiment']:
            exp_name=str(experiment.get("exp_name"))
        else:
            exp_name=data_dict['experiment']['name']

        if 'overview' not in data_dict['experiment']:
            overview=str(experiment.get("overview"))
        else:
            overview=data_dict['experiment']['overview']

        if 'institute_id' not in data_dict['experiment']:
            inst=experiment.get("institute")
        else:
            inst= System.do("get_institute", institute_id=
                                data_dict['experiment']['institute_id'])

        if 'discipline_id' not in data_dict['experiment']:
            disc=experiment.get("discipline")
        else:
            disc= System.do("get_discipline", discipline_id=
                                data_dict['experiment']['discipline_id'])

        if 'integration_level' not in data_dict['experiment']:
            integration_status=experiment.get("integration_status")
        else:
            integration_status= System.do("get_integration_status_by_IL", 
                      integration_level=
                        data_dict['experiment']['integration_level'])

        if 'hosting_info' not in data_dict['experiment']:
            hosting_info_list = experiment.get("hosting_info")
        else:
            hosting_info = data_dict['experiment']['hosting_info']
            hosting_info_list = []
            for hosting_info_x in hosting_info:
                hosting_info = System.do("get_hosting_info",
                                            hosted_url=
                                            hosting_info_x['hosted_url'])
                if hosting_info is None:
                    hosting_info = hosting_info_cls\
                      (hosting_status=str(hosting_info_x['hosting_status']), \
                           hosted_url=str(hosting_info_x['hosted_url']), \
                      hosted_on=str(hosting_info_x['hosted_on']))
                    hosting_info = System.do("add_hosting_info",
                                                 hosting_info=hosting_info,
                                                 session=session)
                hosting_info_list.append(hosting_info)

        if 'assets' not in data_dict['experiment']:
            asset_list = experiment.get("assets")
        else:
            assets = data_dict['experiment']['assets']
            asset_list = []
            for asset_x in assets:
                asset = System.do("get_asset", path=asset_x['path'])
                if asset is None:
                    asset_type = asset_type_cls(asset_type=\
                                                    str(asset_x['asset_type']))
                    asset = asset_cls(asset_type=asset_type, \
                                        path=str(asset_x['path']))
                    asset = System.do("add_asset", asset=asset, session=session)
                asset_list.append(asset)

        if 'sections' not in data_dict['experiment']:
            section_list = lab.get("sections")
        else:
            sections = data_dict['experiment']['sections']
            section_list = []
            for section_x in sections:
                section = System.do("get_section", name=section_x['name'])
                if section is None:
                    section = section_cls(name=str(section_x['name']))
                    section = System.do("add_section", section=section, session=session)
                section_list.append(section)

        if 'developers' not in data_dict['experiment']:
            developer_list = experiment.get("developers")
        else:
            developers = data_dict['experiment']['developers']
            developer_list = []
            for developer_x in developers:
                name = name_cls(name=developer_x['name'])
                email = email_cls(email=developer_x['email'])
                developer = System.do("get_developer", email=email)
                if developer is None:
                    developer = developer_cls(name=name, email=email)
                    developer = System.do("add_developer", developer=developer,
                                              session=session)
                developer_list.append(developer)

        try:
            current_app.logger.debug("running operation update_experiment")
            exp = System.do("update_experiment", exp_name=exp_name, 
                                    experiment=experiment, overview=overview,
                                    session=session, institute=inst, 
                                    discipline=disc, 
                                    integration_status=integration_status, 
                                    hosting_info=hosting_info_list,
                                    assets=asset_list, 
                                    developers=developer_list,
                                    sections=section_list)
            current_app.logger.debug("completed operation update_experiment")
            return exp.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestUpdateExperiment
 #+NAME: test_class_update_Experiment
 #+BEGIN_SRC python
class TestUpdateExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_update_experiment_name_in_system_interface(self):
        print "test_update_experiment_name_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integration_status = SystemInterface.add_integration_status(data_dict)

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hosting_info = SystemInterface.add_hosting_info(data_dict)

        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/image.png"
			}
		      ]

                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'computer science',
                    'discipline_id': 'CSE',
		    "assets": [
			{
			  "asset_type": "logo",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        discipline = SystemInterface.add_discipline(data_dict)
     
        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Theory'
                    }
        section = SystemInterface.add_section(data_dict)

        data_dict = {
                    "key" : KEY,
		    "experiment": {
		      "id": "exp123",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
		  }

        exp = SystemInterface.add_experiment(data_dict)

        data_dict1 = {
                    'key' : KEY,
                    'integration_level': 3
                    }

        integration_status = SystemInterface.add_integration_status(data_dict1)

        data_dict1 = {
                    'key' : KEY,
                    'asset_type': 'Video1',
                    'path': 'vlabs.ac.in/images/video/icon.png'
                   }

        asset = SystemInterface.add_asset(data_dict1)


        data_dict1 = {
                    'key' : KEY,
                    'institute_name': 'IIT Kharagpur',
                    'institute_id': 'IITKgp',
		    "assets": [
			{
			  "asset_type": "logo",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        institute = SystemInterface.add_institute(data_dict1)

        data_dict1 = {
                    'key' : KEY,
                    'discipline_name': 'electronics & engineering',
                    'discipline_id': 'ECE',
		    "assets": [
			{
			  "asset_type": "logo",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]
                   }

        discipline = SystemInterface.add_discipline(data_dict1)
        
        data_dict1 = {
                    'key' : KEY,
                    'name': 'Aim'
                    }
        section = SystemInterface.add_section(data_dict1)


        data_dict1 = {"key" : KEY,
                      "experiment": {
                         "overview": "overview",
                         "name": "queue",
                         "id": "exp123",
                         "discipline_id": "CSE",
                         "institute_id": "IITK",
                         'integration_level': 3,
                         "sections": [
                            "Theory",
                            "Objective",
                            "Tutorial",
                            "Illustration",
                            "Procedure",
                            "Experiment",
                            "Observations",
                            "Assignment",
                            "References"
                         ],
                         "assets": [
                            {
                               "asset_type": "image",
                               "path": "vlabs.ac.in/images/static/logo.png"
                            }
                         ],
                         "developers": [
                            {
                               "name": "Prof. Dharamaja",
                               "email": "abc@gmail.com"
                            },
                            {
                               "name": "Prof. Pallavi Pawar",
                               "email": "pallavi.pawar@gmail.com"
                            }
                         ],
                         "hosting_info": [
                            {
                               "hosting_status": "hosted",
                               "hosted_on": "cloud",
                               "hosted_url": "http://cse14-iiith.ac.in"
                            },
                            {
                               "hosting_status": "hosted",
                               "hosted_on": "server",
                               "hosted_url": "http://iitkgp.vlab.co.in/"
                            }
                         ]
                      }
                   }
        
        exp1 = SystemInterface.update_experiment(data_dict1)
        self.assertEqual(exp1.get("exp_name"), data_dict1['experiment']['name'])
        self.assertEqual(exp1.get("overview"), data_dict1['experiment']['overview'])
        self.assertEqual(exp1.get("exp_id"), data_dict1['experiment']['id'])
        self.assertEqual(exp1.get("institute").get("institute_id"),
                             data_dict1['experiment']['institute_id'])
        self.assertEqual(exp1.get("discipline").get("discipline_id"),
                             data_dict1['experiment']['discipline_id'])
        self.assertEqual(exp1.get("integration_status").\
                             get("integration_level"),
                             data_dict1['experiment']['integration_level'])
        self.assertEqual(exp1.get("hosting_info")[0].get("hosted_url"), 
                             data_dict1['experiment']['hosting_info'][0]['hosted_url'])
        self.assertEqual(exp1.get("hosting_info")[1].get("hosted_url"), 
                             data_dict1['experiment']['hosting_info'][1]['hosted_url'])
        self.assertEqual(exp1.get("developers")[0].get("email").get("email"), 
                             data_dict1['experiment']['developers'][0]['email'])
        self.assertEqual(exp1.get("developers")[1].get("email").get("email"), 
                             data_dict1['experiment']['developers'][1]['email'])
        self.assertEqual(exp1.get("assets")[0].get("path"), 
                             data_dict1['experiment']['assets'][0]['path'])
        self.assertEqual(exp1.get("sections")[0].get("name"), 
                             data_dict1['experiment']['sections'][1])


 #+END_SRC


** Update Institute
#+NAME: class_update_institute
#+begin_src python       
    @staticmethod
    def update_institute(data_dict):
        session_cls = System.delegate.entities['session']
        asset_cls = System.delegate.entities['asset']
        asset_type_cls = System.delegate.entities['asset_type']
        session = session_cls(key=str(data_dict['key']))

        institute = System.do("get_institute", institute_id=str(data_dict['institute_id']))

        if 'assets' not in data_dict:
            asset_list = institute.get("assets")
        else:
            assets = data_dict['assets']
            asset_list = []
            for asset_x in assets:
                asset = System.do("get_asset", path=asset_x['path'])
                if asset is None:
                    asset_type = asset_type_cls(asset_type=asset_x['asset_type'])
                    asset = asset_cls(asset_type=asset_type, \
                                        path=str(asset_x['path']))
                    asset = System.do("add_asset", asset=asset, session=session)
                asset_list.append(asset)

        if 'institute_name' not in data_dict:
            institute_name=str(institute.get("institute_name"))
        else:
            institute_name=data_dict['institute_name']

        try:
            current_app.logger.debug("running operation update_institute")
            institute = System.do("update_institute", institute=institute,
                                    institute_name=institute_name, 
                                    session=session, assets=asset_list)
            current_app.logger.debug("completed operation update_institute")
            return institute
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestUpateInstitute 
 #+NAME: test_class_update_Institute
 #+BEGIN_SRC python
class TestUpdateInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_update_institute_name_in_system_interface(self):
        print "test_update_institute_name_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
                    'overview' : 'overview',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict1 = {
                    'key' : KEY,
                    'institute_name': 'IIT Delhi',
                    'institute_id': 'IITK',
		    "assets": [
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/images/static/icon.png"
			}
		      ]
                   }


        institute1 = SystemInterface.update_institute(data_dict1)
        
        self.assertEqual(institute1.get("institute_name"), data_dict1['institute_name'])
        self.assertEqual(institute1.get("assets")[0].get("path"), 
                             data_dict1['assets'][0]['path'])
 #+END_SRC

** Update Section
#+NAME: class_update_section
#+begin_src python
    @staticmethod
    def update_section(data_dict):
        session_cls = System.delegate.entities['session']
        section_cls = System.delegate.entities['section']

        session = session_cls(key=data_dict['key'])
        section = section_cls.get_by_id(data_dict['s_id'])

        if 'name' not in data_dict:
            name=str(section.get("name"))
        else:
            name=data_dict['name']

        try:
            current_app.logger.debug("running operation update_section")
            section = System.do("update_section", section=section, name=name,\
                                             session=session)
            current_app.logger.debug("completed operation update_section")
            return section.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestUpdateSection
 #+NAME: test_class_update_Section
 #+BEGIN_SRC python
class TestUpdateSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_update_section_name_in_system_interface(self):
        print "test_update_section_name_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'name': 'Theory'
                   }

        data_dict1 = {
                    'key' : KEY,
                    's_id': 1,
                    'name': 'Quiz'
                   }

        section = SystemInterface.add_section(data_dict)
        section1 = SystemInterface.update_section(data_dict1)
        
        self.assertEqual(section1.get("name"), data_dict1['name'])

 #+END_SRC

** Update Discipline
#+NAME: class_update_discipline
#+begin_src python       
    @staticmethod
    def update_discipline(data_dict):
        session_cls = System.delegate.entities['session']
        asset_cls = System.delegate.entities['asset']
        asset_type_cls = System.delegate.entities['asset_type']
        session = session_cls(key=data_dict['key'])

        discipline_id = str(data_dict['discipline_id'])
        discipline = System.do("get_discipline", discipline_id=discipline_id)

        if 'assets' not in data_dict:
            asset_list = discipline.get("assets")
        else:
            assets = data_dict['assets']
            asset_list = []
            for asset_x in assets:
                asset = System.do("get_asset", path=asset_x['path'])
                if asset is None:
                    asset_type = asset_type_cls(asset_type=asset_x['asset_type'])
                    asset = asset_cls(asset_type=asset_type, \
                                        path=str(asset_x['path']))
                    asset = System.do("add_asset", asset=asset, session=session)
                asset_list.append(asset)

        if "discipline_name" not in data_dict:
            discipline_name=str(discipline.get("discipline_name"))
        else:
            discipline_name=data_dict["discipline_name"]

        try:
            current_app.logger.debug("running operation update_discipline")
            discipline = System.do("update_discipline", discipline=discipline,
                                    discipline_name=discipline_name, 
                                    session=session, assets=asset_list)
            current_app.logger.debug("completed operation update_discipline")
            return discipline
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestUpateDiscipline 
 #+NAME: test_class_update_Discipline
 #+BEGIN_SRC python
class TestUpdateDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_update_discipline_name_in_system_interface(self):
        print "test_update_discipline_name_in_system_interface"
 
        data_dict = {'discipline_name': 'Computer Science',
                    'discipline_id': 'CSE',
                    'key' : KEY,
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        data_dict1 = {'discipline_name': 'Computer Science and Engineering',
                      'discipline_id': 'CSE',
		      "assets": [
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/images/static/icon.png"
			}
		      ],
                      'key' : KEY
                     }

        dis1 = SystemInterface.add_discipline(data_dict)
        dis = SystemInterface.update_discipline(data_dict1)
        
        self.assertEqual(dis.get("discipline_name"), data_dict1['discipline_name'])
        self.assertEqual(dis.get("assets")[0].get("path"), 
                             data_dict1['assets'][0]['path'])

 #+END_SRC

** Update Hosting_Info
#+NAME: class_update_hosting_info
#+begin_src python       
    @staticmethod
    def update_hosting_info(data_dict):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=data_dict['key'])

        hosted_url = str(data_dict['hosted_url'])
        hosting_info = System.do("get_hosting_info", hosted_url=hosted_url)

        if 'hosting_status' not in data_dict:
            hosting_status=hosting_info.get("hosting_status")
        else:
            hosting_status=data_dict['hosting_status']

        if 'hosted_on' not in data_dict:
            hosted_on=str(hosting_info.get("hosted_on"))
        else:
            hosted_on=data_dict['hosted_on']

        try:
            current_app.logger.debug("running operation update_hosting_info")
            hosting_info = System.do("update_hosting_info", hosting_info=hosting_info,
                                    hosting_status=hosting_status, hosted_on=hosted_on,
                                    session=session)
            current_app.logger.debug("completed operation update_hosting_info")
            return hosting_info.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestUpateHosting_Info
 #+NAME: test_class_update_hosting_info
 #+BEGIN_SRC python
class TestUpdateHosting_Info(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_update_hosting_info_in_system_interface(self):
        print "test_update_hosting_info_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud'
                    }

        data_dict1 = {
                    'key' : KEY,
                    'hosting_status': 'not hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'server'
                   }

        hosting_info = SystemInterface.add_hosting_info(data_dict)
        hosting_info1 = SystemInterface.update_hosting_info(data_dict1)
        
        self.assertEqual(hosting_info1.get("hosting_status"), data_dict1['hosting_status'])
        self.assertEqual(hosting_info1.get("hosted_on"), data_dict1['hosted_on'])

 #+END_SRC

** Update Developer
#+NAME: class_update_developer
#+begin_src python
    @staticmethod
    def update_developer(data_dict):
        session_cls = System.delegate.entities['session']
        name_cls = System.delegate.entities['name']
        email_cls = System.delegate.entities['email']
        developer_cls = System.delegate.entities['developer']

        session = session_cls(key=str(data_dict['key']))
        email = email_cls(email=str(data_dict['email']))
        developer = System.do("get_developer", email=email)

        if 'name' not in data_dict:
            name=str(developer.get("name"))
        else:
            name=name_cls(name=str(data_dict['name']))

        try:
            current_app.logger.debug("running operation update_developer")
            developer = System.do("update_developer", name=name,
                                      developer=developer, session=session)
            current_app.logger.debug("completed operation update_developer")
            return developer

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+end_src

*** TestUpateDeveloper
 #+NAME: test_class_update_Developer
 #+BEGIN_SRC python
class TestUpdateDeveloper(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_update_developer_name_in_system_interface(self):
        print "test_update_developer_name_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/image.png"
			}
		      ]

                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'computer science',
                    'discipline_id': 'CSE',
		    "assets": [
			{
			  "asset_type": "logo",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict1 = {
                    'key': KEY,
                    'institute_name': 'IIT Kharagpur',
                    'institute_id': 'IITKgp',
		    "assets": [
			{
			  "asset_type": "logo",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        institute1 = SystemInterface.add_institute(data_dict1)

        data_dict1 = {
                    'key' : KEY,
                    'discipline_name': 'electronics engineering',
                    'discipline_id': 'ece',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/image.png"
			}
		      ]

                    }


        discipline1 = SystemInterface.add_discipline(data_dict1)


        data_dict1 = {
                    'key': KEY,
                    'email': 'abc@gmail.com',
                    'name': 'Prof. Raja'
                   }

        developer1 = SystemInterface.update_developer(data_dict1)

        self.assertEqual(developer1.get("name").get("name"),
                             data_dict1['name'])

 #+END_SRC

 
** Update Name
#+NAME: class_update_name
#+begin_src python
    @staticmethod
    def update_name(data_dict):
        session_cls = System.delegate.entities['session']
        name_cls = System.delegate.entities['name']

        session = session_cls(key=data_dict['key'])
        name = name_cls.get_by_id(data_dict['n_id'])

        if 'name' not in data_dict:
            n_name=str(name.get("name"))
        else:
            n_name=data_dict['name']

        try:
            current_app.logger.debug("running operation update_name")
            name = System.do("update_name", name=name, n_name=n_name,\
                                             session=session)
            current_app.logger.debug("completed operation update_name")
            return name.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestUpdateName
 #+NAME: test_class_update_Name
 #+BEGIN_SRC python
class TestUpdateName(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_update_name_in_system_interface(self):
        print "test_update_name_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamraj'
                   }

        data_dict1 = {
                    'key' : KEY,
                    'n_id': 1,
                    'name': 'Prof. Dharam'
                   }

        name = SystemInterface.add_name(data_dict)
        name1 = SystemInterface.update_name(data_dict1)
        
        self.assertEqual(name1.get("name"), data_dict1['name'])

 #+END_SRC


** Delete Lab
#+NAME: class_delete_lab
#+begin_src python
    @staticmethod
    def delete_lab(lab_id, key):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=str(key))
        try:
            current_app.logger.debug("running operation delete_lab")
            lab = System.do("delete_lab", lab_id=str(lab_id), session=session)
            current_app.logger.debug("completed operation delete_lab")
            return lab
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteLab
 #+NAME: test_class_delete_lab
 #+BEGIN_SRC python
class TestDeleteLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_delete_lab_in_system_interface(self):
        print "test_delete_lab_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integration_status = SystemInterface.add_integration_status(data_dict)
        
        data_dict = {
		   'key' : KEY,
		   'name': 'Procedure'
		  }

        section = SystemInterface.add_section(data_dict)


        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hosting_info = SystemInterface.add_hosting_info(data_dict)

        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
 		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/image.png"
			}
		      ]

                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'computer science',
                    'discipline_id': 'CSE',
		    "assets": [
			{
			  "asset_type": "logo",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        discipline = SystemInterface.add_discipline(data_dict)
 
        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)


        data_dict = {
                    "key" : KEY,
		    "experiment": {
		      "id": "exp123",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse1-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
		  }


        experiment = SystemInterface.add_experiment(data_dict)

        data_dict = {
           "key" : KEY,     
	   "lab": {
	       "id": "cse02",
	       "name": "Computer Programming",
               "overview": "overview",
	       "discipline_id": "CSE",
	       "institute_id": "IITK",
               "phase":[{"phase_id":1,  "phase_id":2}],
	       "developers": [
		   {
		       "name": "Dinesh Malviya",
		       "email": "xyz@gmail.com"
		   },
		   {
		       "name": "Ashish Ahuja",
		       "email": "abc@gmail.com"
		   }
	       ],
	       "hosting_info": [
		   {
		       "hosting_status": "hosted",
		       "hosted_on": "cloud",
		       "hosted_url": "http://cs14-iiith.vlabs.ac.in"
		   },
		   {
		       "hosting_status": "hosted",
		       "hosted_on": "college-cloud",
		       "hosted_url": "http://cse14-iiith.co.in"
		   }
	       ],
	       "integration_level": 4,
	       "assets": [
		   {
		       "asset_type": "image",
		       "path": "vlabs.ac.in/images/static/logo.png"
		   },
		   {
		       "asset_type": "video",
		       "path": "vlabs.ac.in/video/abc.mkv"
		   }
	       ],
	       "sections": [
		   {
		       "name": "Introduction"
		   }
		   		   
	       ],
		       "experiments": [
			   "exp123"
		       ]

	   }
       }


        data_dict1 = {
               "key" : KEY,     
               "lab": {
                   "id": "cse03",
                   "name": "Computer Programming",
                   "overview": "overview",
                   "discipline_id": "CSE",
                   "institute_id": "IITK",
                   "phase":[{"phase_id":1,  "phase_id":2}],
                   "developers": [
                       {
                           "name": "Dinesh Malviya",
                           "email": "xyz@gmail.com"
                       },
                       {
                           "name": "Ashish Ahuja",
                           "email": "abc@gmail.com"
                       }
                   ],
                   "hosting_info": [
                       {
                           "hosting_status": "hosted",
                           "hosted_on": "cloud",
                           "hosted_url": "http://ce14-iiith.vlabs.ac.in"
                       },
                       {
                           "hosting_status": "hosted",
                           "hosted_on": "college-cloud",
                           "hosted_url": "http://se14-iiith.ac.in"
                       }
                   ],
                   "integration_level": 4,
                   "assets": [
                       {
                           "asset_type": "image",
                           "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                           "asset_type": "video",
                           "path": "vlabs.ac.in/video/abc.mkv"
                       }
                   ],
                   "sections": [
                       {
                           "name": "Introduction"
                       }
                                              
                   ],
                   "experiments": [
                   "exp123"
                   ]

               }
           }

        lab = SystemInterface.add_lab(data_dict)
        lab1 = SystemInterface.add_lab(data_dict1)
        lab_id = SystemInterface.delete_lab("cse02", KEY)
        
        self.assertEqual(lab_id, "cse02")

 #+END_SRC


** Delete Experiment
#+NAME: class_delete_experiment
#+begin_src python
    @staticmethod
    def delete_experiment(exp_id, key):
        session_cls = System.delegate.entities['session']

        session = session_cls(key=str(key))
        try:
            current_app.logger.debug("running operation delete_experiment")
            exp = System.do("delete_experiment", exp_id=str(exp_id),
                                    session=session)
            current_app.logger.debug("completed operation delete_experiment")
            return exp
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteExperiment 
 #+NAME: test_class_delete_experiment
 #+BEGIN_SRC python
class TestDeleteExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_delete_experiment_in_system_interface(self):
        print "test_delete_experiment_in_system_interface"

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hosting_info = SystemInterface.add_hosting_info(data_dict)

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integration_status = SystemInterface.add_integration_status(data_dict)


        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/image.png"
			}
		      ]

                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'computer science',
                    'discipline_id': 'CSE',
		    "assets": [
			{
			  "asset_type": "logo",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        discipline = SystemInterface.add_discipline(data_dict)
      
        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)
        data_dict = {
                    "key" : KEY,
		    "experiment": {
		      "id": "exp123",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
		  }


        data_dict1 = {
                    "key" : KEY,
		    "experiment": {
		      "id": "exp23",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
		  }

        exp = SystemInterface.add_experiment(data_dict)
        exp1 = SystemInterface.add_experiment(data_dict1)
        exp_id = SystemInterface.delete_experiment('exp123', KEY)
        
        self.assertEqual(exp_id, 'exp123')

 #+END_SRC


** Delete Institute
#+NAME: class_delete_institute
#+begin_src python
    @staticmethod
    def delete_institute(institute_id, key):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=str(key))

        try:
            current_app.logger.debug("running operation delete_institute")
            institute_id = System.do("delete_institute", institute_id=str(institute_id),
                                      session=session)
            current_app.logger.debug("completed operation delete_institute")
            return institute_id
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteInstitute 
 #+NAME: test_class_delete_institute
 #+BEGIN_SRC python
class TestDeleteInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_delete_institute_in_system_interface(self):
        print "test_delete_institute_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]
                    }

        data_dict1 = {
                    'key' : KEY,
                    'institute_name': 'IIT Kharagpur',
                    'institute_id': 'IITKgp',
		    "assets": [
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/images/static/icon.png"
			}
		      ]
                     }

        institute = SystemInterface.add_institute(data_dict)
        institute1 = SystemInterface.add_institute(data_dict1)
        institute_id = SystemInterface.delete_institute("IITKgp", KEY)
        
        self.assertEqual(institute_id, "IITKgp")

 #+END_SRC


** Delete Section
#+NAME: class_delete_section
#+begin_src python
    @staticmethod
    def delete_section(s_id, key):
        session_cls = System.delegate.entities['session']

        session = session_cls(key=str(key))
        try:
            current_app.logger.debug("running operation delete_section")
            section = System.do("delete_section", s_id=int(s_id),
                                    session=session)
            current_app.logger.debug("completed operation delete_section")
            return section
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteSection
 #+NAME: test_class_delete_section
 #+BEGIN_SRC python
class TestDeleteSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_delete_section_in_system_interface(self):
        print "test_delete_section_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'name': 'Quiz'
                   }

        data_dict1 = {
                    'key' : KEY,
                    'name' : 'Theory'
                   }

        exp = SystemInterface.add_section(data_dict)
        exp1 = SystemInterface.add_section(data_dict1)
        s_id = SystemInterface.delete_section(1, data_dict1['key'])
        
        self.assertEqual(s_id, 1)

 #+END_SRC


** Delete Discipline
#+NAME: class_delete_discipline
#+begin_src python       
    @staticmethod
    def delete_discipline(discipline_id, key):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=str(key))

        try:
            current_app.logger.debug("running operation delete_discipline")
            discipline_id = System.do("delete_discipline", discipline_id=str(discipline_id),
                                    session=session)
            current_app.logger.debug("completed operation delete_discipline")
            return discipline_id
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteDiscipline 
 #+NAME: test_class_delete_Discipline
 #+BEGIN_SRC python
class TestDeleteDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_delete_discipline_name_in_system_interface(self):
        print "test_update_discipline_name_in_system_interface"

        data_dict = {'discipline_name': 'Computer Science',
                    'discipline_id': 'CSE',
                    'key' : KEY,
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]
                    }

        data_dict1 = {'discipline_name': 'Electronics and Communication',
                    'discipline_id': 'ECE',
                    'key' : KEY,
		    "assets": [
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/images/static/icon.png"
			}
		      ]
                    }

        dis = SystemInterface.add_discipline(data_dict)
        dis1 = SystemInterface.add_discipline(data_dict1)
        discipline_id = SystemInterface.delete_discipline('ECE', KEY)

        self.assertEqual(discipline_id,'ECE')

 #+END_SRC


** Delete Hosting_Info
#+NAME: class_delete_hosting_info
#+begin_src python
    @staticmethod
    def delete_hosting_info(hosted_url, key):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=str(key))

        try:
            current_app.logger.debug("running operation delete_hosting_info")
            hosting_info_id = System.do("delete_hosting_info", hosted_url=str(hosted_url),
                                      session=session)
            current_app.logger.debug("completed operation delete_hosting_info")
            return hosting_info_id
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteHostedInfo
 #+NAME: test_class_delete_hosting_info
 #+BEGIN_SRC python
class TestDeleteHosting_Info(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_delete_hosting_info_in_system_interface(self):
        print "test_delete_hosting_info_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud'
                    }

        hosting_info = SystemInterface.add_hosting_info(data_dict)

        data_dict1 = {
                    'key' : KEY,
                    'hosting_status': 'not hosted',
                    'hosted_url': 'http://cse12-iiith.vlabs.ac.in',
                    'hosted_on': 'server'
                     }
        hosting_info1 = SystemInterface.add_hosting_info(data_dict1)
        hosted_url = SystemInterface.delete_hosting_info("http://cse14-iiith.vlabs.ac.in", KEY)
        
        self.assertEqual(hosted_url, "http://cse14-iiith.vlabs.ac.in")

 #+END_SRC


** Delete Name
#+NAME: class_delete_name
#+begin_src python
    @staticmethod
    def delete_name(id):
        session_cls = System.delegate.entities['session']

        session = session_cls(key=KEY)
        try:
            current_app.logger.debug("running operation delete_name")
            name = System.do("delete_name", n_id=int(id), session=session)
            current_app.logger.debug("completed operation delete_name")
            return name
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteName
 #+NAME: test_class_delete_name
 #+BEGIN_SRC python
class TestDeleteName(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_delete_name_in_system_interface(self):
        print "test_delete_name_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'name': 'Prof. Dharamaraja'
                   }

        data_dict1 = {
                    'key': KEY,
                    'name' : 'Prof. Raja'
                   }

        name = SystemInterface.add_name(data_dict)
        name1 = SystemInterface.add_name(data_dict1)
        name_id = SystemInterface.delete_name(1)

        self.assertEqual(name_id, 1)

 #+END_SRC


** Delete Email
#+NAME: class_delete_email
#+begin_src python
    @staticmethod
    def delete_email(email, key):
        session_cls = System.delegate.entities['session']
        email_cls = System.delegate.entities['email']

        session = session_cls(key=str(key))
        email = email_cls(email=str(email))

        try:
            current_app.logger.debug("running operation delete_email")
            email = System.do("delete_email", email=email,
                                    session=session)
            current_app.logger.debug("completed operation delete_email")
            return email
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteEmail
 #+NAME: test_class_delete_email
 #+BEGIN_SRC python
class TestDeleteEmail(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_delete_email_in_system_interface(self):
        print "test_delete_email_in_system_interface"

        data_dict = {
                    'key': KEY,
                    'email': 'abc@gmail.com'
                   }

        data_dict1 = {
                    'key': KEY,
                    'email' : 'xyz@gmail.com'
                   }

        email = SystemInterface.add_email(data_dict)
        email1 = SystemInterface.add_email(data_dict1)
        email_id = SystemInterface.delete_email(data_dict1['email'],
                                                data_dict1['key'])

        self.assertEqual(email_id.get("email"), data_dict1["email"])

 #+END_SRC


** Delete Developer
#+NAME: class_delete_developer
#+begin_src python
    @staticmethod
    def delete_developer(email, key):
        session_cls = System.delegate.entities['session']
        email_cls = System.delegate.entities['email']

        session = session_cls(key=str(key))
        email = email_cls(email=str(email))

        try:
            current_app.logger.debug("running operation delete_developer")
            developer = System.do("delete_developer", email=email,
                                    session=session)
            current_app.logger.debug("completed operation delete_developer")
            return developer

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src
   
*** TestDeleteDeveloper
 #+NAME: test_class_delete_developer
 #+BEGIN_SRC python
class TestDeleteDeveloper(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_delete_developer_in_system_interface(self):
        print "test_delete_developer_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]
                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'computer science',
                    'discipline_id': 'CSE',
		    "assets": [
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/images/static/icon.png"
			}
		      ]
                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com',
                    'institute_id': 'IITK',
                    'discipline_id': 'CSE'
                   }

        data_dict1 = {
                    'key': KEY,
                    'name' : 'Prof. Raja',
                    'email': 'xyz@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)
        developer1 = SystemInterface.add_developer(data_dict1)
        dev = SystemInterface.delete_developer(data_dict['email'],
                                                      data_dict['key'])
        
        self.assertEqual(dev.get("email"), data_dict['email'])

 #+END_SRC


** Delete Integration_Status
#+NAME: class_delete_integration_status
#+begin_src python
    @staticmethod
    def delete_integration_status(integration_level, key):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=str(key))

        try:
            current_app.logger.debug("running operation delete_integration_status")
            integration_status_id = System.do("delete_integration_status", 
                                      integration_level=int(integration_level),
                                      session=session)
            current_app.logger.debug("completed operation delete_integration_status")
            return integration_status_id

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteIntegration_Status
 #+NAME: test_class_delete_integration_status
 #+BEGIN_SRC python
class TestDeleteIntegration_Status(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_delete_integration_status_in_system_interface(self):
        print "test_delete_integration_status_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        data_dict1 = {
                    'key' : KEY,
                    'integration_level': 2
                     }

        integration_status = SystemInterface.add_integration_status(data_dict)
        integration_status1 = SystemInterface.add_integration_status(data_dict1)
        integration_level = SystemInterface.delete_integration_status(2, KEY)
        
        self.assertEqual(integration_level, 2)

 #+END_SRC


** Get Institute by InstituteId
#+NAME: class_get_institute_by_institute_id
#+begin_src python
    @staticmethod
    def get_institute(institute_id):
        session_cls = System.delegate.entities['session']
        try:
            current_app.logger.debug("running operation get_institute_by_institute_id")
            institute = System.do("get_institute", institute_id=str(institute_id))
            current_app.logger.debug("completed operation get_institute_by_institute_id")
            if not institute:
                return ("No institute found with instituteid: %s" % (institute_id))
            return institute.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetInstituteByInstituteId
 #+NAME: test_class_get_institute_by_instituteid
 #+BEGIN_SRC python
class TestGetInstituteByInstituteId(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_institute_by_instituteid_in_system_interface(self):
        print "test_get_institute_by_instituteid_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Delhi',
                    'institute_id': 'IITD',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/image.png"
			}
		      ]
                    }

        data_dict1 = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/image.png"
			}
		      ]
                    }

        institute = SystemInterface.add_institute(data_dict)
        institute1 = SystemInterface.add_institute(data_dict1)

        institute = SystemInterface.get_institute(data_dict['institute_id'])
        institute1 = SystemInterface.get_institute(data_dict1['institute_id'])
        
        self.assertEqual(institute.get("institute_id"), data_dict['institute_id'])
        self.assertEqual(institute1.get("institute_id"), data_dict1['institute_id'])

 #+END_SRC


** Get Lab by LabId
#+NAME: class_get_lab_by_lab_id
#+begin_src python
    @staticmethod
    def get_lab(lab_id):
        try:
            current_app.logger.debug("running operation get_lab_by_lab_id")
            lab = System.do("get_lab", lab_id=str(lab_id))
            current_app.logger.debug("completed operation get_lab_by_lab_id")
            if not lab:
                return ("No lab found with labid: %s" % (lab_id))
            return lab.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetLabByLabId
 #+NAME: test_class_get_lab_by_labid
 #+BEGIN_SRC python
class TestGetLabByLabId(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_lab_by_labid_in_system_interface(self):
        print "test_get_lab_by_labid_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integration_status = SystemInterface.add_integration_status(data_dict)

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                    }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hosting_info = SystemInterface.add_hosting_info(data_dict)

        data_dict = {
		   'key' : KEY,
		   'name': 'Procedure'
		  }

        section = SystemInterface.add_section(data_dict)

        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
 		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'computer science',
                    'discipline_id': 'CSE',
 		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,                    
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)


        data_dict = {
                    "key" : KEY,
		    "experiment": {
		      "id": "exp123",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
		  }


        experiment = SystemInterface.add_experiment(data_dict)

        data_dict = {
               "key" : KEY,
               "lab": {
                   "id": "cse03",
                   "name": "Computer Programming",
                   "overview": "overview",
                   "discipline_id": "CSE",
                   "institute_id": "IITK",
                   "phase":[{"phase_id":1,  "phase_id":2}],
                   "developers": [
                       {
                           "name": "Dinesh Malviya",
                           "email": "xyz@gmail.com"
                       },
                       {
                           "name": "Ashish Ahuja",
                           "email": "abc@gmail.com"
                       }
                   ],
                   "hosting_info": [
                       {
                           "hosting_status": "hosted",
                           "hosted_on": "cloud",
                           "hosted_url": "http://cse1-iiith.vlabs.ac.in"
                       },
                       {
                           "hosting_status": "hosted",
                           "hosted_on": "college-cloud",
                           "hosted_url": "http://cse4-iiith.ac.in"
                       }
                   ],
                   "integration_level": 4,
                   "assets": [
                       {
                           "asset_type": "image",
                           "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                           "asset_type": "video",
                           "path": "vlabs.ac.in/video/abc.mkv"
                       }
                   ],
                   "sections": [
                       {
                           "name": "Introduction"
                       }
                                              
                   ],
                       "experiments": [
                               "exp123"
                           ]

               }
           }

        data_dict1 = {
               "key" : KEY,
               "lab": {
                   "id": "cse02",
                   "name": "Computer Programming",
                   "overview": "overview",
                   "discipline_id": "CSE",
                   "institute_id": "IITK",
                   "phase":[{"phase_id":1,  "phase_id":2}],
                   "developers": [
                       {
                           "name": "Dinesh Malviya",
                           "email": "xyz@gmail.com"
                       },
                       {
                           "name": "Ashish Ahuja",
                           "email": "abc@gmail.com"
                       }
                   ],
                   "hosting_info": [
                       {
                           "hosting_status": "hosted",
                           "hosted_on": "cloud",
                           "hosted_url": "http://ce14-iiith.vlabs.ac.in"
                       },
                       {
                           "hosting_status": "hosted",
                           "hosted_on": "college-cloud",
                           "hosted_url": "http://ce14-iiith.ac.in"
                       }
                   ],
                   "integration_level": 4,
                   "assets": [
                       {
                           "asset_type": "image",
                           "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                           "asset_type": "video",
                           "path": "vlabs.ac.in/video/abc.mkv"
                       }
                   ],
                   "sections": [
                       {
                           "name": "Introduction"
                       }
                                              
                   ],
                   "experiments": [
                   "exp123"
                   ]

               }
           }
        lab = SystemInterface.add_lab(data_dict)
        lab1 = SystemInterface.add_lab(data_dict1)

        lab = SystemInterface.get_lab(data_dict['lab']['id'])
        lab1 = SystemInterface.get_lab(data_dict1['lab']['id'])
        
        self.assertEqual(lab.get("lab_id"), data_dict['lab']['id'])
        self.assertEqual(lab1.get("lab_id"), data_dict1['lab']['id'])

 #+END_SRC


** Get Experiment by ExpId
#+NAME: class_get_lab_by_exp_id
#+begin_src python
    @staticmethod
    def get_experiment(exp_id):
        try:
            current_app.logger.debug("running operation get_lab_by_exp_id")
            exp = System.do("get_experiment", exp_id=str(exp_id))
            current_app.logger.debug("completed operation get_lab_by_exp_id")
            if not exp:
                return ("No exp found with expid: %s" % (exp_id))
            return exp.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetExpByExpId
 #+NAME: test_class_get_exp_by_expid
 #+BEGIN_SRC python
class TestGetExpByExpId(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_exp_by_expid_in_system_interface(self):
        print "test_get_exp_by_expid_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)


        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
 		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'computer science',
                    'discipline_id': 'CSE',
 		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        integration_status = SystemInterface.add_integration_status(data_dict)

        data_dict = {
                    'hosting_status': 'hosted',
                    'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                    'hosted_on': 'cloud',
                    'key' : KEY
                   }

        hosting_info = SystemInterface.add_hosting_info(data_dict)

        data_dict = {
                    "key" : KEY,
		    "experiment": {
		      "id": "exp123",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
                      "phase":[{"phase_id":1,  "phase_id":2}],
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
		  }


        data_dict1 = {
                    "key" : KEY,
		    "experiment": {
		      "id": "e99848",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
                      "phase":[{"phase_id":1,  "phase_id":2}],
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
		  }

        exp = SystemInterface.add_experiment(data_dict)
        exp1 = SystemInterface.add_experiment(data_dict1)

        exp = SystemInterface.get_experiment(data_dict['experiment']['id'])
        exp1 = SystemInterface.get_experiment(data_dict1['experiment']['id'])
        
        self.assertEqual(exp.get("exp_id"), data_dict['experiment']['id'])
        self.assertEqual(exp1.get("exp_id"), data_dict1['experiment']['id'])

 #+END_SRC


** Get Discipline by DisId
#+NAME: class_get_discipline_by_discipline_id
#+begin_src python
    @staticmethod
    def get_discipline(discipline_id):
        try:
            current_app.logger.debug("running operation get_discipline_by_discipline_id")
            dis = System.do("get_discipline", discipline_id=str(discipline_id))
            current_app.logger.debug("completed operation get_institute_by_institute_id")
            if not dis:
                return ("No discipline found with disid: %s" % (discipline_id))
            return dis.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetDisciplineByDisId
 #+NAME: test_class_get_discipline_by_disid
 #+BEGIN_SRC python
class TestGetDisciplineByDisciplineId(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_discipline_by_disid_in_system_interface(self):
        print "test_get_discipline_by_disid_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)


        data_dict = {'discipline_name': 'Computer Science',
                    'discipline_id': 'CSE',
                    'key' : KEY,
                    		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        data_dict1 = {'discipline_name': 'Electronics',
                    'discipline_id': 'ECE',
                    'key' : KEY,
                    		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        dis = SystemInterface.add_discipline(data_dict)
        dis1 = SystemInterface.add_discipline(data_dict1)

        dis = SystemInterface.get_discipline(data_dict['discipline_id'])
        dis1 = SystemInterface.get_discipline(data_dict1['discipline_id'])
        
        self.assertEqual(dis.get("discipline_id"), data_dict['discipline_id'])
        self.assertEqual(dis1.get("discipline_id"), data_dict1['discipline_id'])

 #+END_SRC


** Get Developer by email
#+NAME: class_get_developer_by_email
#+begin_src python
    @staticmethod
    def get_developer(email_id):
        try:
            email_cls = System.delegate.entities['email']
            email = email_cls(email=str(email_id))

            current_app.logger.debug("running operation get_lab_by_lab_id")
            developer = System.do("get_developer", email=email)
            current_app.logger.debug("completed operation get_lab_by_lab_id")
            if not developer:
                return ("No Developer found with email: %s" % (email_id))
            return developer.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetDeveloperByEmail
 #+NAME: test_class_get_developer_by_email
 #+BEGIN_SRC python
class TestGetDeveloperByEmail(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_developer_by_email_in_system_interface(self):
        print "test_get_developer_by_email_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        data_dict = {
                    'key' : KEY,
                    'institute_name': 'IIT Kanpur',
                    'institute_id': 'IITK',
                    		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                    }

        institute = SystemInterface.add_institute(data_dict)

        data_dict = {
                    'key' : KEY,
                    'discipline_name': 'computer science',
                    'discipline_id': 'CSE',
                    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ]

                   }

        discipline = SystemInterface.add_discipline(data_dict)

        data_dict = {
                    'key' : KEY,
                    'name': 'Prof. Dharamaja',
                    'email': 'abc@gmail.com'
                   }

        developer = SystemInterface.add_developer(data_dict)

        developer = SystemInterface.get_developer(data_dict['email'])
        
        self.assertEqual(developer.get("email").get("email"), 
                             data_dict['email'])
 #+END_SRC


** Get Integration_Status by IL
#+NAME: class_get_integration_status_by_IL
#+begin_src python
    @staticmethod
    def get_integration_status_by_IL(integration_level):
        try:
            current_app.logger.debug("running operation get_integration_status_"
                                     " by_integration_level")
            integration_status_id = System.do("get_integration_status_by_IL", 
                                      integration_level=int(integration_level))
            current_app.logger.debug("completed operation get_integration_"
                                     " status_by_integration_level")
            return integration_status_id

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetIntegration_StatusByIL
 #+NAME: test_class_get_integration_status_by_IL
 #+BEGIN_SRC python
class TestGetIntegration_StatusByIL(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_integration_status_by_IL_in_system_interface(self):
        print "test_get_integration_status_by_IL_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'integration_level': 4
                    }

        data_dict1 = {
                    'key' : KEY,
                    'integration_level': 2
                     }

        integration_status = SystemInterface.add_integration_status(data_dict)
        integration_status1 = SystemInterface.add_integration_status(data_dict1)
        integration_status = SystemInterface.get_integration_status_by_IL(2)
        
        self.assertEqual(integration_status.get("integration_level"), 2)

 #+END_SRC


** Add Asset
#+NAME: class_add_asset
#+begin_src python
    @staticmethod
    def add_asset(data_dict):
        session_cls = System.delegate.entities['session']       
        asset_cls = System.delegate.entities['asset']
        asset_type_cls = System.delegate.entities['asset_type']
    
        session = session_cls(key=data_dict['key'])
        del(data_dict['key'])

        asset_type = asset_type_cls(asset_type=str(data_dict['asset_type']))
        asset = asset_cls(asset_type=asset_type, path=str(data_dict['path']))

        try:
            current_app.logger.debug("running operation add_asset")
            asset = System.do("add_asset", asset=asset,
                                    session=session)
            current_app.logger.debug("completed operation add_asset")
            return asset.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

#+end_src

*** TestAddAsset 
#+NAME: test_class_add_asset
#+BEGIN_SRC python
class TestAddAsset(TestCase):
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_add_asset_in_system_interface(self):
        print "test_add_asset_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        asset_cls = System.delegate.entities['asset']
        asset = asset_cls.get_all()[0]

        self.assertEqual(asset.get("asset_type").get("asset_type"), 
                             data_dict['asset_type'])
        self.assertEqual(asset.get("path"), data_dict['path'])
        
#+END_SRC


** Update Asset
#+NAME: class_update_asset
#+begin_src python       
    @staticmethod
    def update_asset(data_dict):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=str(data_dict['key']))
        asset_type_cls = System.delegate.entities['asset_type']
        
        path = str(data_dict['path'])
        asset = System.do("get_asset", path=path)

        if 'asset_type' not in data_dict:
            asset_type=asset.get("asset_type")
        else:
            asset_type = asset_type_cls(asset_type=\
                                            str(data_dict['asset_type']))


        try:
            current_app.logger.debug("running operation update_asset")
            asset = System.do("update_asset", asset=asset,
                                    asset_type=asset_type, 
                                    session=session)
            current_app.logger.debug("completed operation update_asset")
            return asset.to_client()
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src
*** TestUpdateAsset 
#+NAME: test_class_update_asset
#+BEGIN_SRC python
class TestUpdateAsset(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_update_asset_type_in_system_interface(self):
        print "test_update_asset_type_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/static/images/logo.png'
                    }

        data_dict1 = {
                    'key' : KEY,
                    'asset_type': 'Video', 
                    'path': 'vlabs.ac.in/static/images/logo.png'
                    }

        asset = SystemInterface.add_asset(data_dict)
        asset1 = SystemInterface.update_asset(data_dict1)
        
        self.assertEqual(asset1.get("asset_type")["asset_type"], data_dict1['asset_type'])

#+END_SRC


** Delete Asset
#+NAME: class_delete_asset
#+begin_src python
    @staticmethod
    def delete_asset(path, key):
        session_cls = System.delegate.entities['session']
        session = session_cls(key=str(key))

        try:
            current_app.logger.debug("running operation delete_asset")
            asset_path = System.do("delete_asset", path=str(path),
                                      session=session)
            current_app.logger.debug("completed operation delete_asset")
            return asset_path
        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestDeleteAsset 
#+NAME: test_class_delete_asset
#+BEGIN_SRC python
class TestDeleteAsset(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_delete_asset_in_system_interface(self):
        print "test_delete_asset_in_system_interface"

        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/static/images/logo.png'
                    }

        data_dict1 = {
                    'key' : KEY,
                    'asset_type': 'Video',
                    'path': 'vlabs.ac.in/static/images/icon.png'
                    }

        asset = SystemInterface.add_asset(data_dict)
        asset1 = SystemInterface.add_asset(data_dict1)
        path = SystemInterface.delete_asset("vlabs.ac.in/static/images/icon.png", KEY)
        
        self.assertEqual(path, "vlabs.ac.in/static/images/icon.png")

#+END_SRC


** Get Assets
#+NAME: class_get_assets
#+begin_src python
    @staticmethod
    def get_assets():
        asset_cls = System.delegate.entities['asset']

        try:
            current_app.logger.debug("getting assets")
            assets = asset_cls.get_all()
            asset_dict_list = []
            for asset in assets:
                asset_x = asset.to_client()
                asset_dict_list.append(asset_x)
            current_app.logger.debug("got assets")
            return  asset_dict_list

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetAssets
 #+NAME: test_class_get_assets
 #+BEGIN_SRC python
class TestGetAssets(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_assets_in_system_interface(self):
        print "test_get_assets_in_system_interface"
        
        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        data_dict1 = {
                     'key' : KEY,
                     'asset_type': 'Video',
                     'path': 'vlabs.ac.in/images/static/icon.png'
                     }

        asset1 = SystemInterface.add_asset(data_dict1)
        
        asset_dict_list = SystemInterface.get_assets()
        
        self.assertEqual(asset_dict_list[0].get("asset_type")["asset_type"],
                             data_dict['asset_type'])
        self.assertEqual(asset_dict_list[1].get("asset_type")["asset_type"],
                             data_dict1['asset_type'])
        self.assertEqual(asset_dict_list[0].get("path"), 
                             data_dict['path'])
        self.assertEqual(asset_dict_list[1].get("path"), 
                             data_dict1['path'])

 #+END_SRC





























** Get Asset By Path
#+NAME: class_get_asset_by_path
#+begin_src python
    @staticmethod
    def get_asset_by_path(path):
        asset_cls = System.delegate.entities['asset']

        try:
            current_app.logger.debug("running get_asset_by_path")
            asset = System.do("get_asset", path=str(path))
            current_app.logger.debug("completed operation get_asset_by_path")
            if not asset:
                return ("No asset found with path: %s" % (path))
            return asset.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetAssetByPath
 #+NAME: test_class_get_asset_by_path
 #+BEGIN_SRC python
class TestGetAssetByPath(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_asset_by_path_in_system_interface(self):
        print "test_get_asset_by_path_in_system_interface"
        
        data_dict = {
                    'key' : KEY,
                    'asset_type': 'Image',
                    'path': 'vlabs.ac.in/images/static/logo.png'
                   }

        asset = SystemInterface.add_asset(data_dict)

        data_dict1 = {
                     'key' : KEY,
                     'asset_type': 'Video',
                     'path': 'vlabs.ac.in/images/static/icon.png'
                     }

        asset1 = SystemInterface.add_asset(data_dict1)

        asset_data_one = SystemInterface.get_asset_by_path(data_dict['path'])

        self.assertEqual(asset_data_one.get("path"), data_dict['path'])
 #+END_SRC


** Get Hosting_Info_by_hosted_URL

#+NAME: class_get_hosting_info_by_hosted_URL
#+begin_src python
    @staticmethod
    def get_hosting_info_by_hosted_url(hosted_url):
        hosting_info_cls = System.delegate.entities['hosting_info']
        try:
            current_app.logger.debug("getting hosting_info by hosted URL")
            hosting_info = System.do("get_hosting_info", hosted_url=str(hosted_url))
            current_app.logger.debug("completed operation get_hosting_info_by_hosted_url")
            if not hosting_info:
                return ("No hosting_info found with hosted_url: %s" % (hosted_url))
            return hosting_info.to_client()

        except (ArityError, TypeError, NotAuthorizedError, StateError) as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err

        except Exception as err:
            current_app.logger.error("Exception = %s" % str(err))
            raise err
#+end_src

*** TestGetHosting_Info_by hosted_url
 #+NAME: test_class_get_hosting_info_by_hosted_url
 #+BEGIN_SRC python
class TestGetHosting_Info_by_hosted_url(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        app = self.create_app()
        self.app_context = app.app_context()
        self.app_context.push()
        db.create_all()

    def tearDown(self):
        self.app_context.pop()
        db.session.remove()
        db.drop_all()

    def test_get_hosting_info_by_hosted_url_in_system_interface(self):
        print "test_get_hosting_info_by_hosted_url_in_system_interface"

        data_dict = {'hosting_status': 'hosted',
                     'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                     'hosted_on': 'cloud',
                     'key' : KEY
                    }

        data_dict1 = {'hosting_status': 'not hosted',
                      'hosted_url': 'http://cse12-iiith.vlabs.ac.in',
                      'hosted_on': 'server',
                      'key' : KEY
                     }

        host1 = SystemInterface.add_hosting_info(data_dict)
        host2 = SystemInterface.add_hosting_info(data_dict1)

        host_list = SystemInterface.get_hosting_info_by_hosted_url('http://cse12-iiith.vlabs.ac.in')
        
        self.assertEqual(host_list.get("hosted_url"), data_dict1['hosted_url'])

 #+END_SRC


* Infra                                                         :boilerplate:
  
** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
from runtime.system.system import *
import datetime
from flask import current_app, abort
from runtime.config.system_config import KEY

#+end_src


** Tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from runtime.rest.app import create_app
from sqlalchemy.exc import IntegrityError
from runtime.utils.class_persistence_template import db
from runtime.system.system_interface import *
from runtime.config.system_config import KEY
from flask import current_app
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC

    
* Tangling                                                      :boilerplate:

** sources
#+BEGIN_SRC python :tangle system_interface.py :eval no :noweb yes
<<imports_for_sources>>
<<class_system_interface>>

<<class_add_lab>>
<<class_add_section>>
<<class_add_experiment>>
<<class_add_institute>>
<<class_add_discipline>>
<<class_add_name>>
<<class_add_email>>
<<class_add_developer>>
<<class_get_labs>>
<<class_add_hosting_info>>
<<class_add_integration_status>>

<<class_get_lab_by_id>>
<<class_get_section_by_id>>
<<class_get_institute_by_id>>
<<class_get_experiment_by_id>>
<<class_get_discipline_by_id>>
<<class_get_developer_by_email>>
<<class_get_integration_status_by_IL>>
<<class_get_labs_by_keyword_lab_name>>
<<class_delete_lab>>
<<class_delete_discipline>>
<<class_delete_institute>>
<<class_delete_experiment>>
<<class_delete_section>>
<<class_delete_discipline>>
<<class_delete_hosting_info>>
<<class_delete_integration_status>>

<<class_update_lab>>
<<class_update_institute>>
<<class_update_Section>>
<<class_update_experiment>>
<<class_update_discipline>>
<<class_update_hosting_info>>
<<class_update_asset>>

<<class_get_labs>>
<<class_get_experiments>>
<<class_get_institutes>>
<<class_get_disciplines>>
<<class_get_hosting_info>>
<<class_get_integration_status>>

<<class_get_lab_by_lab_id>>
<<class_get_lab_by_exp_id>>
<<class_get_institute_by_institute_id>>
<<class_get_discipline_by_discipline_id>>
<<class_get_labs_by_institute>>
<<class_get_labs_by_lab_name>>
<<class_get_labs_by_discipline>>
<<class_get_labs_by_asset>>
<<class_update_Name>>
<<class_get_sections>>
<<class_update_developer>>
<<class_get_names>>
<<class_get_emails>>
<<class_get_developers>>
<<class_delete_name>>
<<class_delete_email>>
<<class_delete_developer>>
<<class_add_asset>>
<<class_update_asset>>
<<class_delete_asset>>
<<class_get_assets>>
<<class_get_asset_by_path>>
<<class_get_hosting_info_by_hosted_URL>>
<<class_get_name_by_id>>
#+end_src


** tests
#+BEGIN_SRC python :tangle test_system_interface.py :eval no :noweb yes
<<imports_for_tests>>

<<test_class_add_lab>>
<<test_class_add_experiment>>
<<test_class_add_institute>>
<<test_class_add_discipline>>
<<test_class_add_section>>
<<test_class_add_name>>
<<test_class_add_email>>
<<test_class_add_developer>>
<<test_class_add_hosting_info>>
<<test_class_add_integration_status>>

<<test_class_delete_lab>>
<<test_class_delete_experiment>>
<<test_class_delete_institute>>
<<test_class_delete_section>>
<<test_class_delete_Discipline>>
<<test_class_delete_hosting_info>>
<<test_class_delete_integration_status>>

<<test_class_get_labs>>
<<test_class_get_sections>>
<<test_class_get_experiments>>
<<test_class_get_institutes>>
<<test_class_get_disciplines>>
<<test_class_get_hosting_info>>
<<test_class_get_integration_statuss>>
<<test_class_get_assets>>

<<test_class_get_lab_by_id>>
<<test_class_get_labs_by_asset>>
<<test_class_get_experiment_by_id>>
<<test_class_get_institute_by_id>>
<<test_class_get_section_by_id>>

<<test_class_update_lab>>
<<test_class_update_experiment>>
<<test_class_update_institute>>
<<test_class_update_Section>>
<<test_class_update_Discipline>>
<<test_class_update_hosting_info>>

<<test_class_get_lab_by_labid>>
<<test_class_get_labs_by_institute>>
<<test_class_get_labs_by_lab_name>>
<<test_class_get_labs_by_discipline>>
<<test_class_get_labs_by_keyword_lab_name>>

<<test_class_update_developer>>
<<test_class_get_names>>
<<test_class_get_emails>>
<<test_class_get_developers>>
<<test_class_delete_name>>
<<test_class_delete_email>>
<<test_class_delete_developer>>
<<test_class_get_exp_by_expid>>
<<test_class_get_institute_by_instituteid>>
<<test_class_get_discipline_by_disid>>
<<test_class_get_developer_by_email>>
<<test_class_get_integration_status_by_IL>>
<<test_class_add_asset>>
<<test_class_update_asset>>
<<test_class_delete_asset>>
<<test_class_get_assets>>
<<test_class_get_asset_by_path>>
<<test_class_get_hosting_info_by_hosted_url>>
<<test_class_update_Name>>
<<test_class_get_name_by_id>>
<<run_test_cases>>

#+end_src
 

