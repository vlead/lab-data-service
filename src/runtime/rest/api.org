#+Title: The REST API
#+AUTHOR: VLEAD
#+DATE: [2016-07-26 Tue]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  :PROPERTIES:
  :CUSTOM_ID: introduction
  :END: 
  This document illustrates building of the REST API.


  
* REST
** Pagination support for Get Request
*** Function Design
    - This function will allow us to enable pagination of out REST APIs. 
      It is supposed to take in four arguments that will be total object list
      provied along with the starting integer and a limiting integer. 
    - This is supposed to check for size conditions and generate a previous 
      data and next available data link too
    - This function will allow us to enable pagination of
      our REST APIs i.e. it will send as many number of
      objects as the user wants to see and not all the
      objects together. It is supposed to take in four
      arguments that will be total object list provided
      along with the starting integer and a limiting
      integer.
    - The starting integer denotes the number of the object
      from which the user wants to start the display.
    - The limiting integer specifies the maximum number of
      objects the user wants to display on a particular page
      and if nothing is specified as the limiting integer
      then, 25 is taken as the default value.
    - The function uses a variable "count" to represent the
      total number of objects being displayed on a
      particular page.
    - The function checks for different conditions on
      "count" and accordingly displays the previous and the
      next page links.
    - The response is stored and returned as a jsonified
      object.

*** Function Definition
 #+NAME: pagination
 #+BEGIN_SRC python
def pagination(klass, url, start, limit):
    data = {}
    count = len(klass)
    data['currentPage'] = start
    data['pageSize'] = limit
    data['totalCount'] = count
    
    if count < start:
        data['nextPageLink'] = None
        data['previousPageLink'] = url + 'page=%d' % (count-limit)
        response = make_response(jsonify(None))
    else:
        if start == 1:
            data['previousPageLink'] = None
        else:
            prev_start = max(1, start - limit)
            data['previousPageLink'] = url + 'page=%d' % (prev_start)

        if start + limit > count:
            data['nextPageLink'] = None
        else:
            data['nextPageLink'] = url + 'page=%d' % (start + limit)

        response = make_response(jsonify(klass[(start - 1):(start - 1 + limit)]))
    
    response.headers['X-Pagination'] = data
    return response
  
#+END_SRC 


** Get Labs, Get Lab, Get Labs by institute, lab_name, discipline and asset and Get labs by passing lab_name as keyword
*** API Designs 
**** Get all labs
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_labs
  :END:    
  - URL :: /labs

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
  {
    "discipline": {
      "discipline_id": "cse",
      "assets": [],
      "discipline_name": "Computer Science and Engineering",
      "id": "6"
    },
    "lab_id": "cse02",
    "assets": [
      {
        "path": "vlabs.ac.in/images/static/logo.png",
        "asset_type": "image",
        "id": "1"
      },
      {
        "path": "vlabs.ac.in/video/abc.mkv",
        "asset_type": "video",
        "id": "2"
      }
    ],
    "hosting_info": [
      {
        "hosting_status": "hosted",
        "hosted_url": "http://cse14-iiith.vlabs.ac.in",
        "hosted_on": "cloud",
        "id": "1"
      },
      {
        "hosting_status": "hosted",
        "hosted_url": "http://cse14-iiith.ac.in",
        "hosted_on": "college-cloud",
        "id": "2"
      }
    ],
    "institute": {
      "id": "8",
      "institute_name": "IIT Kanpur",
      "assets": [],
      "institute_id": "iitk"
    },
    "overview": "overview",
    "lab_name": "Computer Programming",
    "experiments": [],
    "integration_status": {
      "integration_level": 4,
      "id": "5"
    },
    "developers": [
      {
        "id": "1",
        "name": {
          "name": "Dinesh Malviya",
          "id": "1"
        },
        "email": {
          "email": "xyz@gmail.com",
          "id": "1"
        }
      },
      {
        "id": "2",
        "name": {
          "name": "Ashish Ahuja",
          "id": "2"
        },
        "email": {
          "email": "abc@gmail.com",
          "id": "2"
        }
      }
    ],
    "sections": [
      {
        "name": "Introduction",
        "id": "1"
      }
    ],
    "id": "1"
  }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
      {"status" : "error"} 
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs
#+END_EXAMPLE  

**** Get lab by lab_id
  :PROPERTIES:
  :CUSTOM_ID: api_get_lab_by_lab_id
  :END:    
  - URL :: /labs?lab_id=<lab_id>

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
{
  "assets": [
    {
      "asset_type": "image",
      "id": "1",
      "path": "vlabs.ac.in/images/static/logo.png"
    },
    {
      "asset_type": "video",
      "id": "2",
      "path": "vlabs.ac.in/video/abc.mkv"
    }
  ],
  "developers": [
    {
      "email": {
        "email": "xyz@gmail.com",
        "id": "1"
      },
      "id": "1",
      "name": {
        "id": "1",
        "name": "Dinesh Malviya"
      }
    },
    {
      "email": {
        "email": "abc@gmail.com",
        "id": "2"
      },
      "id": "2",
      "name": {
        "id": "2",
        "name": "Ashish Ahuja"
      }
    }
  ],
  "discipline": {
    "assets": [],
    "discipline_id": "cse",
    "discipline_name": "Computer Science and Engineering",
    "id": "6"
  },
  "experiments": [],
  "hosting_info": [
    {
      "hosted_on": "cloud",
      "hosted_url": "http://cse14-iiith.vlabs.ac.in",
      "hosting_status": "hosted",
      "id": "1"
    },
    {
      "hosted_on": "college-cloud",
      "hosted_url": "http://cse14-iiith.ac.in",
      "hosting_status": "hosted",
      "id": "2"
    }
  ],
  "id": "1",
  "institute": {
    "assets": [],
    "id": "8",
    "institute_id": "iitk",
    "institute_name": "IIT Kanpur"
  },
  "integration_status": {
    "id": "5",
    "integration_level": 4
  },
  "lab_id": "cse02",
  "lab_name": "Computer Programming",
  "overview": "overview",
  "sections": [
    {
      "id": "1",
      "name": "Introduction"
    }
  ]
}

#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
      {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs?lab_id=cse02
#+END_EXAMPLE  

**** Get labs by institute
  :PROPERTIES:
  :CUSTOM_ID: api_get_lab_by_lab_id
  :END:    
  - URL :: /labs?institute_name=<institute_name>

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
  {
    "discipline": {
      "discipline_id": "cse",
      "assets": [],
      "discipline_name": "Computer Science and Engineering",
      "id": "6"
    },
    "lab_id": "cse02",
    "assets": [
      {
        "path": "vlabs.ac.in/images/static/logo.png",
        "asset_type": "image",
        "id": "1"
      },
      {
        "path": "vlabs.ac.in/video/abc.mkv",
        "asset_type": "video",
        "id": "2"
      }
    ],
    "hosting_info": [
      {
        "hosting_status": "hosted",
        "hosted_url": "http://cse14-iiith.vlabs.ac.in",
        "hosted_on": "cloud",
        "id": "1"
      },
      {
        "hosting_status": "hosted",
        "hosted_url": "http://cse14-iiith.ac.in",
        "hosted_on": "college-cloud",
        "id": "2"
      }
    ],
    "institute": {
      "id": "8",
      "institute_name": "IIT Kanpur",
      "assets": [],
      "institute_id": "iitk"
    },
    "overview": "overview",
    "lab_name": "Computer Programming",
    "experiments": [],
    "integration_status": {
      "integration_level": 4,
      "id": "5"
    },
    "developers": [
      {
        "id": "1",
        "name": {
          "name": "Dinesh Malviya",
          "id": "1"
        },
        "email": {
          "email": "xyz@gmail.com",
          "id": "1"
        }
      },
      {
        "id": "2",
        "name": {
          "name": "Ashish Ahuja",
          "id": "2"
        },
        "email": {
          "email": "abc@gmail.com",
          "id": "2"
        }
      }
    ],
    "sections": [
      {
        "name": "Introduction",
        "id": "1"
      }
    ],
    "id": "1"
  }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
      {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs?institute_name=IIIT Hyderabad
#+END_EXAMPLE  

**** Get labs by discipline
  :PROPERTIES:
  :CUSTOM_ID: api_get_lab_by_lab_id
  :END:    
  - URL :: /labs?discipline_name=<discipline_name>

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
  {
    "discipline": {
      "discipline_id": "cse",
      "assets": [],
      "discipline_name": "Computer Science and Engineering",
      "id": "6"
    },
    "lab_id": "cse02",
    "assets": [
      {
        "path": "vlabs.ac.in/images/static/logo.png",
        "asset_type": "image",
        "id": "1"
      },
      {
        "path": "vlabs.ac.in/video/abc.mkv",
        "asset_type": "video",
        "id": "2"
      }
    ],
    "hosting_info": [
      {
        "hosting_status": "hosted",
        "hosted_url": "http://cse14-iiith.vlabs.ac.in",
        "hosted_on": "cloud",
        "id": "1"
      },
      {
        "hosting_status": "hosted",
        "hosted_url": "http://cse14-iiith.ac.in",
        "hosted_on": "college-cloud",
        "id": "2"
      }
    ],
    "institute": {
      "id": "8",
      "institute_name": "IIT Kanpur",
      "assets": [],
      "institute_id": "iitk"
    },
    "overview": "overview",
    "lab_name": "Computer Programming",
    "experiments": [],
    "integration_status": {
      "integration_level": 4,
      "id": "5"
    },
    "developers": [
      {
        "id": "1",
        "name": {
          "name": "Dinesh Malviya",
          "id": "1"
        },
        "email": {
          "email": "xyz@gmail.com",
          "id": "1"
        }
      },
      {
        "id": "2",
        "name": {
          "name": "Ashish Ahuja",
          "id": "2"
        },
        "email": {
          "email": "abc@gmail.com",
          "id": "2"
        }
      }
    ],
    "sections": [
      {
        "name": "Introduction",
        "id": "1"
      }
    ],
    "id": "1"
  }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
      {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs?discipline_name=Computer Science and Engineering
#+END_EXAMPLE  

**** Get labs by lab_name
  :PROPERTIES:
  :CUSTOM_ID: api_get_lab_by_lab_id
  :END:    
  - URL :: /labs?lab_name=<lab_name>

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
    {
        "assets": [
            {
                "asset_type": "Image",
                "id": 1,
                "path": "vlabs.ac.in/images/static/logo.png"
            },
            {
                "asset_type": "image",
                "id": 2,
                "path": "vlabs.ac.in/images/static/image.png"
            }
        ],
        "developers": [
            {
                "discipline": {
                    "assets": [],
                    "discipline_id": "cse",
                    "discipline_name": "Computer Science and Engineering",
                    "id": 6
                },
                "email": {
                    "email": "abc@gmail.com",
                    "id": 6
                },
                "id": 3,
                "institute": {
                    "assets": [],
                    "id": 8,
                    "institute_id": "iitk",
                    "institute_name": "IIT Kanpur"
                },
                "name": {
                    "id": 6,
                    "name": "Prof. Dharamaja"
                }
            },
            {
                "discipline": {
                    "assets": [],
                    "discipline_id": "cse",
                    "discipline_name": "Computer Science and Engineering",
                    "id": 6
                },
                "email": {
                    "email": "pallavi.pawar@gmail.com",
                    "id": 7
                },
                "id": 4,
                "institute": {
                    "assets": [],
                    "id": 8,
                    "institute_id": "iitk",
                    "institute_name": "IIT Kanpur"
                },
                "name": {
                    "id": 7,
                    "name": "Prof. Pallavi Pawar"
                }
            }
        ],
        "discipline": {
            "assets": [],
            "discipline_id": "cse",
            "discipline_name": "Computer Science and Engineering",
            "id": 6
        },
        "experiments": [
            {
                "assets": [
                    {
                        "asset_type": "Image",
                        "id": 1,
                        "path": "vlabs.ac.in/images/static/logo.png"
                    },
                    {
                        "asset_type": "image",
                        "id": 2,
                        "path": "vlabs.ac.in/images/static/image.png"
                    }
                ],
                "developers": [
                    {
                        "discipline": {
                            "assets": [],
                            "discipline_id": "cse",
                            "discipline_name": "Computer Science and Engineering",
                            "id": 6
                        },
                        "email": {
                            "email": "abc@gmail.com",
                            "id": 6
                        },
                        "id": 3,
                        "institute": {
                            "assets": [],
                            "id": 8,
                            "institute_id": "iitk",
                            "institute_name": "IIT Kanpur"
                        },
                        "name": {
                            "id": 6,
                            "name": "Prof. Dharamaja"
                        }
                    },
                    {
                        "discipline": {
                            "assets": [],
                            "discipline_id": "cse",
                            "discipline_name": "Computer Science and Engineering",
                            "id": 6
                        },
                        "email": {
                            "email": "pallavi.pawar@gmail.com",
                            "id": 7
                        },
                        "id": 4,
                        "institute": {
                            "assets": [],
                            "id": 8,
                            "institute_id": "iitk",
                            "institute_name": "IIT Kanpur"
                        },
                        "name": {
                            "id": 7,
                            "name": "Prof. Pallavi Pawar"
                        }
                    }
                ],
                "discipline": {
                    "assets": [],
                    "discipline_id": "cse",
                    "discipline_name": "Computer Science and Engineering",
                    "id": 6
                },
                "exp_id": "cse02",
                "exp_name": "stack",
                "hosting_info": [
                    {
                        "hosted_on": "cloud",
                        "hosted_url": "http://cse14-iiith.vlabs.ac.in",
                        "hosting_status": "hosted",
                        "id": 4
                    },
                    {
                        "hosted_on": "server",
                        "hosted_url": "http://iitkgp.vlab.co.in/",
                        "hosting_status": "hosted",
                        "id": 5
                    }
                ],
                "id": 3,
                "institute": {
                    "assets": [],
                    "id": 8,
                    "institute_id": "iitk",
                    "institute_name": "IIT Kanpur"
                },
                "integration_status": {
                    "id": 5,
                    "integration_level": 4
                },
                "overview": "overview",
                "sections": [
                    {
                        "id": 3,
                        "name": "Procedure"
                    },
                    {
                        "id": 2,
                        "name": "Theory"
                    }
                ]
            }
        ],
        "hosting_info": [
            {
                "hosted_on": "cloud",
                "hosted_url": "http://cse14-iiith.vlabs.ac.in",
                "hosting_status": "hosted",
                "id": 4
            },
            {
                "hosted_on": "server",
                "hosted_url": "http://iitkgp.vlab.co.in/",
                "hosting_status": "hosted",
                "id": 5
            }
        ],
        "id": 1,
        "institute": {
            "assets": [],
            "id": 8,
            "institute_id": "iitk",
            "institute_name": "IIT Kanpur"
        },
        "integration_status": {
            "id": 5,
            "integration_level": 4
        },
        "lab_id": "cse03",
        "lab_name": "Data Structures",
        "overview": "overview"
    }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
      {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs?lab_name=Data Structures
#+END_EXAMPLE  

**** Get labs by asset
  :PROPERTIES:
  :CUSTOM_ID: api_get_lab_by_lab_id
  :END:    
  - URL :: /labs?asset_type=<asset_type>

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[ 
 {
    "discipline": {
      "discipline_id": "cse",
      "id": 1,
      "discipline_name": "Computer Science"
    },
     "asset": {
      "path": "vlabs.ac.in/images/static/logo.png",
      "id": 1,
      "asset_type": "Images"
    },
    "lab_id": "cse09",
    "institute": {
      "institute_name": "IIIT Hyderabad",
      "id": 1,
      "institute_id": "iiith"
    },
    "integration_status": {
      "integration_level": 4,
      "key": "<key>"
    },
    "overview": "overview",
    "lab_name": "Data Structures",
    "experiments": [
      {
        "overview": "overview",
        "exp_name": "arrays",
        "sections": [
          {
            "name": "Procedure",
            "id": 2
          },
          {
            "name": "Theory",
            "id": 1
          }
        ],
        "id": 1,
        "exp_id": "exp9"
      }
    ],
    "id": 1
  }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs?asset_type=image
#+END_EXAMPLE  
**** Get labs by lab_name keywords
  :PROPERTIES:
  :CUSTOM_ID: api_get_lab_by_lab_name_keyword
  :END:    
  - URL :: /labs?keyword_lab_name=<keyword>

  - Method :: GET

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
    {
        "discipline": {
            "discipline_id": "cse",
            "assets": [],
            "discipline_name": "Computer Science and Engineering",
            "id": 6
        },
        "lab_id": "cse03",
        "assets": [
            {
                "path": "vlabs.ac.in/images/static/logo.png",
                "asset_type": "Image",
                "id": 1
            },
            {
                "path": "vlabs.ac.in/images/static/image.png",
                "asset_type": "image",
                "id": 2
            }
        ],
        "hosting_info": [
            {
                "hosting_status": "hosted",
                "hosted_url": "http://cse14-iiith.vlabs.ac.in",
                "hosted_on": "cloud",
                "id": 4
            },
            {
                "hosting_status": "hosted",
                "hosted_url": "http://iitkgp.vlab.co.in/",
                "hosted_on": "server",
                "id": 5
            }
        ],
        "institute": {
            "id": 8,
            "institute_name": "IIT Kanpur",
            "assets": [],
            "institute_id": "iitk"
        },
        "overview": "overview",
        "lab_name": "Data Structures",
        "experiments": [
            {
                "discipline": {
                    "discipline_id": "cse",
                    "assets": [],
                    "discipline_name": "Computer Science and Engineering",
                    "id": 6
                },
                "hosting_info": [
                    {
                        "hosting_status": "hosted",
                        "hosted_url": "http://cse14-iiith.vlabs.ac.in",
                        "hosted_on": "cloud",
                        "id": 4
                    },
                    {
                        "hosting_status": "hosted",
                        "hosted_url": "http://iitkgp.vlab.co.in/",
                        "hosted_on": "server",
                        "id": 5
                    }
                ],
                "assets": [
                    {
                        "path": "vlabs.ac.in/images/static/logo.png",
                        "asset_type": "Image",
                        "id": 1
                    },
                    {
                        "path": "vlabs.ac.in/images/static/image.png",
                        "asset_type": "image",
                        "id": 2
                    }
                ],
                "institute": {
                    "id": 8,
                    "institute_name": "IIT Kanpur",
                    "assets": [],
                    "institute_id": "iitk"
                },
                "exp_name": "stack",
                "overview": "overview",
                "exp_id": "cse02",
                "developers": [
                    {
                        "discipline": {
                            "discipline_id": "cse",
                            "assets": [],
                            "discipline_name": "Computer Science and Engineering",
                            "id": 6
                        },
                        "institute": {
                            "id": 8,
                            "institute_name": "IIT Kanpur",
                            "assets": [],
                            "institute_id": "iitk"
                        },
                        "id": 3,
                        "name": {
                            "name": "Prof. Dharamaja",
                            "id": 6
                        },
                        "email": {
                            "email": "abc@gmail.com",
                            "id": 6
                        }
                    },
                    {
                        "discipline": {
                            "discipline_id": "cse",
                            "assets": [],
                            "discipline_name": "Computer Science and Engineering",
                            "id": 6
                        },
                        "institute": {
                            "id": 8,
                            "institute_name": "IIT Kanpur",
                            "assets": [],
                            "institute_id": "iitk"
                        },
                        "id": 4,
                        "name": {
                            "name": "Prof. Pallavi Pawar",
                            "id": 7
                        },
                        "email": {
                            "email": "pallavi.pawar@gmail.com",
                            "id": 7
                        }
                    }
                ],
                "sections": [
                    {
                        "name": "Procedure",
                        "id": 3
                    },
                    {
                        "name": "Theory",
                        "id": 2
                    }
                ],
                "id": 3,
                "integration_status": {
                    "integration_level": 4,
                    "id": 5
                }
            }
        ],
        "integration_status": {
            "integration_level": 4,
            "id": 5
        },
        "developers": [
            {
                "discipline": {
                    "discipline_id": "cse",
                    "assets": [],
                    "discipline_name": "Computer Science and Engineering",
                    "id": 6
                },
                "institute": {
                    "id": 8,
                    "institute_name": "IIT Kanpur",
                    "assets": [],
                    "institute_id": "iitk"
                },
                "id": 3,
                "name": {
                    "name": "Prof. Dharamaja",
                    "id": 6
                },
                "email": {
                    "email": "abc@gmail.com",
                    "id": 6
                }
            },
            {
                "discipline": {
                    "discipline_id": "cse",
                    "assets": [],
                    "discipline_name": "Computer Science and Engineering",
                    "id": 6
                },
                "institute": {
                    "id": 8,
                    "institute_name": "IIT Kanpur",
                    "assets": [],
                    "institute_id": "iitk"
                },
                "id": 4,
                "name": {
                    "name": "Prof. Pallavi Pawar",
                    "id": 7
                },
                "email": {
                    "email": "pallavi.pawar@gmail.com",
                    "id": 7
                }
            }
        ],
        "id": 1
    }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs?keyword_lab_name=data
#+END_EXAMPLE  

*** Implementation
#+NAME: get_lab
#+BEGIN_SRC python
@api.route('/labs', methods=['GET'])
def get_lab():
    if request.method == 'GET':
        if 'lab_id' in request.args:
            lab_id  = request.args['lab_id']
            try:
                current_app.logger.debug("running operation get_lab")
                lab = SystemInterface.get_lab(lab_id)
                current_app.logger.debug("completed operation get_lab")
                return jsonify(lab)

            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)
                
        elif 'lab_name' in request.args:
            lab_name  = request.args['lab_name']
            try:
                current_app.logger.debug("running operation get_labs_by_lab_name")
                labs = SystemInterface.get_labs_by_lab_name(lab_name)
                return pagination(
                    labs, 
                    '/labs?lab_name='+lab_name+'&',
                    start=int(request.args.get('page', 1)), 
                    limit=int(request.args.get('pageSize', 25))
                )
                
            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

        elif 'institute_name' in request.args:
            institute_name  = request.args['institute_name']
            try:
                current_app.logger.debug("running operation get_labs_by_institute")
                labs = SystemInterface.get_labs_by_institute(institute_name)
                current_app.logger.debug("completed operation get_labs_by_institute")
                return pagination(
                    labs, 
                    '/labs?institute_name='+institute_name+'&',
                    start=int(request.args.get('page', 1)), 
                    limit=int(request.args.get('pageSize', 25))
                )
                
            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

        elif 'discipline_name' in request.args:
            discipline_name  = request.args['discipline_name']
            try:
                current_app.logger.debug("running operation get_labs_by_discipline")
                labs = SystemInterface.get_labs_by_discipline(discipline_name)
                current_app.logger.debug("completed operation get_labs_by_discipline")
                return pagination(
                    labs, 
                    '/labs?discipline_name='+discipline_name+'&',
                    start=int(request.args.get('page', 1)), 
                    limit=int(request.args.get('pageSize', 25))
                )
                
            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

        elif 'asset_type' in request.args:
            asset_type  = request.args['asset_type']
            try:
                current_app.logger.debug("running operation get_labs_by_asset")
                labs = SystemInterface.get_labs_by_asset(asset_type)
                current_app.logger.debug("completed operation get_labs_by_asset")
                return pagination(
                    labs, 
                    '/labs?asset_type='+asset_type+'&',
                    start=int(request.args.get('page', 1)), 
                    limit=int(request.args.get('pageSize', 25))
                )


            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

        elif 'keyword_lab_name' in request.args:
            keyword  = request.args['keyword_lab_name']
            try:
                current_app.logger.debug("running operation get_labs"
                                         " _by_keyword_lab_name")
                labs = SystemInterface.get_labs_by_keyword_lab_name(keyword)
                current_app.logger.debug("completed operation get_labs_by_"
                                         " keyword_lab_name")
                return pagination(
                    labs, 
                    '/labs?keyword_lab_name='+keyword+'&',
                    start=int(request.args.get('page', 1)), 
                    limit=int(request.args.get('pageSize', 25))
                )

            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

        else:
            try:
                current_app.logger.debug("running operation get_labs")                
                labs = SystemInterface.get_labs()
                current_app.logger.debug("completed operation get_labs")
                return pagination(
                        labs, 
                        '/labs?',
                        start=int(request.args.get('page', 1)), 
                        limit=int(request.args.get('pageSize', 25))
                )

            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)
         

#+END_SRC

*** Test Cases
**** TestGetLab
#+NAME: test_get_labs
#+BEGIN_SRC python
class TestGetLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs(self):
        print "test_get_labs_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'institute_name': 'IIT Kanpur',
                   'institute_id': 'IITK',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'discipline_name': 'Computer Science',
                   'discipline_id': 'CSE',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)


        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {
		   "key": KEY,
                   "experiment": {
                     "id": "exp123",
                     "name": "arrays",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "overview": "This experiments describes about parallel and distributed processing",
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       "Introduction",
                       "Objective",
                       "Tutorial",
                       "Illustration",
                       "Procedure",
                       "Experiment",
                       "Observations",
                       "Assignment",
                       "References"
                     ]
                   }
                 }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {           
		   "key" : KEY,     
                   "lab": {
                     "id": "cse02",
                     "name": "Computer Programming",
                     "overview": "overview",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       {
                         "name": "Introduction"
                       }                       
                     ],
                     "experiments": [
                           "exp123"
                         ]
                   }
                 }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/labs", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestGetLabbyLabId
#+NAME: test_get_lab_by_labid
#+BEGIN_SRC python
class TestGetLabbyLabId(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_lab_by_labid(self):
        print "test_get_lab_by_labid_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'institute_name': 'IIT Kanpur',
                   'institute_id': 'IITK',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'discipline_name': 'Computer Science',
                   'discipline_id': 'CSE',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)


        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {
		   "key": KEY,
                   "experiment": {
                     "id": "exp123",
                     "name": "arrays",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "overview": "This experiments describes about parallel and distributed processing",
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       "Introduction",
                       "Objective",
                       "Tutorial",
                       "Illustration",
                       "Procedure",
                       "Experiment",
                       "Observations",
                       "Assignment",
                       "References"
                     ]
                   }
                 }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {           
		   "key" : KEY,     
                   "lab": {
                     "id": "cse02",
                     "name": "Computer Programming",
                     "overview": "overview",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       {
                         "name": "Introduction"
                       }
                                              
                     ],
                         "experiments": [
                           "exp123"
                         ]

                   }
                 }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)


        response = self.client.get("/labs?lab_id=cse02", headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC

**** TestGetLabsbyInstitute
#+NAME: test_get_labs_by_institute
#+BEGIN_SRC python
class TestGetLabsbyInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs_by_institute(self):
        print "test_get_labs_by_institute_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'institute_name': 'IIT Kanpur',
                   'institute_id': 'IITK',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'discipline_name': 'Computer Science',
                   'discipline_id': 'CSE',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {
		   "key": KEY,
                   "experiment": {
                     "id": "exp123",
                     "name": "arrays",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "overview": "This experiments describes about parallel and distributed processing",
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       "Introduction",
                       "Objective",
                       "Tutorial",
                       "Illustration",
                       "Procedure",
                       "Experiment",
                       "Observations",
                       "Assignment",
                       "References"
                     ]
                   }
                 }

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {           
		   "key" : KEY,     
                   "lab": {
                     "id": "cse02",
                     "name": "Computer Programming",
                     "overview": "overview",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       {
                         "name": "Introduction"
                       }
                                              
                     ],
                         "experiments": [
                           "exp123"
                         ]

                   }
                 }


        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)


        response = self.client.get("/labs?institute_name=IIT Kanpur", headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC

**** TestGetLabsbyDiscipline
#+NAME: test_get_labs_by_discipline
#+BEGIN_SRC python
class TestGetLabsbyDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs_by_discipline(self):
        print "test_get_labs_by_discipline_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'institute_name': 'IIT Kanpur',
                   'institute_id': 'IITK',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'discipline_name': 'Computer Science',
                   'discipline_id': 'CSE',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}


        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {
		   "key": KEY,
                   "experiment": {
                     "id": "exp123",
                     "name": "arrays",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "overview": "This experiments describes about parallel and distributed processing",
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       "Introduction",
                       "Objective",
                       "Tutorial",
                       "Illustration",
                       "Procedure",
                       "Experiment",
                       "Observations",
                       "Assignment",
                       "References"
                     ]
                   }
                 }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {           
		   "key" : KEY,     
                   "lab": {
                     "id": "cse02",
                     "name": "Computer Programming",
                     "overview": "overview",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       {
                         "name": "Introduction"
                       }                                              
                     ],
                         "experiments": [
                           "exp123"
                         ]

                   }
                 }

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)


        response = self.client.get("/labs?discipline_name=Computer Science",
                                       headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC

**** TestGetLabsbyLabName
#+NAME: test_get_labs_by_lab_name
#+BEGIN_SRC python
class TestGetLabsbyLabName(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs_by_lab_name(self):
        print "test_get_labs_by_lab_name_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)


        payload = {'institute_name': 'IIT Kanpur',
                   'institute_id': 'IITK',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'discipline_name': 'Computer Science',
                   'discipline_id': 'CSE',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Theory',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {
		   "key": KEY,
                   "experiment": {
                     "id": "exp123",
                     "name": "arrays",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "developers": [
                       {
                         "name": "Prof. Dharamaja",
                         "email": "abc@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "overview": "This experiments describes about parallel and distributed processing",
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       "Introduction",
                       "Objective",
                       "Tutorial",
                       "Illustration",
                       "Procedure",
                       "Experiment",
                       "Observations",
                       "Assignment",
                       "References"
                     ]
                   }
                 }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {           
		   "key" : KEY,     
                   "lab": {
                     "id": "cse02",
                     "name": "Computer Programming",
                     "overview": "overview",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "developers": [
                       {
                         "name": "Prof. Dharamaja",
                         "email": "abc@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       {
                         "name": "Introduction"
                       }
                                             
                     ],
                         "experiments": [
                           "exp123"
                         ]

                   }
                 }


        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)


        response = self.client.get("/labs?lab_name=Computer Programming", headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC

**** TestGetLabsbyAsset
#+NAME: test_get_labs_by_asset
#+BEGIN_SRC python
class TestGetLabsbyAsset(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_labs_by_discipline(self):
        print "test_get_labs_by_discipline_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)


        payload = {'institute_name': 'IIT Kanpur',
                   'institute_id': 'IITK',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers

        payload = {'discipline_name': 'Computer Science',
                   'discipline_id': 'CSE',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}


        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {
		   "key": KEY,
                   "experiment": {
                     "id": "exp123",
                     "name": "arrays",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "developers": [
                       {
                         "name": "Prof. Dharamaja",
                         "email": "abc@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "xyz@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "overview": "This experiments describes about parallel and distributed processing",
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       "Introduction",
                       "Objective",
                       "Tutorial",
                       "Illustration",
                       "Procedure",
                       "Experiment",
                       "Observations",
                       "Assignment",
                       "References"
                     ]
                   }
                 }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {           
		   "key" : KEY,     
                   "lab": {
                     "id": "cse02",
                     "name": "Computer Programming",
                     "overview": "overview",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       {
                         "name": "Introduction"
                       }
                                              
                     ],
                         "experiments": [
                           "exp123"
                         ]

                   }
                 }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/labs?discipline_name=Computer Science",
                                       headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC

**** TestGetLabbyLabNameKeyword
#+NAME: test_get_lab_by_labname_keyword
#+BEGIN_SRC python
class TestGetLabbyLabNameKeyWord(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_lab_by_labname_keyword(self):
        print "test_get_lab_by_labname_keyword_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'institute_name': 'IIT Kanpur',
                   'institute_id': 'IITK',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'discipline_name': 'Computer Science',
                   'discipline_id': 'CSE',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}


        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {
		   "key": KEY,
                   "experiment": {
                     "id": "exp123",
                     "name": "arrays",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "developers": [
                       {
                         "name": "Prof. Dharamaja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "overview": "This experiments describes about parallel and distributed processing",
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       }
                     ],
                     "sections": [
                       "Introduction",
                       "Objective",
                       "Tutorial",
                       "Illustration",
                       "Procedure",
                       "Experiment",
                       "Observations",
                       "Assignment",
                       "References"
                     ]
                   }
                 }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)
       
        payload = {           
		   "key" : KEY,     
                   "lab": {
                     "id": "cse02",
                     "name": "Computer Programming",
                     "overview": "overview",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "developers": [
                       {
                         "name": "Prof. Dharamaja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       }
                     ],
                     "sections": [
                       {
                         "name": "Introduction"
                       }                                              
                     ],
                         "experiments": [
                           "exp123"
                         ]

                   }
                 }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)


        response = self.client.get("/labs?keyword_lab_name=data", headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC


** Add Lab
*** API Designs 
**** Add Lab
  :PROPERTIES:
  :CUSTOM_ID: api_add_lab
  :END:    
  - URL :: /labs

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
  "key": "<key>",
  "lab": {
    "id": "cse02",
    "name": "Computer Programming",
    "overview": "overview",
    "discipline_id": "CSE",
    "institute_id": "IITK",
    "phase":[{"phase_id":1,  "phase_id":2}],
    "developers": [
      {
        "name": "Dinesh Malviya",
        "email": "xyz@gmail.com"
      },
      {
        "name": "Ashish Ahuja",
        "email": "abc@gmail.com"
      }
    ],
    "hosting_info": [
      {
        "hosting_status": "hosted",
        "hosted_on": "cloud",
        "hosted_url": "http://cse14-iiith.vlabs.ac.in"
      },
      {
        "hosting_status": "hosted",
        "hosted_on": "college-cloud",
        "hosted_url": "http://cse14-iiith.ac.in"
      }
    ],
    "integration_level": 4,
    "assets": [
      {
        "asset_type": "image",
        "path": "vlabs.ac.in/images/static/logo.png"
      },
      {
        "asset_type": "video",
        "path": "vlabs.ac.in/video/abc.mkv"
      }
    ],
    "sections": [
      {
        "name": "Introduction"
      }     
    ],
        "experiments": []
  }
}

#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "data": {
    "assets": [
      {
        "asset_type": "image",
        "id": "1",
        "path": "vlabs.ac.in/images/static/logo.png"
      },
      {
        "asset_type": "video",
        "id": "2",
        "path": "vlabs.ac.in/video/abc.mkv"
      }
    ],
    "developers": [
      {
        "email": {
          "email": "xyz@gmail.com",
          "id": "1"
        },
        "id": "1",
        "name": {
          "id": "1",
          "name": "Dinesh Malviya"
        }
      },
      {
        "email": {
          "email": "abc@gmail.com",
          "id": "2"
        },
        "id": "2",
        "name": {
          "id": "2",
          "name": "Ashish Ahuja"
        }
      }
    ],
    "discipline": {
      "assets": [],
      "discipline_id": "cse",
      "discipline_name": "Computer Science and Engineering",
      "id": "6"
    },
    "experiments": [],
    "hosting_info": [
      {
        "hosted_on": "cloud",
        "hosted_url": "http://cse14-iiith.vlabs.ac.in",
        "hosting_status": "hosted",
        "id": "1"
      },
      {
        "hosted_on": "college-cloud",
        "hosted_url": "http://cse14-iiith.ac.in",
        "hosting_status": "hosted",
        "id": "2"
      }
    ],
    "id": "1",
    "institute": {
      "assets": [],
      "id": "8",
      "institute_id": "iitk",
      "institute_name": "IIT Kanpur"
    },
    "phase":[{"phase_id":1,  "phase_id":2}],
    "integration_status": {
      "id": "5",
      "integration_level": 4
    },
    "lab_id": "cse02",
    "lab_name": "Computer Programming",
    "overview": "overview",
    "sections": [
      {
        "id": "1",
        "name": "Introduction"
      }
    ]
  },
  "status": "success",
  "status_code": 200
}
#+END_EXAMPLE

  - Error Response:
    + Contents :
      {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/labs
#+END_EXAMPLE 

*** Implementation
#+NAME: add_lab
#+BEGIN_SRC python
@api.route('/labs', methods=['POST'])
def add_lab():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            current_app.logger.debug("running operation add_labs")
            lab = SystemInterface.add_lab(data_dict)
            return_data = {}
            return_data["data"] = lab
            return_data["status"] = "success"
            return_data["status_code"] = 200
            current_app.logger.debug("completed operation add_labs")
            return jsonify(return_data)

        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

#+END_SRC

*** Test Cases
**** TestAddLab

#+NAME: test_add_lab
#+BEGIN_SRC python
class TestAddLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_lab(self):
        print "test_add_lab_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'institute_name': 'IIT Kanpur',
                   'institute_id': 'IITK',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'discipline_name': 'Computer Science',
                   'discipline_id': 'CSE',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {
		   "key": KEY,
                   "experiment": {
                     "id": "exp123",
                     "name": "arrays",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "overview": "This experiments describes about parallel and distributed processing",
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       "Introduction",
                       "Objective",
                       "Tutorial",
                       "Illustration",
                       "Procedure",
                       "Experiment",
                       "Observations",
                       "Assignment",
                       "References"
                     ]
                   }
                 }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {           
		   "key" : KEY,     
                   "lab": {
                     "id": "cse02",
                     "name": "Computer Programming",
                     "overview": "overview",
                     "discipline_id": "CSE",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "institute_id": "IITK",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       {
                         "name": "Introduction"
                       }
                                             
                     ],
                     "experiments": [
                     "exp123"
                     ]

                   }
                 }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)


 #+END_SRC


** Update Lab
*** API Design
**** Update lab by labid
  :PROPERTIES:
  :CUSTOM_ID: api_update_lab_by_labid
  :END:    
  - URL :: /labs?lab_id=<lab_id>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"lab":{
		   "assets": [
			{
			  "asset_type": "image",
			  "path": "iiit-h-cse02.jpg"
			}
		      ]
},

                    "key": "defaultkey"
}

#+END_EXAMPLE
  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "assets": [
    {
      "asset_type": {
        "asset_type": "image", 
        "id": "1"
      }, 
      "id": "165", 
      "path": "iiit-h-cse02.jpg"
    }
  ], 
  "developers": [], 
  "discipline": {
    "assets": [
      {
        "asset_type": {
          "asset_type": "image", 
          "id": "1"
        }, 
        "id": "150", 
        "path": "computer-science-and-engineering.png"
      }
    ], 
    "discipline_id": "cse", 
    "discipline_name": "Computer Science and Engineering", 
    "id": "6"
  }, 
  "experiments": [
    {
      "assets": [
        {
          "asset_type": {
            "asset_type": "image", 
            "id": "1"
          }, 
          "id": "84", 
          "path": "../../static/IIITH-Computer-Programming.jpg"
        }
      ], 
      "developers": [], 
      "discipline": {
        "assets": [
          "Not Printing"
        ], 
        "discipline_id": "cse", 
        "discipline_name": "Computer Science and Engineering", 
        "id": "6"
      }, 
      "exp_id": "e99800", 
      "exp_name": "Numerical Approximation", 
      "hosting_info": [
        {
          "hosted_on": "cloud", 
          "hosted_url": "http://cse02-iiith.vlabs.ac.in/", 
          "hosting_status": "hosted", 
          "id": "442"
        }
      ], 
      "id": "1198", 
      "institute": {
        "assets": [
          "Not Printing"
        ], 
        "id": "7", 
        "institute_id": "iiith", 
        "institute_name": "IIIT Hyderabad"
      }, 
      "integration_status": {
        "id": "1", 
        "integration_level": 0
      }, 
      "overview": "This experiments deals with Numerical Approximation", 
      "sections": [
        {
          "id": "10", 
          "name": "Introduction"
        }, 
        {
          "id": "3", 
          "name": "Theory"
        }, 
        {
          "id": "171", 
          "name": "Objective"
        }, 
        {
          "id": "191", 
          "name": "Manual"
        }, 
        {
          "id": "4", 
          "name": "Procedure"
        }, 
        {
          "id": "303", 
          "name": "Further Reading"
        }
      ]
    }, 
    {
      "assets": [
        {
          "asset_type": {
            "asset_type": "image", 
            "id": "1"
          }, 
          "id": "84", 
          "path": "../../static/IIITH-Computer-Programming.jpg"
        }
      ], 
      "developers": [], 
      "discipline": {
        "assets": [
          "Not Printing"
        ], 
        "discipline_id": "cse", 
        "discipline_name": "Computer Science and Engineering", 
        "id": "6"
      }, 
      "exp_id": "e99799", 
      "exp_name": "Functions", 
      "hosting_info": [
        {
          "hosted_on": "cloud", 
          "hosted_url": "http://cse02-iiith.vlabs.ac.in/", 
          "hosting_status": "hosted", 
          "id": "442"
        }
      ], 
      "id": "1201", 
      "institute": {
        "assets": [
          "Not Printing"
        ], 
        "id": "7", 
        "institute_id": "iiith", 
        "institute_name": "IIIT Hyderabad"
      }, 
      "integration_status": {
        "id": "1", 
        "integration_level": 0
      }, 
      "overview": "This experiments deals with Functions", 
      "sections": [
        {
          "id": "10", 
          "name": "Introduction"
        }, 
        {
          "id": "3", 
          "name": "Theory"
        }, 
        {
          "id": "171", 
          "name": "Objective"
        }, 
        {
          "id": "191", 
          "name": "Manual"
        }, 
        {
          "id": "4", 
          "name": "Procedure"
        }, 
        {
          "id": "303", 
          "name": "Further Reading"
        }
      ]
    }, 
    {
      "assets": [
        {
          "asset_type": {
            "asset_type": "image", 
            "id": "1"
          }, 
          "id": "84", 
          "path": "../../static/IIITH-Computer-Programming.jpg"
        }
      ], 
      "developers": [], 
      "discipline": {
        "assets": [
          "Not Printing"
        ], 
        "discipline_id": "cse", 
        "discipline_name": "Computer Science and Engineering", 
        "id": "6"
      }, 
      "exp_id": "e99798", 
      "exp_name": "Advanced Control Flow", 
      "hosting_info": [
        {
          "hosted_on": "cloud", 
          "hosted_url": "http://cse02-iiith.vlabs.ac.in/", 
          "hosting_status": "hosted", 
          "id": "442"
        }
      ], 
      "id": "1202", 
      "institute": {
        "assets": [
          "Not Printing"
        ], 
        "id": "7", 
        "institute_id": "iiith", 
        "institute_name": "IIIT Hyderabad"
      }, 
      "integration_status": {
        "id": "1", 
        "integration_level": 0
      }, 
      "overview": "This experiments deals with Advanced Control Flow", 
      "sections": [
        {
          "id": "10", 
          "name": "Introduction"
        }, 
        {
          "id": "3", 
          "name": "Theory"
        }, 
        {
          "id": "171", 
          "name": "Objective"
        }, 
        {
          "id": "191", 
          "name": "Manual"
        }, 
        {
          "id": "4", 
          "name": "Procedure"
        }, 
        {
          "id": "303", 
          "name": "Further Reading"
        }
      ]
    }, 
    {
      "assets": [
        {
          "asset_type": {
            "asset_type": "image", 
            "id": "1"
          }, 
          "id": "84", 
          "path": "../../static/IIITH-Computer-Programming.jpg"
        }
      ], 
      "developers": [], 
      "discipline": {
        "assets": [
          "Not Printing"
        ], 
        "discipline_id": "cse", 
        "discipline_name": "Computer Science and Engineering", 
        "id": "6"
      }, 
      "exp_id": "e99797", 
      "exp_name": "Arrays", 
      "hosting_info": [
        {
          "hosted_on": "cloud", 
          "hosted_url": "http://cse02-iiith.vlabs.ac.in/", 
          "hosting_status": "hosted", 
          "id": "442"
        }
      ], 
      "id": "1204", 
      "institute": {
        "assets": [
          "Not Printing"
        ], 
        "id": "7", 
        "institute_id": "iiith", 
        "institute_name": "IIIT Hyderabad"
      }, 
      "integration_status": {
        "id": "1", 
        "integration_level": 0
      }, 
      "overview": "This experiments deals with Arrays", 
      "sections": [
        {
          "id": "10", 
          "name": "Introduction"
        }, 
        {
          "id": "3", 
          "name": "Theory"
        }, 
        {
          "id": "171", 
          "name": "Objective"
        }, 
        {
          "id": "191", 
          "name": "Manual"
        }, 
        {
          "id": "4", 
          "name": "Procedure"
        }, 
        {
          "id": "303", 
          "name": "Further Reading"
        }
      ]
    }, 
    {
      "assets": [
        {
          "asset_type": {
            "asset_type": "image", 
            "id": "1"
          }, 
          "id": "84", 
          "path": "../../static/IIITH-Computer-Programming.jpg"
        }
      ], 
      "developers": [], 
      "discipline": {
        "assets": [
          "Not Printing"
        ], 
        "discipline_id": "cse", 
        "discipline_name": "Computer Science and Engineering", 
        "id": "6"
      }, 
      "exp_id": "e99796", 
      "exp_name": "Structures", 
      "hosting_info": [
        {
          "hosted_on": "cloud", 
          "hosted_url": "http://cse02-iiith.vlabs.ac.in/", 
          "hosting_status": "hosted", 
          "id": "442"
        }
      ], 
      "id": "1197", 
      "institute": {
        "assets": [
          "Not Printing"
        ], 
        "id": "7", 
        "institute_id": "iiith", 
        "institute_name": "IIIT Hyderabad"
      }, 
      "integration_status": {
        "id": "1", 
        "integration_level": 0
      }, 
      "overview": "This experiments deals with Structures", 
      "sections": [
        {
          "id": "10", 
          "name": "Introduction"
        }, 
        {
          "id": "3", 
          "name": "Theory"
        }, 
        {
          "id": "171", 
          "name": "Objective"
        }, 
        {
          "id": "191", 
          "name": "Manual"
        }, 
        {
          "id": "4", 
          "name": "Procedure"
        }, 
        {
          "id": "303", 
          "name": "Further Reading"
        }
      ]
    }, 
    {
      "assets": [
        {
          "asset_type": {
            "asset_type": "image", 
            "id": "1"
          }, 
          "id": "84", 
          "path": "../../static/IIITH-Computer-Programming.jpg"
        }
      ], 
      "developers": [], 
      "discipline": {
        "assets": [
          "Not Printing"
        ], 
        "discipline_id": "cse", 
        "discipline_name": "Computer Science and Engineering", 
        "id": "6"
      }, 
      "exp_id": "e99795", 
      "exp_name": "Basic Control Flow", 
      "hosting_info": [
        {
          "hosted_on": "cloud", 
          "hosted_url": "http://cse02-iiith.vlabs.ac.in/", 
          "hosting_status": "hosted", 
          "id": "442"
        }
      ], 
      "id": "1199", 
      "institute": {
        "assets": [
          "Not Printing"
        ], 
        "id": "7", 
        "institute_id": "iiith", 
        "institute_name": "IIIT Hyderabad"
      }, 
      "integration_status": {
        "id": "1", 
        "integration_level": 0
      }, 
      "overview": "This experiments deals with Basic Control Flow", 
      "sections": [
        {
          "id": "10", 
          "name": "Introduction"
        }, 
        {
          "id": "3", 
          "name": "Theory"
        }, 
        {
          "id": "171", 
          "name": "Objective"
        }, 
        {
          "id": "191", 
          "name": "Manual"
        }, 
        {
          "id": "4", 
          "name": "Procedure"
        }, 
        {
          "id": "303", 
          "name": "Further Reading"
        }
      ]
    }, 
    {
      "assets": [
        {
          "asset_type": {
            "asset_type": "image", 
            "id": "1"
          }, 
          "id": "84", 
          "path": "../../static/IIITH-Computer-Programming.jpg"
        }
      ], 
      "developers": [], 
      "discipline": {
        "assets": [
          "Not Printing"
        ], 
        "discipline_id": "cse", 
        "discipline_name": "Computer Science and Engineering", 
        "id": "6"
      }, 
      "exp_id": "e99794", 
      "exp_name": "Strings", 
      "hosting_info": [
        {
          "hosted_on": "cloud", 
          "hosted_url": "http://cse02-iiith.vlabs.ac.in/", 
          "hosting_status": "hosted", 
          "id": "442"
        }
      ], 
      "id": "1203", 
      "institute": {
        "assets": [
          "Not Printing"
        ], 
        "id": "7", 
        "institute_id": "iiith", 
        "institute_name": "IIIT Hyderabad"
      }, 
      "integration_status": {
        "id": "1", 
        "integration_level": 0
      }, 
      "overview": "This experiments deals with Strings", 
      "sections": [
        {
          "id": "10", 
          "name": "Introduction"
        }, 
        {
          "id": "3", 
          "name": "Theory"
        }, 
        {
          "id": "171", 
          "name": "Objective"
        }, 
        {
          "id": "191", 
          "name": "Manual"
        }, 
        {
          "id": "4", 
          "name": "Procedure"
        }, 
        {
          "id": "303", 
          "name": "Further Reading"
        }
      ]
    }, 
    {
      "assets": [
        {
          "asset_type": {
            "asset_type": "image", 
            "id": "1"
          }, 
          "id": "84", 
          "path": "../../static/IIITH-Computer-Programming.jpg"
        }
      ], 
      "developers": [], 
      "discipline": {
        "assets": [
          "Not Printing"
        ], 
        "discipline_id": "cse", 
        "discipline_name": "Computer Science and Engineering", 
        "id": "6"
      }, 
      "exp_id": "e99793", 
      "exp_name": "Pointers", 
      "hosting_info": [
        {
          "hosted_on": "cloud", 
          "hosted_url": "http://cse02-iiith.vlabs.ac.in/", 
          "hosting_status": "hosted", 
          "id": "442"
        }
      ], 
      "id": "1196", 
      "institute": {
        "assets": [
          "Not Printing"
        ], 
        "id": "7", 
        "institute_id": "iiith", 
        "institute_name": "IIIT Hyderabad"
      }, 
      "integration_status": {
        "id": "1", 
        "integration_level": 0
      }, 
      "overview": "This experiments deals with Pointers", 
      "sections": [
        {
          "id": "10", 
          "name": "Introduction"
        }, 
        {
          "id": "3", 
          "name": "Theory"
        }, 
        {
          "id": "171", 
          "name": "Objective"
        }, 
        {
          "id": "191", 
          "name": "Manual"
        }, 
        {
          "id": "4", 
          "name": "Procedure"
        }, 
        {
          "id": "303", 
          "name": "Further Reading"
        }
      ]
    }, 
    {
      "assets": [
        {
          "asset_type": {
            "asset_type": "image", 
            "id": "1"
          }, 
          "id": "84", 
          "path": "../../static/IIITH-Computer-Programming.jpg"
        }
      ], 
      "developers": [], 
      "discipline": {
        "assets": [
          "Not Printing"
        ], 
        "discipline_id": "cse", 
        "discipline_name": "Computer Science and Engineering", 
        "id": "6"
      }, 
      "exp_id": "e99792", 
      "exp_name": "Recursion", 
      "hosting_info": [
        {
          "hosted_on": "cloud", 
          "hosted_url": "http://cse02-iiith.vlabs.ac.in/", 
          "hosting_status": "hosted", 
          "id": "442"
        }
      ], 
      "id": "1200", 
      "institute": {
        "assets": [
          "Not Printing"
        ], 
        "id": "7", 
        "institute_id": "iiith", 
        "institute_name": "IIIT Hyderabad"
      }, 
      "integration_status": {
        "id": "1", 
        "integration_level": 0
      }, 
      "overview": "This experiments deals with Recursion", 
      "sections": [
        {
          "id": "10", 
          "name": "Introduction"
        }, 
        {
          "id": "3", 
          "name": "Theory"
        }, 
        {
          "id": "171", 
          "name": "Objective"
        }, 
        {
          "id": "191", 
          "name": "Manual"
        }, 
        {
          "id": "4", 
          "name": "Procedure"
        }, 
        {
          "id": "303", 
          "name": "Further Reading"
        }
      ]
    }, 
    {
      "assets": [
        {
          "asset_type": {
            "asset_type": "image", 
            "id": "1"
          }, 
          "id": "84", 
          "path": "../../static/IIITH-Computer-Programming.jpg"
        }
      ], 
      "developers": [], 
      "discipline": {
        "assets": [
          "Not Printing"
        ], 
        "discipline_id": "cse", 
        "discipline_name": "Computer Science and Engineering", 
        "id": "6"
      }, 
      "exp_id": "e99791", 
      "exp_name": "Expression Evaluation", 
      "hosting_info": [
        {
          "hosted_on": "cloud", 
          "hosted_url": "http://cse02-iiith.vlabs.ac.in/", 
          "hosting_status": "hosted", 
          "id": "442"
        }
      ], 
      "id": "1205", 
      "institute": {
        "assets": [
          "Not Printing"
        ], 
        "id": "7", 
        "institute_id": "iiith", 
        "institute_name": "IIIT Hyderabad"
      }, 
      "integration_status": {
        "id": "1", 
        "integration_level": 0
      }, 
      "overview": "This experiments deals with Expression Evaluation", 
      "sections": [
        {
          "id": "10", 
          "name": "Introduction"
        }, 
        {
          "id": "3", 
          "name": "Theory"
        }, 
        {
          "id": "171", 
          "name": "Objective"
        }, 
        {
          "id": "191", 
          "name": "Manual"
        }, 
        {
          "id": "4", 
          "name": "Procedure"
        }, 
        {
          "id": "303", 
          "name": "Further Reading"
        }
      ]
    }
  ], 
  "hosting_info": [
    {
      "hosted_on": "cloud", 
      "hosted_url": "http://cse02-iiith.vlabs.ac.in/", 
      "hosting_status": "hosted", 
      "id": "442"
    }
  ], 
  "id": "76", 
  "institute": {
    "assets": [
      {
        "asset_type": {
          "asset_type": "image", 
          "id": "1"
        }, 
        "id": "156", 
        "path": "iiit-hyderabad.png"
      }
    ], 
    "id": "7", 
    "institute_id": "iiith", 
    "institute_name": "IIIT Hyderabad"
  }, 
  "integration_status": {
    "id": "1", 
    "integration_level": 0
  }, 
  "phase":[{"phase_id":1,  "phase_id":2}],
  "lab_id": "cse02", 
  "lab_name": "Computer Programming", 
  "overview": "This lab deals with Computer Programming", 
  "sections": [
    {
      "id": "10", 
      "name": "Introduction"
    }
  ]
}

#+END_EXAMPLE

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
 http://localhost:5000/labs?lab_id=cse02
#+END_EXAMPLE
   
*** Implementation
#+NAME: update_lab
#+BEGIN_SRC python
@api.route('/labs', methods=['PUT'])
def update():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'lab_id' in request.args:
            data_dict['lab']['id']  = request.args['lab_id']
        else:
            abort(500, "Please provide the 'lab_id' to update the lab")
        
        try:
            current_app.logger.debug("execute update_lab")
            lab = SystemInterface.update_lab(data_dict)
            current_app.logger.debug("executed update_lab")
            return jsonify(lab)

        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

#+END_SRC
*** Test Cases
**** TestUpdateLab
#+NAME: test_update_lab
#+BEGIN_SRC python
class TestUpdateLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_lab(self):
        print "test_update_lab"
        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'institute_name': 'IIT Kanpur',
                   'institute_id': 'IITK',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'discipline_name': 'Computer Science',
                   'discipline_id': 'CSE',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Introduction',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {
		   "key": KEY,
                   "experiment": {
                     "id": "exp123",
                     "name": "arrays",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "developers": [
                       {
                         "name": "Prof. Dharamaja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "overview": "This experiments describes about parallel and distributed processing",
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       }
                     ],
                     "sections": [
                       "Introduction"
                     ]
                   }
                 }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        payload = {           
		   "key" : KEY,     
                   "lab": {
                     "id": "cse02",
                     "name": "Computer Programming",
                     "overview": "overview",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "developers": [
                       {
                         "name": "Prof. Dharamaja",
                         "email": "abc@gmail.com"

                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       }
                     ],
                     "sections": [
                       {
                         "name": "Introduction"
                       }

                     ],
                         "experiments": [
                           "exp123"
                         ]

                   }
                 }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)


        payload1 = {'asset_type': 'Video',
                   'path': 'vlabs.ac.in/images/video/icon.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload1),
                                 headers=headers)

        payload1 = {'institute_name': 'IIT Kharagpur',
                    'institute_id': 'IITKgp',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                    'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload1),
                                 headers=headers)

        payload1 = {'discipline_name': 'Electronics & Comuunication Engg.',
                    'discipline_id': 'ECE',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                    'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload1),
                                 headers=headers)

        payload1 = {'name': 'Prof. Pallavi Pawar',
                   'email': 'pallavi.pawar@gmail.com',
                   'key': KEY}
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload1),
                                 headers=headers)

        payload1 = {'name': 'Theory',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload1),
                                 headers=headers)
                          
        payload1 = {'integration_level': 3,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload1),
                                 headers=headers)

        payload1 = {'hosting_status': 'hosted',
                   'hosted_url': 'http://iitk.vlab.co.in/',
                   'hosted_on': 'server',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload1),
                                 headers=headers)

        payload1 = {           
		   "key" : KEY,     
                   "lab": {
                     "name": "Computer Programming",
                     "overview": "cp overview",
                     "discipline_id": "ECE",
                     "institute_id": "IITKgp",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "developers": [                    
                       {
                         "name": "Prof. Pallavi Pawar",
                         "email": "pallavi.pawar@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {                       
                         "hosting_status": "hosted",
                         "hosted_on": "server",
                         "hosted_url": "http://iitk.vlab.co.in/"
                       }
                     ],
                     "integration_level": 3,
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/video/icon.png"
                       }
                     ],
                     "sections": [
                       {
                         "name": "Theory"
                       }                                              
                     ],
                         "experiments": [
                           "exp123"
                         ]

                   }
                 }

        response = self.client.put("/labs?lab_id=cse02", 
                                       data=json.dumps(payload1),
                                       headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Get Institutes and Get Institute
*** API Design
**** Get all Institutes
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_institutes
  :END:    
  - URL :: /institutes

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
    {
        "id": 1,
        "institute_name": "Amrita University",
        "assets": [],
        "institute_id": "amrita"
    },
    {
        "id": 2,
        "institute_name": "College of Engineering, Pune",
        "assets": [],
        "institute_id": "coep"
    },
    {
        "id": 3,
        "institute_name": "Dayalbagh Educational institute_cls",
        "assets": [],
        "institute_id": "dei"
    },
    {
        "id": 4,
        "institute_name": "IIT Bombay",
        "assets": [],
        "institute_id": "iitb"
    },
    {
        "id": 5,
        "institute_name": "IIT Delhi",
        "assets": [],
        "institute_id": "iitd"
    },
    {
        "id": 6,
        "institute_name": "IIT Guwahati",
        "assets": [],
        "institute_id": "iitg"
    },
    {
        "id": 7,
        "institute_name": "IIIT Hyderabad",
        "assets": [],
        "institute_id": "iiith"
    },
    {
        "id": 8,
        "institute_name": "IIT Kanpur",
        "assets": [],
        "institute_id": "iitk"
    },
    {
        "id": 9,
        "institute_name": "IIT Kharagpur",
        "assets": [],
        "institute_id": "iitkgp"
    },
    {
        "id": 10,
        "institute_name": "IIT Madras",
        "assets": [],
        "institute_id": "iitm"
    },
    {
        "id": 11,
        "institute_name": "IIT Roorkee",
        "assets": [],
        "institute_id": "iitr"
    },
    {
        "id": 12,
        "institute_name": "NIT Surathkal",
        "assets": [],
        "institute_id": "nitk"
    },
    {
        "id": 13,
        "institute_name": "IIT Hyderabad",
        "assets": [
            {
                "path": "vlabs.ac.in/images/static/logo.png",
                "asset_type": "Image",
                "id": 1
            }
        ],
        "institute_id": " IITH"
    }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/institutes
#+END_EXAMPLE

**** Get Institute by Inst id
  :PROPERTIES:
  :CUSTOM_ID: api_get_institute_by_institute_id
  :END:    
  - URL :: /institutes?institute_id=<institute_id>

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
{
    "assets": [
        {
            "asset_type": "Image",
            "id": 1,
            "path": "vlabs.ac.in/images/static/logo.png"
        }
    ],
    "id": 14,
    "institute_id": "IITH",
    "institute_name": "IIT Hyderabad"
}
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/institutes?institute_id=iiith
#+END_EXAMPLE

*** Implementation
REST API to get all institutes and get institute by inst id.
#+NAME: get_institute
#+BEGIN_SRC python
@api.route('/institutes', methods=['GET'])
def get_institute():
    if request.method == 'GET':
       if 'institute_id' in request.args:
           institute_id  = request.args['institute_id']
           try:
               current_app.logger.debug("running operation get_institute")
               institute = SystemInterface.get_institute(institute_id)
               current_app.logger.debug("completed operation get_institute")
               return jsonify(institute)

           except TypeError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str }
               abort(500, msg)

           except StateError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)

           except NotFoundError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
               abort(404, msg)

           except Exception as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)
               

       else:
           try:
               current_app.logger.debug("running operation get_institutes")
               institutes = SystemInterface.get_institutes()
               current_app.logger.debug("completed operation get_institutes")
               return pagination(
                        institutes, 
                        '/institutes?',
                        start=int(request.args.get('page', 1)), 
                        limit=int(request.args.get('pageSize', 25))
               )

           except TypeError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str }
               abort(500, msg)

           except StateError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)

           except NotFoundError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
               abort(404, msg)

           except Exception as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestGetInstitute 
 #+NAME: test_get_Institute
 #+BEGIN_SRC python
class TestGetInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_institutes(self):
        print "test_get_institutes_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'institute_name': 'IIIT Hyderabad',
                   'institute_id': 'IIITH',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/institutes", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestGetInstitutebyInstituteid
#+NAME: test_get_institute_by_instituteid
#+BEGIN_SRC python
class TestGetInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_institute_by_instituteid(self):
        print "test_get_institute_by_instituteid_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'institute_name': 'IIT Kanpur',
                   'institute_id': 'IITK',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/institutes?institute_id=IITK", headers=headers)
        self.assertEqual(response.status_code, 200)
#+END_SRC


** Add Institute 
*** API Design
**** Add Institute
  :PROPERTIES:
  :CUSTOM_ID: api_add_institute
  :END:    
  - URL :: /institutes

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"institute_id": " IITH",
"institute_name": "IIT Hyderabad",
"key": "<key>",
"assets": [
    {
      "asset_type": "Image", 
      "path": "vlabs.ac.in/images/static/logo.png"
    }
  ]
}
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "assets": [
    {
      "asset_type": "Image", 
      "id": "2", 
      "path": "vlabs.ac.in/images/static/logo.png"
    }
  ], 
  "id": "14", 
  "institute_id": " IITK", 
  "institute_name": "IIT Hyderabad"
}

#+END_EXAMPLE

  - Error Response:
    + Contents :
      {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/institutes
#+END_EXAMPLE
    
*** Implementation
REST API to add an institute.
#+NAME: add_institute
#+BEGIN_SRC python
@api.route('/institutes', methods=['POST'])
def add_institute():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            current_app.logger.debug("running operation add_institute")
            institute = SystemInterface.add_institute(data_dict)
            current_app.logger.debug("completed operation add_institute")
            return jsonify(institute)

        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestAddInstitute 
 #+NAME: test_add_institute
 #+BEGIN_SRC python
class TestAddInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_institute(self):
        print "test_add_institute_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'institute_name': 'IIT Kanpur',
                   'institute_id': 'IITK',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC

     
** Get Disciplines and Get Discipline
*** API Design
**** Get all Disciplines
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_disciplines
  :END:    
  - URL :: /disciplines

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
    {
        "discipline_id": "aero",
        "assets": [],
        "discipline_name": "Aerospace Engineering",
        "id": 1
    },
    {
        "discipline_id": "biotech",
        "assets": [],
        "discipline_name": "Biotechnology and Biomedical Engineering",
        "id": 2
    },
    {
        "discipline_id": "chem-engg",
        "assets": [],
        "discipline_name": "Chemical Engineering",
        "id": 3
    },
    {
        "discipline_id": "chem",
        "assets": [],
        "discipline_name": "Chemical Sciences",
        "id": 4
    },
    {
        "discipline_id": "civil",
        "assets": [],
        "discipline_name": "Civil Engineering",
        "id": 5
    },
    {
        "discipline_id": "cse",
        "assets": [],
        "discipline_name": "Computer Science and Engineering",
        "id": 6
    },
    {
        "discipline_id": "ee",
        "assets": [],
        "discipline_name": "Electrical Engineering",
        "id": 7
    },
    {
        "discipline_id": "ece",
        "assets": [],
        "discipline_name": "Electronics and Communication",
        "id": 8
    },
    {
        "discipline_id": "hmt",
        "assets": [],
        "discipline_name": "Humanities",
        "id": 9
    },
    {
        "discipline_id": "mech",
        "assets": [],
        "discipline_name": "Mechanical Engineering",
        "id": 10
    },
    {
        "discipline_id": "phy-sc",
        "assets": [],
        "discipline_name": "Physical Sciences",
        "id": 11
    },
    {
        "discipline_id": "tex-engg",
        "assets": [],
        "discipline_name": "Textile Engineering",
        "id": 12
    },
    {
        "discipline_id": "dsgn-engg",
        "assets": [],
        "discipline_name": "Design Engineering",
        "id": 13
    },
    {
        "discipline_id": "mat-sc",
        "assets": [],
        "discipline_name": "Material Sciences",
        "id": 14
    },
    {
        "discipline_id": "ab",
        "assets": [
            {
                "path": "vlabs.ac.in/images/static/logo.png",
                "asset_type": "Image",
                "id": 1
            }
        ],
        "discipline_name": "Auto Mobiles",
        "id": 15
    }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/disciplines
#+END_EXAMPLE

**** Get Discipline by discipline_id
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_disciplines
  :END:    
  - URL :: /disciplines?discipline_id=<discipline_id>

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
{
    "assets": [
        {
            "asset_type": "Image",
            "id": 1,
            "path": "vlabs.ac.in/images/static/logo.png"
        }
    ],
    "discipline_id": "ab",
    "discipline_name": "Auto Mobiles",
    "id": 15
}
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/disciplines?discipline_id=cse
#+END_EXAMPLE

*** Implementation
    REST API to get discipline.
#+NAME: get_disciplines
#+BEGIN_SRC python
@api.route('/disciplines', methods=['GET'])
def get_discipline():
    if request.method == 'GET':
        if 'discipline_id' in request.args:
            discipline_id  = request.args['discipline_id']
            try:
                current_app.logger.debug("running operation get_discipline")
                discipline = SystemInterface.get_discipline(discipline_id)
                current_app.logger.debug("completed operation get_discipline")
                return jsonify(discipline)
            
            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                        "msg": err_str}
                abort(404, msg)

            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)
                
        
        else:

            try:
                current_app.logger.debug("running operation get_disciplines")
                disciplines = SystemInterface.get_disciplines()               
                current_app.logger.debug("completed operation get_disciplines")
                return pagination(
                        disciplines, 
                        '/disciplines?',
                        start=int(request.args.get('page', 1)), 
                        limit=int(request.args.get('pageSize', 25))
                )
            
            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)
#+END_SRC

*** Test Cases
**** TestGetDiscipline
 #+NAME: test_get_discipline
 #+BEGIN_SRC python
class TestGetDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_disciplines(self):
        print "test_get_discipline_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'discipline_name': 'IIT Delhi',
                   'discipline_id': 'EEE10',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/disciplines", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestGetDisciplinebyDisId
 #+NAME: test_get_discipline_by_disid
 #+BEGIN_SRC python
class TestGetDisciplineByDisId(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_discipline_by_disid(self):
        print "test_get_discipline_by_disid_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'discipline_name': 'IIT Delhi',
                   'discipline_id': 'EEE10',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/disciplines?discipline_id=EEE10",
                                       headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC


** Add Discipline
*** API Design
**** Add Discipline
  :PROPERTIES:
  :CUSTOM_ID: api_add_discipline
  :END:    
  - URL :: /disciplines

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"discipline_id": "ab",
"discipline_name": "Auto Mobiles",
"assets": [
{
"asset_type": "Image",
"path": "vlabs.ac.in/images/static/logo.png"
}
],
"key": "<key>"
}
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
    "assets": [
        {
            "asset_type": "Image",
            "id": 1,
            "path": "vlabs.ac.in/images/static/logo.png"
        }
    ],
    "discipline_id": "ab",
    "discipline_name": "Auto Mobiles",
    "id": 15
}

#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/discipline
#+END_EXAMPLE

*** Implementation  
    REST API to add discipline.
#+NAME: add_discipline
#+BEGIN_SRC python
@api.route('/disciplines', methods=['POST'])
def add_discipline():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            current_app.logger.debug("running operation add_discipline")
            dis = SystemInterface.add_discipline(data_dict)           
            current_app.logger.debug("completed operation add_discipline")
            return jsonify(dis)

        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestAddDiscipline
 #+NAME: test_add_discipline
 #+BEGIN_SRC python
class TestAddDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_discipline(self):
        print "test_add_discipline_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'discipline_name': 'IIT Delhi',
                   'discipline_id': 'EEE10',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC


** Get Experiments and Get Experiment
*** API Designs
**** Get all experiments
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_experiments
  :END:    
  - URL :: /experiments

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
    {
        "discipline": {
            "discipline_id": "cse",
            "id": 1,
            "discipline_name": "Computer Science"
        },
        "assets": [
            {
                "path": "vlabs.ac.in/images/static/logo.png",
                "asset_type": "Image",
                "id": 1
            }
        ],
        "institute": {
            "institute_name": "IIIT Hyderabad",
            "id": 1,
            "institute_id": "iiith"
        },
        "exp_name": "stack",
        "hostinginfos": [
            {
                "hosting_status": "hosted",
                "hosted_url": "http://cse14-iiith.vlabs.ac.in",
                "hosted_on": "cloud",
                "id": 1
            }
        ],
        "integrationstatus": {
            "integration_level": 4,
            "id": 1
        },
        "overview": "overview",
        "exp_id": "ece01",
        "developers": [
            {
                "id": 1,
                "name": {
                    "name": "Prof. Dharamraj",
                    "id": 4
                },
                "email": {
                    "email": "dharamraj@gmail.com",
                    "id": 4
                }
            }
        ],
        "sections": [
            {
                "name": "Procedure",
                "id": 2
            },
            {
                "name": "Theory",
                "id": 1
            }
        ],
        "id": 2
    },
    {
        "discipline": {
            "discipline_id": "cse",
            "id": 1,
            "discipline_name": "Computer Science"
        },
        "assets": [],
        "institute": {
            "institute_name": "IIIT Hyderabad",
            "id": 1,
            "institute_id": "iiith"
        },
        "exp_name": "stack",
        "hostinginfos": [],
        "integrationstatus": {
            "integration_level": 4,
            "id": 1
        },
        "overview": "overview",
        "exp_id": "ece02",
        "developers": [],
        "sections": [],
        "id": 4
    },
    {
        "discipline": {
            "discipline_id": "cse",
            "id": 1,
            "discipline_name": "Computer Science"
        },
        "assets": [
            {
                "path": "vlabs.ac.in/images/static/logo.png",
                "asset_type": "Image",
                "id": 1
            }
        ],
        "institute": {
            "institute_name": "IIIT Hyderabad",
            "id": 1,
            "institute_id": "iiith"
        },
        "exp_name": "stack",
        "hostinginfos": [
            {
                "hosting_status": "hosted",
                "hosted_url": "http://cse14-iiith.vlabs.ac.in",
                "hosted_on": "cloud",
                "id": 1
            }
        ],
        "integrationstatus": {
            "integration_level": 4,
            "id": 1
        },
        "overview": "overview",
        "exp_id": "cse03",
        "developers": [
            {
                "id": 1,
                "name": {
                    "name": "Prof. Dharamraj",
                    "id": 4
                },
                "email": {
                    "email": "dharamraj@gmail.com",
                    "id": 4
                }
            }
        ],
        "sections": [
            {
                "name": "Procedure",
                "id": 2
            },
            {
                "name": "Theory",
                "id": 1
            }
        ],
        "id": 6
    }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/experiments
#+END_EXAMPLE

**** Get experiment by exp_id
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_experiments
  :END:    
  - URL :: /experiments?exp_id=<exp_id>

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
{
    "assets": [
        {
            "asset_type": "Image",
            "id": 1,
            "path": "vlabs.ac.in/images/static/logo.png"
        },
        {
            "asset_type": "image",
            "id": 2,
            "path": "vlabs.ac.in/images/static/image.png"
        }
    ],
    "developers": [
        {
            "discipline": {
                "assets": [],
                "discipline_id": "cse",
                "discipline_name": "Computer Science and Engineering",
                "id": 6
            },
            "email": {
                "email": "abc@gmail.com",
                "id": 6
            },
            "id": 3,
            "institute": {
                "assets": [],
                "id": 8,
                "institute_id": "iitk",
                "institute_name": "IIT Kanpur"
            },
            "name": {
                "id": 6,
                "name": "Prof. Dharamaja"
            }
        },
        {
            "discipline": {
                "assets": [],
                "discipline_id": "cse",
                "discipline_name": "Computer Science and Engineering",
                "id": 6
            },
            "email": {
                "email": "pallavi.pawar@gmail.com",
                "id": 7
            },
            "id": 4,
            "institute": {
                "assets": [],
                "id": 8,
                "institute_id": "iitk",
                "institute_name": "IIT Kanpur"
            },
            "name": {
                "id": 7,
                "name": "Prof. Pallavi Pawar"
            }
        }
    ],
    "discipline": {
        "assets": [],
        "discipline_id": "cse",
        "discipline_name": "Computer Science and Engineering",
        "id": 6
    },
    "exp_id": "cse01",
    "exp_name": "stack",
    "hosting_info": [
        {
            "hosted_on": "cloud",
            "hosted_url": "http://cse14-iiith.vlabs.ac.in",
            "hosting_status": "hosted",
            "id": 4
        },
        {
            "hosted_on": "server",
            "hosted_url": "http://iitkgp.vlab.co.in/",
            "hosting_status": "hosted",
            "id": 5
        }
    ],
    "id": 1,
    "institute": {
        "assets": [],
        "id": 8,
        "institute_id": "iitk",
        "institute_name": "IIT Kanpur"
    },
    "integration_status": {
        "id": 5,
        "integration_level": 4
    },
    "overview": "overview",
    "sections": [
        {
            "id": 3,
            "name": "Procedure"
        },
        {
            "id": 2,
            "name": "Theory"
        }
    ]
}
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/experiments?exp_id=exp9
#+END_EXAMPLE

*** Implementation
 REST API to get single experiment by exp_id and get all experiments.
#+NAME: get_experiment
#+BEGIN_SRC python
@api.route('/experiments', methods=['GET'])
def get_experiment():
    if request.method == 'GET':
        if 'exp_id' in request.args:
            exp_id  = request.args['exp_id']
            try:
                current_app.logger.debug("execute get_exp_by_expid")
                exp = SystemInterface.get_experiment(exp_id)
                current_app.logger.debug("executed get_exp_by_expid")
                return jsonify(exp)

            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)
        else:
            try:
                current_app.logger.debug("execute get_experiments")
                experiments = SystemInterface.get_experiments()
                current_app.logger.debug("executed get_experiments")
                return pagination(
                        experiments, 
                        '/experiments?',
                        start=int(request.args.get('page', 1)), 
                        limit=int(request.args.get('pageSize', 25))
                )

            except NotAuthorizedError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                           "status code": 401,
                           "msg": err_str}
                abort(401, msg)
                
            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                           "msg": err_str }
                abort(500, msg)
                
            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
                
            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 404,
                        "msg": err_str}
                abort(404, msg)
                
            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
                
#+END_SRC
 
*** Test Cases
**** TestGetExperiment
 #+NAME: test_get_Experiment
 #+BEGIN_SRC python
class TestGetExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_experiments(self):
        print "test_get_experiments_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'institute_name': 'IIT Kanpur',
                   'institute_id': 'IITK',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'discipline_name': 'Computer Science',
                   'discipline_id': 'CSE',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                     headers=headers)

        payload = {'integration_level': 4,
                    'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}  

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {
                    "key" : KEY,
		    "experiment": {
		      "id": "e99847",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
                  }
               
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/experiments", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestGetExperimentbyExpid
#+NAME: test_get_exp_by_expid
#+BEGIN_SRC python
class TestGetExp(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_experiment_by_expid(self):
        print "test_get_experiment_by_expid_in_rest"
        payload = {'integration_level': 4,
                    'key': KEY
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                       headers=headers)


        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {'institute_name': 'IIT Kanpur',
                   'institute_id': 'IITK',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'discipline_name': 'Computer Science',
                   'discipline_id': 'CSE',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers) 

        payload = {
                    "key" : KEY,
		    "experiment": {
		      "id": "e99847",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/experiments", headers=headers)
        self.assertEqual(response.status_code, 200)


#+END_SRC


** Add Experiment 
*** API Designs
**** Add Experiment
  :PROPERTIES:
  :CUSTOM_ID: api_add_experiment
  :END:    
  - URL :: /experiments

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
                    "key" : "defaultkey",
		    "experiment": {
		      "id": "exp123",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
                  }
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "assets": [
    {
      "asset_type": "Image", 
      "id": "2", 
      "path": "vlabs.ac.in/images/static/logo.png"
    }, 
    {
      "asset_type": "video", 
      "id": "3", 
      "path": "vlabs.ac.in/video/abc.mkv"
    }
  ], 
  "developers": [
    {
      "email": {
        "email": "xyz@gmail.com", 
        "id": "6"
      }, 
      "id": "5", 
      "name": {
        "id": "6", 
        "name": "Dinesh Malviya"
      }
    }, 
    {
      "email": {
        "email": "abc@gmail.com", 
        "id": "7"
      }, 
      "id": "6", 
      "name": {
        "id": "7", 
        "name": "Ashish Ahuja"
      }
    }
  ], 
  "discipline": {
    "assets": [], 
    "discipline_id": "cse", 
    "discipline_name": "Computer Science and Engineering", 
    "id": "6"
  }, 
  "exp_id": "exp123", 
  "exp_name": "Parallel and distributed processing", 
  "hosting_info": [
    {
      "hosted_on": "college-cloud", 
      "hosted_url": "http://cse14-iiith.ac.in", 
      "hosting_status": "hosted", 
      "id": "1"
    }
  ], 
  "id": "1", 
  "institute": {
    "assets": [], 
    "id": "8", 
    "institute_id": "iitk", 
    "institute_name": "IIT Kanpur"
  }, 
  "integration_status": {
    "id": "5", 
    "integration_level": 4
  }, 
  "overview": "overview", 
  "sections": [
    {
      "id": "2", 
      "name": "Introduction"
    }, 
    {
      "id": "3", 
      "name": "Objective"
    }, 
    {
      "id": "4", 
      "name": "Tutorial"
    }, 
    {
      "id": "5", 
      "name": "Illustration"
    }, 
    {
      "id": "6", 
      "name": "Procedure"
    }, 
    {
      "id": "7", 
      "name": "Experiment"
    }, 
    {
      "id": "8", 
      "name": "Observations"
    }, 
    {
      "id": "9", 
      "name": "Assignment"
    }, 
    {
      "id": "10", 
      "name": "References"
    }
  ]
}

#+END_EXAMPLE

  - Error Response:
    + Contents :
      {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/experiments
#+END_EXAMPLE

*** Implementation
 REST API to add an experiment.
#+NAME: add_experiment
#+BEGIN_SRC python
@api.route('/experiments', methods=['POST'])
def get_add_experiment():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            current_app.logger.debug("execute add_experiment")
            exp = SystemInterface.add_experiment(data_dict)
            current_app.logger.debug("executed add_experiment")
            return jsonify(exp.to_client())

        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestAddExperiment
 #+NAME: test_add_experiment
 #+BEGIN_SRC python
class TestAddExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_experiment(self):
        print "test_add_experiment_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                       headers=headers)

        payload = {'institute_name': 'IIT Kanpur',
                   'institute_id': 'IITK',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'discipline_name': 'Computer Science',
                   'discipline_id': 'CSE',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}   

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers) 

        payload = {'integration_level': 4,
                    'key': KEY
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {
                    "key" : KEY,
		    "experiment": {
		      "id": "e99847",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/experiments", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC

     
** Get Sections
*** API Design
**** Get all Sections
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_sections
  :END:    
  - URL :: /sections

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
[{"name": "Theory", "id": 1}]
#+END_EXAMPLE    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/sections
#+END_EXAMPLE
    
*** Implementation 
REST API to get Sections.
#+NAME: get_sections
#+BEGIN_SRC python
@api.route('/sections', methods=['GET'])
def get_sections():
    if request.method == 'GET':
        try:
            current_app.logger.debug("execute get_sections")
            sections = SystemInterface.get_sections()
            current_app.logger.debug("executed get_sections")
            return pagination(
                        sections, 
                        '/sections?',
                        start=int(request.args.get('page', 1)), 
                        limit=int(request.args.get('pageSize', 25))
            )

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestGetSections
 #+NAME: test_get_Sections
 #+BEGIN_SRC python
class TestGetSections(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_sections(self):
        print "test_get_sections_in_rest"

        payload = {'name': 'Theory',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/sections", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC


** Add Section
*** API Design
**** Add sections
  :PROPERTIES:
  :CUSTOM_ID: api_add_sections
  :END:    
  - URL :: /sections

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE

{
  "key": "<key>",
  "name" : "Theory"
}

#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "name": "Theory"
}
#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/save_lab_spec_data
#+END_EXAMPLE 

*** Implementation 
REST API to add Section.
#+NAME: add_section
#+BEGIN_SRC python
@api.route('/sections', methods=['POST'])
def add_section():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            current_app.logger.debug("execute add_section")
            section = SystemInterface.add_section(data_dict)
            current_app.logger.debug("executed add_section")
            return jsonify(section)

        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestAddSection
 #+NAME: test_add_section
 #+BEGIN_SRC python
class TestAddSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_section(self):
        print "test_add_section_in_rest"
        payload = {'name': 'Quiz',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC


** Get Hosting_Info and Get HostingInfo
*** API Design
**** Get all Hosting_Info
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_hosting_info
  :END:    
  - URL :: /hosting_info

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[{"hosting_status": "hosted", "hosted_url": "http://cse14-iiith.vlabs.ac.in", "hosted_on": "cloud", "id": 1}]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
      {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/hosting_info
#+END_EXAMPLE

**** Get Hosting_Info by hosted_url
  :PROPERTIES:
  :CUSTOM_ID: api_get_hosting_info_by_hosted_url
  :END:    
  - URL :: /hosting_infos?hosted_url=<hosted_url>

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
{
    "hosted_on": "cloud",
    "hosted_url": "http://cse14-iiith.vlabs.ac.in",
    "hosting_status": "hosted",
    "id": 1
}
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/assets?path=http://cse14-iiith.vlabs.ac.in
#+END_EXAMPLE
*** Implementation
REST API to get all hosting_info.
#+NAME: get_hosting_info
#+BEGIN_SRC python
@api.route('/hosting_info', methods=['GET'])
def get_hosting_info():
    if request.method == 'GET':
       if 'hosted_url' in request.args:
           hosted_url  = request.args['hosted_url']
           try:
               current_app.logger.debug("execute get_hosting_info_by_hosted_url")
               hosting_info = SystemInterface.get_hosting_info_by_hosted_url(hosted_url)
               current_app.logger.debug("executed get_hosting_info_by_hosted_url")
               return jsonify(hosting_info)

           except NotAuthorizedError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
               abort(401, msg)

           except TypeError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str }
               abort(500, msg)

           except StateError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)

           except NotFoundError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
               abort(404, msg)

           except Exception as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)
       else:
           try:
               current_app.logger.debug("execute get_hosting_info")
               hosting_info = SystemInterface.get_hosting_info()
               current_app.logger.debug("executed get_hosting_info")
               return pagination(
                        hosting_info, 
                        '/hosting_info?',
                        start=int(request.args.get('page', 1)), 
                        limit=int(request.args.get('pageSize', 25))
               )

           except NotAuthorizedError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
               abort(401, msg)

           except TypeError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str }
               abort(500, msg)

           except StateError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)

           except NotFoundError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
               abort(404, msg)

           except Exception as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)
#+END_SRC

*** Test Cases
**** TestGetHosting_Info 
 #+NAME: test_get_Hosting_Info
 #+BEGIN_SRC python
class TestGetHosting_Info(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_hosting_info(self):
        print "test_get_hosting_info_in_rest"

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/hosting_info", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestGetHostingInfoByHostedURL
 #+NAME: test_get_hosting_info_by_hosted_url
 #+BEGIN_SRC python
class TestGetAssetByPath(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_asset_by_path(self):
        print "test_get_hosting_info_by_hosted_url_in_rest"

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/hosting_info", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
     

** Delete Lab
*** API Design
**** Delete lab by lab_id
  :PROPERTIES:
  :CUSTOM_ID: api_delete_lab_by_lab_id
  :END:    
  - URL :: /labs?<lab_id>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/labs?lab_id=cse09&key=<key>
#+END_EXAMPLE

*** Implementation
#+NAME: delete_lab
#+BEGIN_SRC python
@api.route('/labs', methods=['DELETE'])
def delete_lab():
    if request.method == 'DELETE':
        if 'lab_id' in request.args and 'key' in request.args:
            lab_id  = request.args['lab_id']
            key = request.args['key']
            try:
                current_app.logger.debug("execute delete_lab")
                lab = SystemInterface.delete_lab(lab_id, key)
                current_app.logger.debug("executed delete_lab")
                return jsonify({"status":"sucess"})

            except NotAuthorizedError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 401,
                       "msg": err_str}
                abort(401, msg)

            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str }
                abort(500, msg)
            
            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                           "msg": err_str}
                abort(500, msg)
            
            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 404,
                        "msg": err_str}
                abort(404, msg)
            
            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
            
#+END_SRC
*** Test Cases
**** TestDeleteLab
 #+NAME: test_delete_lab
 #+BEGIN_SRC python
class TestDeleteLab(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_lab(self):
        print "test_delete_lab"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'institute_name': 'IIT Kanpur',
                   'institute_id': 'IITK',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'discipline_name': 'Computer Science',
                   'discipline_id': 'CSE',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}
        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)
  
        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {
		   "key": KEY,
                   "experiment": {
                     "id": "exp123",
                     "name": "arrays",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "overview": "This experiments describes about parallel and distributed processing",
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       "Introduction",
                       "Objective",
                       "Tutorial",
                       "Illustration",
                       "Procedure",
                       "Experiment",
                       "Observations",
                       "Assignment",
                       "References"
                     ]
                   }
                 }

        headers = {'Content-Type': 'application/json'}
        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)        

        payload = {           
		   "key" : KEY,     
                   "lab": {
                     "id": "cse02",
                     "name": "Computer Programming",
                     "overview": "overview",
                     "discipline_id": "CSE",
                     "institute_id": "IITK",
                     "phase":[{"phase_id":1,  "phase_id":2}],
                     "developers": [
                       {
                         "name": "Dinesh Malviya",
                         "email": "xyz@gmail.com"
                       },
                       {
                         "name": "Ashish Ahuja",
                         "email": "abc@gmail.com"
                       }
                     ],
                     "hosting_info": [
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "cloud",
                         "hosted_url": "http://cse14-iiith.vlabs.ac.in"
                       },
                       {
                         "hosting_status": "hosted",
                         "hosted_on": "college-cloud",
                         "hosted_url": "http://cse14-iiith.ac.in"
                       }
                     ],
                     "integration_level": 4,
                     "assets": [
                       {
                         "asset_type": "image",
                         "path": "vlabs.ac.in/images/static/logo.png"
                       },
                       {
                         "asset_type": "video",
                         "path": "vlabs.ac.in/video/abc.mkv"
                       }
                     ],
                     "sections": [
                       {
                         "name": "Introduction"
                       }                       
                       
                     ],
                         "experiments": [
                           "exp123"
                         ]

                   }
                 }
        headers = {'Content-Type': 'application/json'}
        response = self.client.post("/labs", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/labs?lab_id=cse02&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC


** Add Hosting_Info
*** API Design
**** Add Hosting_Info
  :PROPERTIES:
  :CUSTOM_ID: api_add_hosting_info
  :END:    
  - URL :: /hosting_info

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"hosted_url": "http://cse14-iiith.vlabs.ac.in",
"hosting_status": "hosted",
"hosted_on": "cloud",
"key": "<key>"
}
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "hosted_on": "cloud", 
  "hosted_url": "http://cse14-iiith.vlabs.ac.in", 
  "hosting_status": "hosted", 
  "id": 1
}

#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/hosting_info
#+END_EXAMPLE
    
*** Implementation
REST API to add an hosting_info.
#+NAME: add_hosting_info
#+BEGIN_SRC python
@api.route('/hosting_info', methods=['POST'])
def add_hosting_info():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            current_app.logger.debug("execute add_hosting_info")
            hosting_info = SystemInterface.add_hosting_info(data_dict)
            current_app.logger.debug("executed add_hosting_info")
            return jsonify(hosting_info)

        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestAddHosting_Info
 #+NAME: test_add_hosting_info
 #+BEGIN_SRC python
class TestAddHosting_Info(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_hosting_info(self):
        print "test_add_hosting_info_in_rest"
        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC


** Get Integration_Status and Get IntegrationStatus
*** API Design
**** Get all Integration_Status
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_integration_status
  :END:    
  - URL :: /integration_status

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
    {
        "integration_level": 0,
        "id": 1
    },
    {
        "integration_level": 1,
        "id": 2
    },
    {
        "integration_level": 2,
        "id": 3
    },
    {
        "integration_level": 3,
        "id": 4
    },
    {
        "integration_level": 4,
        "id": 5
    },
    {
        "integration_level": 5,
        "id": 6
    },
    {
        "integration_level": 6,
        "id": 7
    },
    {
        "integration_level": 9,
        "id": 8
    }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/integration_status
#+END_EXAMPLE

*** Implementation
REST API to get all integration_status.
#+NAME: get_integration_status
#+BEGIN_SRC python
@api.route('/integration_status', methods=['GET'])
def get_integration_status():
    if request.method == 'GET':
       if 'integration_level' in request.args:
           integration_level  = request.args['integration_level']
           try:
               current_app.logger.debug("execute get_integration_status_by_IL")
               integration_status = SystemInterface.get_integration_status_by_IL\
                 (integration_level)
               current_app.logger.debug("executed get_integration_status_by_IL")
               return jsonify(integration_status.to_client())

           except NotAuthorizedError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
               abort(401, msg)

           except TypeError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str }
               abort(500, msg)

           except StateError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)

           except NotFoundError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "status code": 404,
                        "msg": err_str}
               abort(404, msg)

           except Exception as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)

       else:
           try:
               current_app.logger.debug("execute get_integration_status")
               integration_status = SystemInterface.get_integration_status()
               current_app.logger.debug("executed get_integration_status")
               return pagination(
                        integration_status, 
                        '/integration_status?',
                        start=int(request.args.get('page', 1)), 
                        limit=int(request.args.get('pageSize', 25))
               ) 

           except NotAuthorizedError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
               abort(401, msg)

           except TypeError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str }
               abort(500, msg)

           except StateError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)

           except NotFoundError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
               abort(404, msg)

           except Exception as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)
#+END_SRC

*** Test Cases
**** TestGetIntegration_Status 
 #+NAME: test_get_Integration_Status
 #+BEGIN_SRC python
class TestGetIntegration_Status(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_integration_status(self):
        print "test_get_integration_status_in_rest"

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/integration_status", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC


** Add Integration_Status 
*** API Design
**** Add Integration_Status
  :PROPERTIES:
  :CUSTOM_ID: api_add_integration_status
  :END:    
  - URL :: /integration_status

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"integration_level": 9,
"key": "<key>"
}
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "integration_level": 4
}

#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/integration_status
#+END_EXAMPLE
    
*** Implementation
REST API to add an integration_status.
#+NAME: add_integration_status
#+BEGIN_SRC python
@api.route('/integration_status', methods=['POST'])
def add_integration_status():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            current_app.logger.debug("execute add_integration_status")
            integration_status = SystemInterface.add_integration_status(data_dict)
            current_app.logger.debug("executed add_integration_status")
            return jsonify(integration_status)

        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestAddIntegration_Status 
 #+NAME: test_add_integration_status
 #+BEGIN_SRC python
class TestAddIntegration_Status(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_integration_status(self):
        print "test_add_integration_status_in_rest"
        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC


** Get Emails
*** API Design
**** Get all Emails
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_emails
  :END:    
  - URL :: /emails

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[{"email": "dharamraj@gmail.com", "id": 1}]
#+END_EXAMPLE	       
    
  - Error Response:
    + Contents :
      {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/emails
#+END_EXAMPLE

*** Implementation
REST API to get all emails.
#+NAME: get_email
#+BEGIN_SRC python
@api.route('/emails', methods=['GET'])
def get_email():
    if request.method == 'GET':
       if 'email' in request.args:
           email  = request.args['email']
           try:
               current_app.logger.debug("execute get_email")
               email = SystemInterface.get_email(email)
               current_app.logger.debug("executed get_email")
               return jsonify(email)

           except TypeError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str }
               abort(500, msg)

           except StateError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str}
               abort(500, msg)

           except NotFoundError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
               abort(404, msg)

           except Exception as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)

       else:
           try:
               current_app.logger.debug("execute get_emails")
               emails = SystemInterface.get_emails()
               current_app.logger.debug("executed get_emails")
               return pagination(
                        emails, 
                        '/emails?',
                        start=int(request.args.get('page', 1)), 
                        limit=int(request.args.get('pageSize', 25))
               )

           except TypeError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str }
               abort(500, msg)

           except StateError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)

           except NotFoundError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
               abort(404, msg)

           except Exception as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                       "msg": err_str}
               abort(500, msg)
#+END_SRC

*** Test Cases
**** TestGetEmail
 #+NAME: test_get_Email
 #+BEGIN_SRC python
class TestGetEmail(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_emails(self):
        print "test_get_emails_in_rest"

        payload = {'email': 'dharamraj@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/emails", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/emails", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC

     
** Add Email
*** API Design
**** Add Email
  :PROPERTIES:
  :CUSTOM_ID: api_add_email
  :END:    
  - URL :: /emails

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"email": "dharamraj@gmail.com",
"key": "<key>"
}
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "email": "dharamraj@gmail.com", 
  "id": 1
}

#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/emails
#+END_EXAMPLE
    
*** Implementation
REST API to add an email.
#+NAME: add_email
#+BEGIN_SRC python
@api.route('/emails', methods=['POST'])
def add_email():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            current_app.logger.debug("execute add_email")
            email = SystemInterface.add_email(data_dict)
            current_app.logger.debug("executed add_email")
            return jsonify(email)

        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestAddEmail
 #+NAME: test_add_email
 #+BEGIN_SRC python
class TestAddEmail(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_email(self):
        print "test_add_email_in_rest"
        payload = {'email': 'dharamraj@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/emails", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC

     
** Get Names
*** API Design
**** Get all names
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_sections
  :END:    
  - URL :: /names

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
[{"name" : "Prof. Dharamraj", "id": 1}]
#+END_EXAMPLE    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/names
#+END_EXAMPLE
    
*** Implementation 
REST API to get Names.
#+NAME: get_names
#+BEGIN_SRC python
@api.route('/names', methods=['GET'])
def get_names():
    if request.method == 'GET':
        try:
            current_app.logger.debug("execute get_names")
            names = SystemInterface.get_names()
            current_app.logger.debug("executed get_names")
            return pagination(
                        names, 
                        '/names?',
                        start=int(request.args.get('page', 1)), 
                        limit=int(request.args.get('pageSize', 25))
            )

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestGetNames
 #+NAME: test_get_names
 #+BEGIN_SRC python
class TestGetNames(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_names(self):
        print "test_get_names_in_rest"

        payload = {'name': 'Prof. Dharamraj',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/names", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/names", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
 

** Add Name
*** API Design
**** Add names
  :PROPERTIES:
  :CUSTOM_ID: api_add_names
  :END:    
  - URL :: /names

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE

{
  "key": "<key>",
  "name" : "Prof. Dharamraj"
}

#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "name": "Prof. Dharamraj"
}
#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/names
#+END_EXAMPLE 

*** Implementation 
REST API to  add Name.
#+NAME: add_name
#+BEGIN_SRC python
@api.route('/names', methods=['POST'])
def add_name():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            current_app.logger.debug("execute add_name")
            name = SystemInterface.add_name(data_dict)
            current_app.logger.debug("executed add_name")
            return jsonify(name)

        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestAddName
 #+NAME: test_add_name
 #+BEGIN_SRC python
class TestAddName(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_name(self):
        print "test_add_name_in_rest"
        payload = {'name': 'Prof. Dharamraj',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/names", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC


** Get Developers
*** API Design
**** Get all Developers
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_developers
  :END:    
  - URL :: /developers

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
    {
        "id": 1,
        "name": {
            "name": "Prof. Dharamrajiiiiii",
            "id": 4
        },
        "email": {
            "email": "dharamrajiiiiii@gmail.com",
            "id": 4
        }
    },
    {
        "id": 2,
        "name": {
            "name": "Prof. Dharam",
            "id": 5
        },
        "email": {
            "email": "dharam@gmail.com",
            "id": 5
        }
    }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
      {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/developers
#+END_EXAMPLE

*** Implementation
REST API to get all developers.
#+NAME: get_developer
#+BEGIN_SRC python
@api.route('/developers', methods=['GET'])
def get_developer():
    if request.method == 'GET':
       if 'email' in request.args:
           email  = request.args['email']
           try:
               current_app.logger.debug("execute get_developer")
               developer = SystemInterface.get_developer(email)
               current_app.logger.debug("executed get_developer")
               return jsonify(developer)
           
           except TypeError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str }
               abort(500, msg)

           except StateError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str}
               abort(500, msg)
           
           except NotFoundError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "status code": 404,
                        "msg": err_str}
               abort(404, msg)
           
           except Exception as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str}
               abort(500, msg)
#       elif 'start' in request.args and 'limit' in request.args:
#           start=request.args['start']
#           limit=request.args['limit']
       else:
           try:
               current_app.logger.debug("execute get_developers")
               developers = SystemInterface.get_developers()
               current_app.logger.debug("executed get_developers")
               return pagination(
                        developers, 
                        '/developers?',
                        start=int(request.args.get('page', 1)), 
                        limit=int(request.args.get('pageSize', 25))
               )                      
#                        start=int(request.args.get('page', start)), 
#                        limit=int(request.args.get('pageSize', limit))

           except TypeError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str }
               abort(500, msg)
           
           except StateError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str}
               abort(500, msg)
           
           except NotFoundError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "status code": 404,
                        "msg": err_str}
               abort(404, msg)
           
           except Exception as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str}
               abort(500, msg)
#+END_SRC

*** Test Cases
**** TestGetDeveloper
 #+NAME: test_get_Developer
 #+BEGIN_SRC python
class TestGetDeveloper(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_developers(self):
        print "test_get_developers_in_rest"

        payload = {'dev_name': 'Prof. Dharamraj',
                   'email_id': 'dharamraj@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/developers", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC


** Add Developer
*** API Design
**** Add Developer
  :PROPERTIES:
  :CUSTOM_ID: api_add_developer
  :END:    
  - URL :: /developers

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"name": "Prof. Dharam",
"email": "joy@gmail.com",
"key": "<key>"
}
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "email": {
    "email": "joy@gmail.com", 
    "id": "4"
  }, 
  "id": "4", 
  "name": {
    "id": "4", 
    "name": "Prof. Dharam"
  }
}

#+END_EXAMPLE

  - Error Response:
    + Contents :
      {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/developers
#+END_EXAMPLE
    
*** Implementation
REST API to add an developer.
#+NAME: add_developer
#+BEGIN_SRC python
@api.route('/developers', methods=['POST'])
def add_developer():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            current_app.logger.debug("execute add_developer")
            developer = SystemInterface.add_developer(data_dict)
            current_app.logger.debug("executed add_developer")
            return jsonify(developer.to_client())

        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestAddDeveloper
 #+NAME: test_add_developer
 #+BEGIN_SRC python
class TestAddDeveloper(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_developer(self):
        print "test_add_developer_in_rest"

        payload = {'name': 'Prof. Dharamraj',
                   'email': 'dharamraj@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC


** Update Experiment
*** API Design
**** Update experiment by expid
  :PROPERTIES:
  :CUSTOM_ID: api_update_experiment_by_expid
  :END:    
  - URL :: /experiments/<exp_id>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
                    "key" : "defaultkey",
		    "experiment": {
		      "id": "e99847",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Prof. Dharamaja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],
		      "sections": [
			"Procedure"	
		      ]
		    }
                  }
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "assets": [
    {
      "asset_type": "image", 
      "id": "1", 
      "path": "vlabs.ac.in/images/static/logo.png"
    }
  ], 
  "developers": [
    {
      "email": {
        "email": "abc@gmail.com", 
        "id": "2"
      }, 
      "id": "2", 
      "name": {
        "id": "2", 
        "name": "Ashish Ahuja"
      }
    }
  ], 
  "discipline": {
    "assets": [], 
    "discipline_id": "cse", 
    "discipline_name": "Computer Science and Engineering", 
    "id": "6"
  }, 
  "exp_id": "e99847", 
  "exp_name": "Parallel and distributed processing", 
  "hosting_info": [
    {
      "hosted_on": "college-cloud", 
      "hosted_url": "http://cse14-iiith.ac.in", 
      "hosting_status": "hosted", 
      "id": "2"
    }
  ], 
  "id": "1", 
  "institute": {
    "assets": [], 
    "id": "8", 
    "institute_id": "iitk", 
    "institute_name": "IIT Kanpur"
  }, 
  "integration_status": {
    "id": "5", 
    "integration_level": 4
  }, 
  "overview": "overview", 
  "sections": [
    {
      "id": "5", 
      "name": "Procedure"
    }
  ]
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/experiments?exp_id=e99847
#+END_EXAMPLE

*** Implementation  
#+NAME: update_experiment
#+BEGIN_SRC python
@api.route('/experiments', methods=['PUT'])
def update_experiment():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'exp_id' in request.args:
            data_dict['experiment']['id']  = request.args['exp_id']
        else:
            abort(500, "Please provide the 'exp_id' to update the exp")
        
        try:
            current_app.logger.debug("execute update_experiment")
            exp = SystemInterface.update_experiment(data_dict)
            current_app.logger.debug("execute update_experiment")
            return jsonify(exp)

        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

#+END_SRC
*** Test Cases
***** TestUpdateExperiment
 #+NAME: test_update_experiment
 #+BEGIN_SRC python
class TestUpdateExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_experiment(self):
        print "test_update_experiment"
        
        payload = {'integration_level': 4,
                    'key': KEY
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                  headers=headers)

        payload = {'name': 'Procedure',
                    'key': KEY
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        payload = {'institute_name': 'IIT Kanpur',
                   'institute_id': 'IITK',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'discipline_name': 'Computer Science',
                   'discipline_id': 'CSE',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {
                    "key" : KEY,
		    "experiment": {
		      "id": "e99847",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Prof. Dharamaja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "Logo",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],
		      "sections": [
			"Procedure"	
		      ]
		    }
                    }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)
        
        payload1 = {'integration_level': 3,
                    'key': KEY
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload1),
                                 headers=headers)

        payload1 = {'asset_type': 'Icon',
                   'path': 'vlabs.ac.in/images/static/icon.png',
                   'key': KEY}
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload1),
                                  headers=headers)

        payload1 = {'name': 'Objective',
                    'key': KEY
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload1),
                                 headers=headers)

        payload1 = {'institute_name': 'IIT Kharagpur',
                   'institute_id': 'IITKgp',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload1),
                                 headers=headers)

        payload1 = {'discipline_name': 'Electronic Communication',
                   'discipline_id': 'ECE',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload1),
                                 headers=headers)

        payload1 = {'name': 'Prof. Pallavi Pawar',
                   'email': 'pallavi.pawar@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload1),
                                 headers=headers)

        payload1 = {'hosting_status': 'hosted',
                   'hosted_url': 'http://iitkgp.vlab.co.in/',
                   'hosted_on': 'server',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload1),
                                 headers=headers)
            
        payload1 = {"key" : KEY,
		    "experiment": {
                      "overview": "overview",
		      "name": "queue",
		      "discipline_id": "ECE",
		      "institute_id": "IITKgp",
                      'integration_level': 3,
                      "sections": [
			"Objective"
		      ],
                      "assets": [			
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/images/static/image.png"
			}
		      ],
                      "developers": [			
			{
			  "name": "Prof. Pallavi Pawar",
			  "email": "pallavi.pawar@gmail.com"
			}
		      ],
                      "hosting_info": [			
                        {
			  "hosting_status": "hosted",
			  "hosted_on": "server",
			  "hosted_url": "http://iitkgp.vlab.co.in/"
			}
		      ],
                   }
                }

        headers = {'Content-Type': 'application/json'}

        response = self.client.put("/experiments?exp_id=e99847", 
                                       data=json.dumps(payload1),
                                       headers=headers)
        self.assertEqual(response.status_code, 200)


#+END_SRC
   

** Update section 
*** API Design
  :PROPERTIES:
  :CUSTOM_ID: update_section_by_id
  :END:    
  - URL :: /sections?s_id=<id>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE

{
  "key" : "<key>",
  "name" : "Quiz"
}


#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "name": "Quiz"
}
#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}

    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/sections?s_id=1
#+END_EXAMPLE

*** Implementation
#+NAME: update_section
#+BEGIN_SRC python
@api.route('/sections', methods=['PUT'])
def update_section():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 's_id' in request.args:
            data_dict['s_id']  = request.args['s_id']
        else:
            abort(500, "Please provide the 's_id' to update the section")
        
        try:
            current_app.logger.debug("running operation update_section")
            section = SystemInterface.update_section(data_dict)
            current_app.logger.debug("completed operation update_section")
            return jsonify(section)

        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 401,
                       "msg": err_str}
            abort(401, msg)
            
        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)
            
        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
        
#+END_SRC

*** Test Cases
**** TestUpdateSection
 #+NAME: test_update_section
 #+BEGIN_SRC python
class TestUpdateSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_section(self):
        print "test_update_section"
        payload = {'name': 'Theory',
                   'key': KEY}

        payload1 = {'name': 'Procedure',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.put("/sections?s_id=1",
                                       data=json.dumps(payload1),
                                    headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Delete section 
*** API Design
  :PROPERTIES:
  :CUSTOM_ID: delete_section_by_id
  :END:    
  - URL :: /sections?s_id=<id>&key=<key>
           
  - Method :: DELETE

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/sections?s_id=1&key=defaultkey
#+END_EXAMPLE

*** Implementation
#+NAME: delete_section
#+BEGIN_SRC python
@api.route('/sections', methods=['DELETE'])
def delete_section():
    if request.method == 'DELETE':
         if 's_id' in request.args and 'key' in request.args:
            s_id  = request.args['s_id']
            key = request.args['key']
            try:
                current_app.logger.debug("running operation delete_section")
                section = SystemInterface.delete_section(s_id, key)
                current_app.logger.debug("completed operation delete_section")
                return jsonify({"status":"sucess"})

            except NotAuthorizedError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 401,
                        "msg": err_str}
                abort(401, msg)

            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)
#+END_SRC

*** Test Cases
**** TestDeleteSection
 #+NAME: test_delete_section
 #+BEGIN_SRC python
class TestDeleteSection(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_section(self):
        print "test_delete_section"

        payload = {'name': 'Theory',
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/sections?s_id=1&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Get section 
*** API Design
      :PROPERTIES:
      :CUSTOM_ID: api_get_section_by_id
      :END:    
  - URL :: /sections/<id>
           
  - Method :: GET

  - URL Params ::  None
                  
  - Payload :: None
  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
{
    "id": 1,
    "name": "Theory"
}
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/sections/1
#+END_EXAMPLE

*** Implementation
#+NAME: get_section
#+BEGIN_SRC python
@api.route('/sections', methods=['GET'])
def get_section():
    if request.method == 'GET':
       if 's_id' in request.args:
           s_id  = request.args['s_id']
           try:
               current_app.logger.debug("running operation get_section")
               section = SystemInterface.get_section_by_id(id)
               current_app.logger.debug("completed operation get_section")
               return jsonify(section)

           except NotAuthorizedError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "status code": 401,
                        "msg": err_str}
               abort(401, msg)

           except TypeError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str }
               abort(500, msg)

           except StateError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str}
               abort(500, msg)

           except NotFoundError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "status code": 404,
                        "msg": err_str}
               abort(404, msg)

           except Exception as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str}
               abort(500, msg)
    
#+END_SRC

*** Test Cases
**** TestGetSectionById
#+NAME: test_get_section_by_id
#+BEGIN_SRC python
class TestGetSectionbyid(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_section_by_id(self):
        print "test_get_section_by_id"

        payload = {'name': 'Theory',
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/sections", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/sections?s_id=1", headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   


 
** Update Institute
*** API Design
**** Update institutes by instid
  :PROPERTIES:
  :CUSTOM_ID: api_update_institutes_by_instid
  :END:    
  - URL :: /institutes?institute_id=<institute_id>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
		   "assets": [
			{
			  "asset_type": "image",
			  "path": "amrita-university.png"
			}
		      ],

                    "key": "defaultkey"
}

#+END_EXAMPLE
  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "assets": [
    {
      "asset_type": {
        "asset_type": "image", 
        "id": "1"
      }, 
      "id": "153", 
      "path": "amrita-university.png"
    }
  ], 
  "id": "1", 
  "institute_id": "amrita", 
  "institute_name": "Amrita University"
}

#+END_EXAMPLE

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/institutes?institute_id=amrita
#+END_EXAMPLE

*** Implementation
#+NAME: update_institute
#+BEGIN_SRC python
@api.route('/institutes', methods=['PUT'])
def update_institute():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'institute_id' in request.args:
            data_dict['institute_id']  = request.args['institute_id']
        else:
            abort(500, "Please provide the 'institute_id' to update the institute")
        
        try:
            current_app.logger.debug("running operation update_institute")
            institute = SystemInterface.update_institute(data_dict)
            current_app.logger.debug("completed operation update_institute")
            return jsonify(institute.to_client())

        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",  
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

#+END_SRC

*** Test Cases
**** TestUpdateInstitute 
 #+NAME: test_update_institute
 #+BEGIN_SRC python
class TestUpdateInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_institute(self):
        print "test_update_institute"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'institute_name': 'IIT Kanpur',
                   'institute_id': 'IITK',
                   "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload1 = {'asset_type': 'Video',
                   'path': 'vlabs.ac.in/images/video/icon.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload1),
                                 headers=headers)

        payload1 = {'institute_name': 'IIT Kharagpur',
		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                    'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.put("/institutes?institute_id=IITK", data=json.dumps(payload1),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
 
** Delete Institute
*** API Design
**** Delete institute by institute_id
  :PROPERTIES:
  :CUSTOM_ID: api_delete_institute_by_institute_id
  :END:    
  - URL :: /institutes?<institute_id>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/institutes?institute_id=iiith&key=<key>
#+END_EXAMPLE

*** Implementation
#+NAME: delete_institute
#+BEGIN_SRC python
@api.route('/institutes', methods=['DELETE'])
def delete_institute():
    if request.method == 'DELETE':
        if 'institute_id' in request.args and 'key' in request.args:
            institute_id  = request.args['institute_id']
            key = request.args['key']

            try:
                current_app.logger.debug("running operation delete_institute")
                institute = SystemInterface.delete_institute(institute_id, key)
                current_app.logger.debug("completed operation delete_institute")
                return jsonify({"status":"sucess"})

            except NotAuthorizedError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 401,
                        "msg": err_str}
                abort(401, msg)
            
            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str }
                abort(500, msg)
            
            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 404,
                       "msg": err_str}
                abort(404, msg)
            
            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestDeleteInstitute 
 #+NAME: test_delete_institute
 #+BEGIN_SRC python
class TestDeleteInstitute(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_institute(self):
        print "test_delete_institute"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'institute_name': 'IIT Kharagpur',
                   'institute_id': 'IITKgp',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/institutes?institute_id=IITKgp&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Update Discipline
*** API Design
**** Update disciplines by disid
  :PROPERTIES:
  :CUSTOM_ID: api_update_disciplines_by_disid
  :END:    
  - URL :: /disciplines?discipline_id=<discipline_id>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
		   "assets": [
			{
			  "asset_type": "image",
			  "path": "physical-sciences.png"
			}
		      ],

                    "key": "defaultkey"
}

#+END_EXAMPLE
  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "assets": [
    {
      "asset_type": {
        "asset_type": "image", 
        "id": "1"
      }, 
      "id": "160", 
      "path": "physical-sciences.png"
    }
  ], 
  "discipline_id": "phy-sc", 
  "discipline_name": "Physical Sciences", 
  "id": "11"
}

#+END_EXAMPLE

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/disciplines?discipline_id=phy-sc
#+END_EXAMPLE

*** Implementation
#+NAME: update_discipline
#+BEGIN_SRC python
@api.route('/disciplines', methods=['PUT'])
def update_discipline():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'discipline_id' in request.args:
            data_dict['discipline_id']  = request.args['discipline_id']
        else:
            abort(500, "Please provide the 'discipline_id' to update the institute")
        
        try:
            current_app.logger.debug("running operation update_discipline")
            discipline = SystemInterface.update_discipline(data_dict)
            current_app.logger.debug("completed operation update_discipline")
            return jsonify(discipline.to_client())
        
        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

#+END_SRC

*** Test Cases
**** TestUpdateDiscipline
 #+NAME: test_update_discipline
 #+BEGIN_SRC python
class TestUpdateDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_discipline(self):
        print "test_update_discipline"
 
        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)
        
        payload = {'discipline_name': 'Computer Science',
                   'discipline_id': 'CSE',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)
        
        payload1 = {'asset_type': 'Video',
                   'path': 'vlabs.ac.in/images/video/icon.png',
                   'key': KEY}
        
        response = self.client.post("/assets", data=json.dumps(payload1),
                                 headers=headers)
        """
        payload1 = {'discipline_name': 'Computer Science and Engineering',
                   'assests' : [],
                   'key': KEY}
        
        response = self.client.put("/disciplines?discipline_id=CSE", data=json.dumps(payload1),
                                 headers=headers)
        """
        self.assertEqual(response.status_code, 200)
        
 #+END_SRC
   

** Delete Discipline
*** API Design
**** Delete discipline by discipline_id
  :PROPERTIES:
  :CUSTOM_ID: delete_discipline_by_discipline_id
  :END:    
  - URL :: /disciplines?<discipline_id>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/disciplines?discipline_id=cse&key=<key>
#+END_EXAMPLE

*** Implementation
#+NAME: delete_discipline
#+BEGIN_SRC python
@api.route('/disciplines', methods=['DELETE'])
def delete_discipline():
    if request.method == 'DELETE':
        if 'discipline_id' in request.args and 'key' in request.args:
            discipline_id  = request.args['discipline_id']
            key = request.args['key']

            try:
                current_app.logger.debug("running operation delete_discipline")
                discipline = SystemInterface.delete_discipline(discipline_id, key)
                current_app.logger.debug("completed operation delete_discipline")
                return jsonify({"status":"sucess"})
            
            except NotAuthorizedError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 401,
                        "msg": err_str}
                abort(401, msg)

            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str }
                abort(500, msg)
            
            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 404,
                        "msg": err_str}
                abort(404, msg)

            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)            
            
            
#+END_SRC

*** Test Cases
**** TestDeleteDiscipline
 #+NAME: test_delete_discipline
 #+BEGIN_SRC python
class TestDeleteDiscipline(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_discipline(self):
        print "test_delete_discipline"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        payload = {'discipline_name': 'Computer Science',
                   'discipline_id': 'CSE',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/disciplines?discipline_id=CSE&key=defaultkey", 
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Update Hosting_Info
*** API Design
**** Update hosting_info by hosted_url
  :PROPERTIES:
  :CUSTOM_ID: update_hosting_info_by_hosted_url
  :END:    
  - URL :: /hosting_info/<hosted_url>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"hosting_status": "hosted",
"hosted_on": "cloud",
"key": "<key>"
}

#+END_EXAMPLE
  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "hosted_url": "http://cse14-iiith.vlabs.ac.in",
  "hosting_status": "hosted",
  "hosted_on": "cloud"
}

#+END_EXAMPLE

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/hosting_info?hosted_url=http://cse14-iiith.vlabs.ac.in
#+END_EXAMPLE

*** Implementation
#+NAME: update_hosting_info
#+BEGIN_SRC python
@api.route('/hosting_info', methods=['PUT'])
def update_hosting_info():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'hosted_url' in request.args:
            data_dict['hosted_url']  = request.args['hosted_url']
        else:
            abort(500, "Please provide the 'hosted_url' to update the hosting_info")
        
        try:
            current_app.logger.debug("running operation update_hosting_info")
            hosting_info = SystemInterface.update_hosting_info(data_dict)
            current_app.logger.debug("completed operation update_hosting_info")
            return jsonify(hosting_info)

        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

#+END_SRC

*** Test Cases
**** TestUpdateHosting_Info 
 #+NAME: test_update_hosting_info
 #+BEGIN_SRC python
class TestUpdateHosting_Info(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_hosting_info(self):
        print "test_update_hosting_info"

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload1 = {'hosting_status': 'not hosted', 
                    'hosted_on': 'server', 
                    'key': KEY}
    

        response = self.client.put("/hosting_info?hosted_url=http://cse14-iiith.vlabs.ac.in", data=json.dumps(payload1),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
 
** Update Developer
*** API Design
**** Update developers by email_id
  :PROPERTIES:
  :CUSTOM_ID: api_update_developers_by_email_id
  :END:    
  - URL :: /developers?email=<email_id>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
  "name": "Prof. Dharamraj",
  "key": "defaultkey"
}

#+END_EXAMPLE
  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "email": {
    "email": "joy@gmail.com", 
    "id": "4"
  }, 
  "id": "4", 
  "name": {
    "id": "5", 
    "name": "Prof. Dharamraj"
  }
}

#+END_EXAMPLE

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/developers?email=joy@gmail.com
#+END_EXAMPLE

*** Implementation
#+NAME: update_developer
#+BEGIN_SRC python
@api.route('/developers', methods=['PUT'])
def update_developer():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'email' in request.args:
            data_dict['email']  = request.args['email']
        else:
            abort(500, "Please provide the 'email' to update the developer")
        
        try:
            current_app.logger.debug("running operation update_developer")
            developer = SystemInterface.update_developer(data_dict)
            current_app.logger.debug("completed operation update_developer")
            return jsonify(developer.to_client())

        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

#+END_SRC

*** Test Cases
**** TestUpdateDeveloper 
 #+NAME: test_update_developer
 #+BEGIN_SRC python
class TestUpdateDeveloper(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

class TestUpdateDeveloper(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_developer(self):
        print "test_update_developer"

        payload = {'institute_name': 'IIT Kanpur',
                   'institute_id': 'IITK',
                   "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/image.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'discipline_name': 'Computer Science',
                   'discipline_id': 'CSE',
                   		    "assets": [
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/images/static/video.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof.Dharamraj',
                   'email': 'dharamraj@gmail.com',
                   'key': KEY}
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload1 = {'institute_name': 'IIT Kharagpur',
                    'institute_id': 'IITKgp',
                    "assets": [
                        {
                "asset_type": "Icon",
                "path": "vlabs.ac.in/images/static/icon.png"
                }],

                    'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload1 = {'discipline_name': 'Electronics & Comuunication Engg.',
                    'discipline_id': 'ECE',
                    "assets": [
                        {
                "asset_type": "logo",
                "path": "vlabs.ac.in/images/static/logo.png"
                }],
                        'key': KEY
                        }


        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload1 = {'name': 'Prof.Raj', 'key': KEY}

        response = self.client.put("/developers?email=dharamraj@gmail.com",
                                       data=json.dumps(payload1),
                                    headers=headers)

        self.assertEqual(response.status_code, 200)
        
 #+END_SRC
   

** Delete Hosting_Info
*** API Design
**** Delete hosting_info by hosted_url
  :PROPERTIES:
  :CUSTOM_ID: delete_hosting_info_by_hosted_url
  :END:    
  - URL :: /hosting_info?<hosted_url>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/hosting_info?hosted_url=http://cse14-iiith.vlabs.ac.in&key=<key>
#+END_EXAMPLE

*** Implementation
#+NAME: delete_hosting_info
#+BEGIN_SRC python
@api.route('/hosting_info', methods=['DELETE'])
def delete_hosting_info():
    if request.method == 'DELETE':
        if 'hosted_url' in request.args and 'key' in request.args:
            hosted_url  = request.args['hosted_url']
            key = request.args['key']

            try:
                current_app.logger.debug("running operation delete_hosting_info")
                hosting_info = SystemInterface.delete_hosting_info(hosted_url, key)
                current_app.logger.debug("completed operation delete_hosting_info")
                return jsonify({"status":"sucess"})

            except NotAuthorizedError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 401,
                        "msg": err_str}
                abort(401, msg)
            
            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str }
                abort(500, msg)
            
            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 404,
                       "msg": err_str}
                abort(404, msg)
            
            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
            
#+END_SRC

*** Test Cases
**** TestDeleteHosting_Info
 #+NAME: test_delete_hosting_info
 #+BEGIN_SRC python
class TestDeleteHosting_Info(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_hosting_info(self):
        print "test_delete_hosting_info"

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/hosting_info?hosted_url=http://cse14-iiith.vlabs.ac.in&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Delete Integration_Status
*** API Design
**** Delete integration_status by integration_level
  :PROPERTIES:
  :CUSTOM_ID: api_delete_integration_status_by_integration_level
  :END:    
  - URL :: /integration_status?integration_level=<integration_level>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/integration_status?integration_level=4&key=<key>
#+END_EXAMPLE

*** Implementation
#+NAME: delete_integration_status
#+BEGIN_SRC python
@api.route('/integration_status', methods=['DELETE'])
def delete_integration_status():
    if request.method == 'DELETE':
        if 'integration_level' in request.args and 'key' in request.args:
            integration_level  = request.args['integration_level']
            key = request.args['key']

            try:
                current_app.logger.debug("running operation delete_integration_status")
                integration_status = SystemInterface.delete_integration_status(integration_level, key)
                current_app.logger.debug("completed operation delete_integration_status")
                return jsonify({"status":"sucess"})

            except NotAuthorizedError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 401,
                        "msg": err_str}
                abort(401, msg)

            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str }
                abort(500, msg)
            
            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 404,
                       "msg": err_str}
                abort(404, msg)
            
            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
            
#+END_SRC

*** Test Cases
**** TestDeleteIntegration_Status
 #+NAME: test_delete_integration_status
 #+BEGIN_SRC python
class TestDeleteIntegration_Status(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_integration_status(self):
        print "test_delete_integration_status"

        payload = {'integration_level': 4,
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/integration_status?integration_level=4&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Delete Email
*** API Design
**** Delete email
  :PROPERTIES:
  :CUSTOM_ID: delete_email_by_email
  :END:    
  - URL :: /emails?<email>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
      {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/emails?email=dharamraj@gmail.com&key=<key>
#+END_EXAMPLE

*** Implementation
#+NAME: delete_email
#+BEGIN_SRC python
@api.route('/emails', methods=['DELETE'])
def delete_email():
    if request.method == 'DELETE':
        if 'email' in request.args and 'key' in request.args:
            email  = request.args['email']
            key = request.args['key']

            try:
                current_app.logger.debug("running operation delete_email")
                email = SystemInterface.delete_email(email, key)
                current_app.logger.debug("completed operation delete_email")
                return jsonify({"status":"sucess"})

            except NotAuthorizedError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 401,
                       "msg": err_str}
                abort(401, msg)

            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

#+END_SRC

*** Test Cases
**** TestDeleteEmail
 #+NAME: test_delete_email
 #+BEGIN_SRC python
class TestDeleteEmail(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_email(self):
        print "test_delete_email"

        payload = {'email': 'dharamraj@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/emails", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/emails?email=dharamraj@gmail.com&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Update, Delete and Get Name by ID
*** API Design
**** Update name by id
  :PROPERTIES:
  :CUSTOM_ID: update_section_by_id
  :END:    
  - URL :: /names/<id>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE

{
  "key" : "<key>",
  "name" : "Prof. Dharamrajuuuu"
}


#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "name": "Prof. Dharamrajuuuu"
}
#+END_EXAMPLE
    
  - Error Response:
    + Contents :
      {"status" : "error"}

    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/names/1
#+END_EXAMPLE

**** Delete name by id
  :PROPERTIES:
  :CUSTOM_ID: delete_section_by_id
  :END:    
  - URL :: /names/<id>
           
  - Method :: DELETE

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :
                 { "status" : "success" }
    
  - Error Response:
    + Contents :
      {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/names/2
#+END_EXAMPLE

**** Get name by id
      :PROPERTIES:
      :CUSTOM_ID: api_get_section_by_id
      :END:    
  - URL :: /names/<id>
           
  - Method :: GET

  - URL Params ::  None
                  
  - Payload ::
  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
{
    "id": 1,
    "name" : "Prof. Dharamraj"
}
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
      {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/names/1
#+END_EXAMPLE

*** Implementation
#+NAME: update_and_delete_name
#+BEGIN_SRC python
@api.route('/names/<id>', methods=['GET', 'PUT', 'DELETE'])
def update_and_delete_name(id):
    if request.method == 'GET':
        try:
            current_app.logger.debug("running operation get_name_by_id")
            name = SystemInterface.get_name_by_id(id)
            current_app.logger.debug("completed operation get_name_by_id")
            return jsonify(name)

        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
    
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
            data_dict['n_id']=id
        else:
            abort(500, "the request does not contain data in json")

        try:
            current_app.logger.debug("running operation update_name")
            name = SystemInterface.update_name(data_dict)
            current_app.logger.debug("completed operation update_name")
            return jsonify(name)

        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
        
    if request.method == 'DELETE':

        try:
            current_app.logger.debug("running operation delete_name")
            name = SystemInterface.delete_name(id)
            current_app.logger.debug("completed operation delete_name")
            return jsonify({"status":"sucess"})

        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
#+END_SRC
*** Test Cases
**** TestUpdateNameById
 #+NAME: test_update_name_by_id
 #+BEGIN_SRC python
class TestUpdateNameById(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_name_by_id(self):
        print "test_update_name_by_id"
        payload = {'name': 'Prof. Dharamraj',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/names", data=json.dumps(payload),
                                 headers=headers)

        payload1 = {'name': 'Prof. Dharamrajuuuu',
                   'key': KEY}

        response = self.client.put("/names/1", data=json.dumps(payload1),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestDeleteNameById
 #+NAME: test_delete_name_by_id
 #+BEGIN_SRC python
class TestDeleteNameById(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_name_by_id(self):
        print "test_delete_name_by_id"

        payload = {'name': 'Prof. Dharamraj',
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/names", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/names/1", headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestGetNameById
 #+NAME: test_get_name_by_id
 #+BEGIN_SRC python
class TestGetNamebyid(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_name_by_id(self):
        print "test_get_name_by_id"

        payload = {'name': 'Prof. Dharamraj',
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/names", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/names/1", headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
 
** Delete Developer
*** API Design
**** Delete developer
  :PROPERTIES:
  :CUSTOM_ID: delete_developer_by_email_id
  :END:    
  - URL :: /developers?<email_id>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: 

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/developers?email_id=dharamraj@gmail.com&key=<key>
#+END_EXAMPLE

*** Implementation
#+NAME: delete_developer
#+BEGIN_SRC python
@api.route('/developers', methods=['DELETE'])
def delete_developer():
    if request.method == 'DELETE':
        if 'email' in request.args and 'key' in request.args:
            email  = request.args['email']
            key = request.args['key']

            try:
                current_app.logger.debug("running operation delete_developer")
                developer = SystemInterface.delete_developer(email, key)
                current_app.logger.debug("completed operation delete_developer")
                return jsonify({"status":"sucess"})

            except NotAuthorizedError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 401,
                       "msg": err_str}
                abort(401, msg)

            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str }
                abort(500, msg)

            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
                abort(404, msg)

            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                       "msg": err_str}
                abort(500, msg)

#+END_SRC

*** Test Cases
**** TestDeleteDeveloper
 #+NAME: test_delete_developer
 #+BEGIN_SRC python
class TestDeleteDeveloper(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_developer(self):
        print "test_delete_developer"

        payload = {'name': 'Prof. Dharamraj',
                   'email': 'dharamraj@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/developers?email=dharamraj@gmail.com&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Delete Experiment
*** API Design
**** Delete experiment by exp_id
  :PROPERTIES:
  :CUSTOM_ID: api_delete_experiment_by_exp_id
  :END:    
  - URL :: /experiments?exp_id=<exp_id>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/experiments?email=joy@gmail.com&key=defaultkey
#+END_EXAMPLE

*** Implementation
#+NAME: delete_experiment
#+BEGIN_SRC python
@api.route('/experiments', methods=['DELETE'])
def delete_experiment():
    if request.method == 'DELETE':
        if 'exp_id' in request.args and 'key' in request.args:
            exp_id  = request.args['exp_id']
            key = request.args['key']
            try:
                current_app.logger.debug("running operation delete_experiment")
                exp_id = SystemInterface.delete_experiment(exp_id, key)
                current_app.logger.debug("completed operation delete_experiment")
                return jsonify({"status":"sucess"})
            
            except NotAuthorizedError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 401,
                        "msg": err_str}
                abort(401, msg)
            
            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str }
                abort(500, msg)
            
            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 404,
                       "msg": err_str}
                abort(404, msg)
            
            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
            
#+END_SRC
*** Test Cases
**** TestDeleteExperiment
 #+NAME: test_delete_experiment
 #+BEGIN_SRC python
class TestDeleteExperiment(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_experiment(self):
        print "test_delete_experiment"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                  headers=headers)

        payload = {'institute_name': 'IIT Kanpur',
                   'institute_id': 'IITK',
                   		    "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/institutes", data=json.dumps(payload),
                                 headers=headers)

        payload = {'discipline_name': 'Computer Science',
                   'discipline_id': 'CSE',
                   "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			}
		      ],

                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/disciplines", data=json.dumps(payload),
                                 headers=headers)

        payload = {'integration_level': 4,
                    'key': KEY
                  }
        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/integration_status", data=json.dumps(payload),
                                 headers=headers)

        payload = {'name': 'Prof. Dharamaja',
                   'email': 'abc@gmail.com',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/developers", data=json.dumps(payload),
                                 headers=headers)

        payload = {'hosting_status': 'hosted',
                   'hosted_url': 'http://cse14-iiith.vlabs.ac.in',
                   'hosted_on': 'cloud',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/hosting_info", data=json.dumps(payload),
                                 headers=headers)

        payload = {
                    "key" : KEY,
		    "experiment": {
		      "id": "e99847",
                      "overview": "overview",
		      "name": "Parallel and distributed processing",
		      "discipline_id": "CSE",
		      "institute_id": "IITK",
		      "developers": [
			{
			  "name": "Dinesh Malviya",
			  "email": "xyz@gmail.com"
			},
			{
			  "name": "Ashish Ahuja",
			  "email": "abc@gmail.com"
			}
		      ],
		      "hosting_info": [
			{
			  "hosting_status": "hosted",
			  "hosted_on": "college-cloud",
			  "hosted_url": "http://cse14-iiith.ac.in"
			}
		      ],
		      "integration_level": 4,
		      "assets": [
			{
			  "asset_type": "image",
			  "path": "vlabs.ac.in/images/static/logo.png"
			},
			{
			  "asset_type": "video",
			  "path": "vlabs.ac.in/video/abc.mkv"
			}
		      ],
		      "sections": [
			"Introduction",
			"Objective",
			"Tutorial",
			"Illustration",
			"Procedure",
			"Experiment",
			"Observations",
			"Assignment",
			"References"
		      ]
		    }
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/experiments", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/experiments", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Get All Assets and Get Asset by path
*** API Design
**** Get all Assets
  :PROPERTIES:
  :CUSTOM_ID: api_get_all_assets
  :END:    
  - URL :: /assets

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
[
    {
        "path": "vlabs.ac.in/images/static/logo.png",
        "asset_type": "Image",
        "id": 1
    }
]
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/assets
#+END_EXAMPLE

**** Get Asset by path
  :PROPERTIES:
  :CUSTOM_ID: api_get_asset_by_path
  :END:    
  - URL :: /assets?path=<path>

  - Method :: GET

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :

#+BEGIN_EXAMPLE
{
    "asset_type": "Image",
    "id": 3,
    "path": "vlabs.ac.in/images/static/icon.png"
}
#+END_EXAMPLE	       

    
  - Error Response:
    + Contents :
      {"status" : "error"}
      
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/assets?path=vlabs.ac.in/images/static/logo.png
#+END_EXAMPLE

*** Implementation
REST API to get all assets and get asset by path.
#+NAME: get_asset
#+BEGIN_SRC python
@api.route('/assets', methods=['GET'])
def get_asset():
    if request.method == 'GET':
       if 'path' in request.args:
           path  = request.args['path']
           try:
               current_app.logger.debug("running operation get_asset_by_path")
               asset = SystemInterface.get_asset_by_path(path)
               current_app.logger.debug("completed operation get_asset_by_path")
               return jsonify(asset)

           except TypeError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str }
               abort(500, msg)
           
           except StateError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str}
               abort(500, msg)
           
           except NotFoundError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "status code": 404,
                        "msg": err_str}
               abort(404, msg)
           
           except Exception as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str}
               abort(500, msg)
       else:
           try:
               current_app.logger.debug("running operation get_assets")
               assets = SystemInterface.get_assets()
               current_app.logger.debug("completed operation get_assets")
               return pagination(
                        assets, 
                        '/assets?',
                        start=int(request.args.get('page', 1)), 
                        limit=int(request.args.get('pageSize', 25))
               )
        
           except TypeError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str }
               abort(500, msg)
           
           except StateError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str}
               abort(500, msg)
           
           except NotFoundError as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "status code": 404,
                        "msg": err_str}
               abort(404, msg)
           
           except Exception as e:
               current_app.logger.error("Exception = %s" % str(e))
               err_str = str(e)
               msg = {"status": "failure",
                        "msg": err_str}
               abort(500, msg)
#+END_SRC

*** Test Cases
**** TestGetAsset  
 #+NAME: test_get_Asset
 #+BEGIN_SRC python
class TestGetAsset(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_assets(self):
        print "test_get_assets_in_rest"

        payload = {'asset_type': 'Images',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/assets", headers=headers)
        self.assertEqual(response.status_code, 200)

 #+END_SRC
   
**** TestGetAssetbyPath 
#+NAME: test_get_asset_by_path
#+BEGIN_SRC python
class TestGetAsset(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_get_asset_by_path(self):
        print "test_get_asset_by_path_in_rest"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY
                  }

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.get("/assets?path=vlabs.ac.in/images/static/logo.png", headers=headers)
        self.assertEqual(response.status_code, 200)

#+END_SRC


** Add Asset 
*** API Design
**** Add Asset
  :PROPERTIES:
  :CUSTOM_ID: api_add_institute
  :END:    
  - URL :: /assets

  - Method :: POST

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
 {
"path": "vlabs.ac.in/images/static/logo.png",
"asset_type": "Image",
"key": "<key>"
}
#+END_EXAMPLE	       

  - Success Response
    + Status_Code: 200
    + Content: 
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "path": "vlabs.ac.in/images/static/logo.png", 
  "asset_type": "Image"
}

#+END_EXAMPLE

  - Error Response:
    + Contents :
                {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
http://localhost:5000/assets
#+END_EXAMPLE
    
*** Implementation
REST API to add an asset.
#+NAME: add_asset
#+BEGIN_SRC python
@api.route('/assets', methods=['POST'])
def add_asset():
    if request.method == 'POST':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        try:
            current_app.logger.debug("running operation add_asset")
            asset = SystemInterface.add_asset(data_dict)
            current_app.logger.debug("completed operation add_asset")
            return jsonify(asset)

        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)
            
#+END_SRC

*** Test Cases
**** TestAddAsset  
 #+NAME: test_add_asset
 #+BEGIN_SRC python
class TestAddAsset(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_add_asset(self):
        print "test_add_asset_in_rest"
        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Update Asset
*** API Design
**** Update assets by path
  :PROPERTIES:
  :CUSTOM_ID: api_update_institutes_by_instid
  :END:    
  - URL :: /assets?path=<path>

  - Method :: PUT

  - URL Params ::  None

  - Payload :: 
#+BEGIN_EXAMPLE
{
"asset_type": "Image",
"key": "<key>"
}

#+END_EXAMPLE
  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "id": 1, 
  "path": "vlabs.ac.in/images/static/logo.png", 
  "asset_type": "Image"
}

#+END_EXAMPLE

    
  - Error Response:
    + Contents :
      {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/assets?path=vlabs.ac.in/images/static/logo.png
#+END_EXAMPLE

*** Implementation
#+NAME: update_asset
#+BEGIN_SRC python
@api.route('/assets', methods=['PUT'])
def update_asset():
    if request.method == 'PUT':
        if request.is_json:
            data_json = json.dumps(request.get_json())
            data_dict = yaml.safe_load(data_json)
        else:
            abort(500, "the request does not contain data in json")

        if 'path' in request.args:
            data_dict['path']  = request.args['path']
        else:
            abort(500, "Please provide the 'path' to update the asset")
        
        try:
            current_app.logger.debug("running operation update_asset")
            asset = SystemInterface.update_asset(data_dict)
            current_app.logger.debug("completed operation update_asset")
            return jsonify(asset)
        
        except NotAuthorizedError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                    "status code": 401,
                       "msg": err_str}
            abort(401, msg)

        except TypeError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str }
            abort(500, msg)

        except StateError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

        except NotFoundError as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "status code": 404,
                       "msg": err_str}
            abort(404, msg)

        except Exception as e:
            current_app.logger.error("Exception = %s" % str(e))
            err_str = str(e)
            msg = {"status": "failure",
                       "msg": err_str}
            abort(500, msg)

#+END_SRC

*** Test Cases
**** TestUpdateAsset  
 #+NAME: test_update_asset
 #+BEGIN_SRC python
class TestUpdateAsset(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_update_asset(self):
        print "test_update_asset"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        payload1 = {'asset_type': 'Video',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.put("/assets?path=vlabs.ac.in/images/static/logo.png", data=json.dumps(payload1),
                                 headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

** Delete Asset
*** API Design
**** Delete asset by path
  :PROPERTIES:
  :CUSTOM_ID: api_delete_institute_by_institute_id
  :END:    
  - URL :: /assets?path=<path>&key=<key>

  - Method :: DELETE

  - URL Params ::  None

  - Payload :: None

  - Success Response
    + Status_Code: 200
      + Contents :
#+BEGIN_EXAMPLE
{
  "status": "sucess"
}

#+END_EXAMPLE
    
  - Error Response:
    + Contents :
      {"status" : "error"}
    
  - Example:
#+BEGIN_EXAMPLE
    http://localhost:5000/assets?path=vlabs.ac.in/images&key=<key>
#+END_EXAMPLE

*** Implementation
#+NAME: delete_asset
#+BEGIN_SRC python
@api.route('/assets', methods=['DELETE'])
def delete_asset():
    if request.method == 'DELETE':
        if 'path' in request.args and 'key' in request.args:
            path  = request.args['path']
            key = request.args['key']

            try:
                current_app.logger.debug("running operation delete_asset")
                asset = SystemInterface.delete_asset(path, key)
                current_app.logger.debug("completed operation delete_asset")
                return jsonify({"status":"sucess"})
            
            except NotAuthorizedError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 401,
                        "msg": err_str}
                abort(401, msg)
            
            except TypeError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str }
                abort(500, msg)

            except StateError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)

            except NotFoundError as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "status code": 404,
                        "msg": err_str}
                abort(404, msg)
            
            except Exception as e:
                current_app.logger.error("Exception = %s" % str(e))
                err_str = str(e)
                msg = {"status": "failure",
                        "msg": err_str}
                abort(500, msg)
            
            
#+END_SRC

*** Test Cases
**** TestDeleteAsset  
 #+NAME: test_delete_asset
 #+BEGIN_SRC python
class TestDeleteAsset(TestCase):
    TESTING = True
    def create_app(self):
        app = create_app(config)
        return app

    def setUp(self):
        db.create_all()

    def tearDown(self):
        db.session.remove()
        db.drop_all()

    def test_delete_asset(self):
        print "test_delete_asset"

        payload = {'asset_type': 'Image',
                   'path': 'vlabs.ac.in/images/static/logo.png',
                   'key': KEY}

        headers = {'Content-Type': 'application/json'}

        response = self.client.post("/assets", data=json.dumps(payload),
                                 headers=headers)

        response = self.client.delete("/assets?path=vlabs.ac.in/images/static/logo.png&key=defaultkey",
                                          headers=headers)

        self.assertEqual(response.status_code, 200)

 #+END_SRC
   

* Infra                                                         :boilerplate:

** sources
*** Imports 
#+name: imports_for_sources
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import os
import requests
import json
from flask import session, render_template, Blueprint, request, \
     jsonify, abort, current_app, redirect, url_for, make_response
from flask import Flask
from runtime.utils.type_utils import jsonify_list
from runtime.exceptions.custom_exceptions import *
from runtime.system.system_interface import SystemInterface
import yaml

api = Blueprint('APIs', __name__)

#+end_src

    
** tests
*** Imports 
#+name: imports_for_tests
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import unittest
from flask_testing import TestCase
from sqlalchemy.exc import IntegrityError
from runtime.utils.class_persistence_template import db
from runtime.rest.app import create_app
from runtime.config.system_config import KEY
from runtime.rest.api import *
from runtime.system.system import System
import datetime
config = {
         'SQLALCHEMY_DATABASE_URI': ''
         }

#+end_src

*** Running tests
#+NAME: run_test_cases
#+BEGIN_SRC python
if __name__ == '__main__':
    unittest.main()

#+END_SRC


* Tangle                                                        :boilerplate:
  
** sources
#+BEGIN_SRC python :tangle api.py :eval no :noweb yes
<<imports_for_sources>>
<<pagination>>
<<get_lab>>
<<add_lab>>
<<update_lab>>
<<delete_lab>>
<<get_experiment>>
<<add_experiment>>
<<get_disciplines>>
<<add_discipline>>
<<update_experiment>>
<<delete_experiment>>
<<update_section>>
<<get_sections>>
<<add_section>>
<<get_section>>
<<delete_section>>
<<update_institute>>
<<delete_institute>>
<<update_discipline>>
<<delete_discipline>>
<<get_institute>>
<<add_institute>>
<<get_hosting_info>>
<<add_hosting_info>>
<<update_hosting_info>>
<<delete_hosting_info>>
<<get_integration_status>>
<<add_integration_status>>
<<delete_integration_status>>
<<get_asset>>
<<add_asset>>
<<update_asset>>
<<delete_asset>>
<<delete_email>>
<<get_email>>
<<add_email>>
<<get_names>>
<<add_name>>
<<delete_name>>
<<get_developer>>
<<add_developer>>
<<delete_developer>>
<<update_developer>>
<<update_and_delete_name>>

#+END_SRC

   
** tests
#+BEGIN_SRC python :tangle test_api.py :eval no :noweb yes
<<imports_for_tests>>
<<test_add_lab>>
<<test_update_lab>>
<<test_delete_lab>>
<<test_get_labs>>
<<test_get_lab_by_labid>>
<<test_get_labs_by_institute>>
<<test_get_labs_by_lab_name>>
<<test_get_labs_by_discipline>>
<<test_get_lab_by_labname_keyword>>
<<test_get_exp_by_expid>>
<<test_get_discipline_by_disid>>
<<test_add_experiment>>
<<test_add_discipline>>
<<test_get_discipline>>
<<test_update_discipline>>
<<test_get_experiment>>
<<test_update_experiment>>
<<test_update_section>>
<<test_delete_section>>
<<test_delete_experiment>>
<<test_get_Sections>>
<<test_add_section>>
<<test_get_names>>
<<test_add_name>>
<<test_update_name_by_id>>
<<test_delete_name_by_id>>
<<test_get_Email>>
<<test_add_email>>
<<test_update_email>>
<<test_delete_email>>
<<test_get_Developer>>
<<test_add_developer>>
<<test_update_developer>>
<<test_delete_developer>>
<<test_add_institute>>
<<test_get_institute>>
<<test_update_institute>>
<<test_delete_institute>>
<<test_delete_discipline>>
<<test_get_Hosting_Info>>
<<test_add_hosting_info>>
<<test_update_hosting_info>>
<<test_delete_hosting_info>>
<<test_get_Integration_Status>>
<<test_add_integration_status>>
<<test_delete_integration_status>>
<<test_get_asset>>
<<test_add_asset>>
<<test_update_asset>>
<<test_delete_asset>>
<<test_get_Developer>>
<<test_get_section_by_id>>
<<test_get_name_by_id>>
<<test_get_hosting_info_by_hosted_url>>
<<run_test_cases>>
#+end_src
